var DraggableVirtualList=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e){t.exports=Vue},function(t,e,n){t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s="fb15")}({"02f4":function(t,e,n){var r=n("4588"),o=n("be13");t.exports=function(t){return function(e,n){var i,a,s=String(o(e)),l=r(n),c=s.length;return l<0||l>=c?t?"":void 0:(i=s.charCodeAt(l))<55296||i>56319||l+1===c||(a=s.charCodeAt(l+1))<56320||a>57343?t?s.charAt(l):i:t?s.slice(l,l+2):a-56320+(i-55296<<10)+65536}}},"0390":function(t,e,n){"use strict";var r=n("02f4")(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},"07e3":function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},"0bfb":function(t,e,n){"use strict";var r=n("cb7c");t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},"0fc9":function(t,e,n){var r=n("3a38"),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},1654:function(t,e,n){"use strict";var r=n("71c1")(!0);n("30f1")(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})}))},1691:function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},"1af6":function(t,e,n){var r=n("63b6");r(r.S,"Array",{isArray:n("9003")})},"1bc3":function(t,e,n){var r=n("f772");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},"1ec9":function(t,e,n){var r=n("f772"),o=n("e53d").document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},"20fd":function(t,e,n){"use strict";var r=n("d9f6"),o=n("aebd");t.exports=function(t,e,n){e in t?r.f(t,e,o(0,n)):t[e]=n}},"214f":function(t,e,n){"use strict";n("b0c5");var r=n("2aba"),o=n("32e9"),i=n("79e5"),a=n("be13"),s=n("2b4c"),l=n("520a"),c=s("species"),u=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),f=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var d=s(t),h=!i((function(){var e={};return e[d]=function(){return 7},7!=""[t](e)})),p=h?!i((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[c]=function(){return n}),n[d](""),!e})):void 0;if(!h||!p||"replace"===t&&!u||"split"===t&&!f){var g=/./[d],v=n(a,d,""[t],(function(t,e,n,r,o){return e.exec===l?h&&!o?{done:!0,value:g.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),m=v[0],b=v[1];r(String.prototype,t,m),o(RegExp.prototype,d,2==e?function(t,e){return b.call(t,this,e)}:function(t){return b.call(t,this)})}}},"230e":function(t,e,n){var r=n("d3f4"),o=n("7726").document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},"23c6":function(t,e,n){var r=n("2d95"),o=n("2b4c")("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},"241e":function(t,e,n){var r=n("25eb");t.exports=function(t){return Object(r(t))}},"25eb":function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},"294c":function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},"2aba":function(t,e,n){var r=n("7726"),o=n("32e9"),i=n("69a8"),a=n("ca5a")("src"),s=n("fa5b"),l=(""+s).split("toString");n("8378").inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,n,s){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(c&&(i(n,a)||o(n,a,t[e]?""+t[e]:l.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||s.call(this)}))},"2b4c":function(t,e,n){var r=n("5537")("wks"),o=n("ca5a"),i=n("7726").Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},"2d00":function(t,e){t.exports=!1},"2d95":function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},"2fdb":function(t,e,n){"use strict";var r=n("5ca1"),o=n("d2c8");r(r.P+r.F*n("5147")("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},"30f1":function(t,e,n){"use strict";var r=n("b8e3"),o=n("63b6"),i=n("9138"),a=n("35e8"),s=n("481b"),l=n("8f60"),c=n("45f2"),u=n("53e2"),f=n("5168")("iterator"),d=!([].keys&&"next"in[].keys()),h=function(){return this};t.exports=function(t,e,n,p,g,v,m){l(n,e,p);var b,y,x,w=function(t){if(!d&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+" Iterator",_="values"==g,O=!1,E=t.prototype,C=E[f]||E["@@iterator"]||g&&E[g],D=C||w(g),T=g?_?w("entries"):D:void 0,M="Array"==e&&E.entries||C;if(M&&(x=u(M.call(new t)))!==Object.prototype&&x.next&&(c(x,S,!0),r||"function"==typeof x[f]||a(x,f,h)),_&&C&&"values"!==C.name&&(O=!0,D=function(){return C.call(this)}),r&&!m||!d&&!O&&E[f]||a(E,f,D),s[e]=D,s[S]=h,g)if(b={values:_?D:w("values"),keys:v?D:w("keys"),entries:T},m)for(y in b)y in E||i(E,y,b[y]);else o(o.P+o.F*(d||O),e,b);return b}},"32a6":function(t,e,n){var r=n("241e"),o=n("c3a1");n("ce7e")("keys",(function(){return function(t){return o(r(t))}}))},"32e9":function(t,e,n){var r=n("86cc"),o=n("4630");t.exports=n("9e1e")?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},"32fc":function(t,e,n){var r=n("e53d").document;t.exports=r&&r.documentElement},"335c":function(t,e,n){var r=n("6b4c");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},"355d":function(t,e){e.f={}.propertyIsEnumerable},"35e8":function(t,e,n){var r=n("d9f6"),o=n("aebd");t.exports=n("8e60")?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},"36c3":function(t,e,n){var r=n("335c"),o=n("25eb");t.exports=function(t){return r(o(t))}},3702:function(t,e,n){var r=n("481b"),o=n("5168")("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},"3a38":function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},"40c3":function(t,e,n){var r=n("6b4c"),o=n("5168")("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},4588:function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},"45f2":function(t,e,n){var r=n("d9f6").f,o=n("07e3"),i=n("5168")("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},4630:function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},"469f":function(t,e,n){n("6c1c"),n("1654"),t.exports=n("7d7b")},"481b":function(t,e){t.exports={}},"4aa6":function(t,e,n){t.exports=n("dc62")},"4bf8":function(t,e,n){var r=n("be13");t.exports=function(t){return Object(r(t))}},"4ee1":function(t,e,n){var r=n("5168")("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},t(i)}catch(t){}return n}},"50ed":function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},5147:function(t,e,n){var r=n("2b4c")("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},5168:function(t,e,n){var r=n("dbdb")("wks"),o=n("62a0"),i=n("e53d").Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},5176:function(t,e,n){t.exports=n("51b6")},"51b6":function(t,e,n){n("a3c3"),t.exports=n("584a").Object.assign},"520a":function(t,e,n){"use strict";var r,o,i=n("0bfb"),a=RegExp.prototype.exec,s=String.prototype.replace,l=a,c=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),u=void 0!==/()??/.exec("")[1];(c||u)&&(l=function(t){var e,n,r,o,l=this;return u&&(n=new RegExp("^"+l.source+"$(?!\\s)",i.call(l))),c&&(e=l.lastIndex),r=a.call(l,t),c&&r&&(l.lastIndex=l.global?r.index+r[0].length:e),u&&r&&r.length>1&&s.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=l},"53e2":function(t,e,n){var r=n("07e3"),o=n("241e"),i=n("5559")("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},"549b":function(t,e,n){"use strict";var r=n("d864"),o=n("63b6"),i=n("241e"),a=n("b0dc"),s=n("3702"),l=n("b447"),c=n("20fd"),u=n("7cd6");o(o.S+o.F*!n("4ee1")((function(t){Array.from(t)})),"Array",{from:function(t){var e,n,o,f,d=i(t),h="function"==typeof this?this:Array,p=arguments.length,g=p>1?arguments[1]:void 0,v=void 0!==g,m=0,b=u(d);if(v&&(g=r(g,p>2?arguments[2]:void 0,2)),null==b||h==Array&&s(b))for(n=new h(e=l(d.length));e>m;m++)c(n,m,v?g(d[m],m):d[m]);else for(f=b.call(d),n=new h;!(o=f.next()).done;m++)c(n,m,v?a(f,g,[o.value,m],!0):o.value);return n.length=m,n}})},"54a1":function(t,e,n){n("6c1c"),n("1654"),t.exports=n("95d5")},5537:function(t,e,n){var r=n("8378"),o=n("7726"),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n("2d00")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},5559:function(t,e,n){var r=n("dbdb")("keys"),o=n("62a0");t.exports=function(t){return r[t]||(r[t]=o(t))}},"584a":function(t,e){var n=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},"5b4e":function(t,e,n){var r=n("36c3"),o=n("b447"),i=n("0fc9");t.exports=function(t){return function(e,n,a){var s,l=r(e),c=o(l.length),u=i(a,c);if(t&&n!=n){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((t||u in l)&&l[u]===n)return t||u||0;return!t&&-1}}},"5ca1":function(t,e,n){var r=n("7726"),o=n("8378"),i=n("32e9"),a=n("2aba"),s=n("9b43"),l=function(t,e,n){var c,u,f,d,h=t&l.F,p=t&l.G,g=t&l.S,v=t&l.P,m=t&l.B,b=p?r:g?r[e]||(r[e]={}):(r[e]||{}).prototype,y=p?o:o[e]||(o[e]={}),x=y.prototype||(y.prototype={});for(c in p&&(n=e),n)f=((u=!h&&b&&void 0!==b[c])?b:n)[c],d=m&&u?s(f,r):v&&"function"==typeof f?s(Function.call,f):f,b&&a(b,c,f,t&l.U),y[c]!=f&&i(y,c,d),v&&x[c]!=f&&(x[c]=f)};r.core=o,l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,t.exports=l},"5d73":function(t,e,n){t.exports=n("469f")},"5f1b":function(t,e,n){"use strict";var r=n("23c6"),o=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var i=n.call(t,e);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,e)}},"626a":function(t,e,n){var r=n("2d95");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},"62a0":function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},"63b6":function(t,e,n){var r=n("e53d"),o=n("584a"),i=n("d864"),a=n("35e8"),s=n("07e3"),l=function(t,e,n){var c,u,f,d=t&l.F,h=t&l.G,p=t&l.S,g=t&l.P,v=t&l.B,m=t&l.W,b=h?o:o[e]||(o[e]={}),y=b.prototype,x=h?r:p?r[e]:(r[e]||{}).prototype;for(c in h&&(n=e),n)(u=!d&&x&&void 0!==x[c])&&s(b,c)||(f=u?x[c]:n[c],b[c]=h&&"function"!=typeof x[c]?n[c]:v&&u?i(f,r):m&&x[c]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):g&&"function"==typeof f?i(Function.call,f):f,g&&((b.virtual||(b.virtual={}))[c]=f,t&l.R&&y&&!y[c]&&a(y,c,f)))};l.F=1,l.G=2,l.S=4,l.P=8,l.B=16,l.W=32,l.U=64,l.R=128,t.exports=l},6762:function(t,e,n){"use strict";var r=n("5ca1"),o=n("c366")(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),n("9c6c")("includes")},6821:function(t,e,n){var r=n("626a"),o=n("be13");t.exports=function(t){return r(o(t))}},"69a8":function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},"6a99":function(t,e,n){var r=n("d3f4");t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},"6b4c":function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},"6c1c":function(t,e,n){n("c367");for(var r=n("e53d"),o=n("35e8"),i=n("481b"),a=n("5168")("toStringTag"),s="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),l=0;l<s.length;l++){var c=s[l],u=r[c],f=u&&u.prototype;f&&!f[a]&&o(f,a,c),i[c]=i.Array}},"71c1":function(t,e,n){var r=n("3a38"),o=n("25eb");t.exports=function(t){return function(e,n){var i,a,s=String(o(e)),l=r(n),c=s.length;return l<0||l>=c?t?"":void 0:(i=s.charCodeAt(l))<55296||i>56319||l+1===c||(a=s.charCodeAt(l+1))<56320||a>57343?t?s.charAt(l):i:t?s.slice(l,l+2):a-56320+(i-55296<<10)+65536}}},7726:function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},"774e":function(t,e,n){t.exports=n("d2d5")},"77f1":function(t,e,n){var r=n("4588"),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},"794b":function(t,e,n){t.exports=!n("8e60")&&!n("294c")((function(){return 7!=Object.defineProperty(n("1ec9")("div"),"a",{get:function(){return 7}}).a}))},"79aa":function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},"79e5":function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},"7cd6":function(t,e,n){var r=n("40c3"),o=n("5168")("iterator"),i=n("481b");t.exports=n("584a").getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},"7d7b":function(t,e,n){var r=n("e4ae"),o=n("7cd6");t.exports=n("584a").getIterator=function(t){var e=o(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return r(e.call(t))}},"7e90":function(t,e,n){var r=n("d9f6"),o=n("e4ae"),i=n("c3a1");t.exports=n("8e60")?Object.defineProperties:function(t,e){o(t);for(var n,a=i(e),s=a.length,l=0;s>l;)r.f(t,n=a[l++],e[n]);return t}},8378:function(t,e){var n=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},8436:function(t,e){t.exports=function(){}},"86cc":function(t,e,n){var r=n("cb7c"),o=n("c69a"),i=n("6a99"),a=Object.defineProperty;e.f=n("9e1e")?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},"8aae":function(t,e,n){n("32a6"),t.exports=n("584a").Object.keys},"8e60":function(t,e,n){t.exports=!n("294c")((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},"8f60":function(t,e,n){"use strict";var r=n("a159"),o=n("aebd"),i=n("45f2"),a={};n("35e8")(a,n("5168")("iterator"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(a,{next:o(1,n)}),i(t,e+" Iterator")}},9003:function(t,e,n){var r=n("6b4c");t.exports=Array.isArray||function(t){return"Array"==r(t)}},9138:function(t,e,n){t.exports=n("35e8")},9306:function(t,e,n){"use strict";var r=n("c3a1"),o=n("9aa9"),i=n("355d"),a=n("241e"),s=n("335c"),l=Object.assign;t.exports=!l||n("294c")((function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach((function(t){e[t]=t})),7!=l({},t)[n]||Object.keys(l({},e)).join("")!=r}))?function(t,e){for(var n=a(t),l=arguments.length,c=1,u=o.f,f=i.f;l>c;)for(var d,h=s(arguments[c++]),p=u?r(h).concat(u(h)):r(h),g=p.length,v=0;g>v;)f.call(h,d=p[v++])&&(n[d]=h[d]);return n}:l},9427:function(t,e,n){var r=n("63b6");r(r.S,"Object",{create:n("a159")})},"95d5":function(t,e,n){var r=n("40c3"),o=n("5168")("iterator"),i=n("481b");t.exports=n("584a").isIterable=function(t){var e=Object(t);return void 0!==e[o]||"@@iterator"in e||i.hasOwnProperty(r(e))}},"9aa9":function(t,e){e.f=Object.getOwnPropertySymbols},"9b43":function(t,e,n){var r=n("d8e8");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},"9c6c":function(t,e,n){var r=n("2b4c")("unscopables"),o=Array.prototype;null==o[r]&&n("32e9")(o,r,{}),t.exports=function(t){o[r][t]=!0}},"9def":function(t,e,n){var r=n("4588"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},"9e1e":function(t,e,n){t.exports=!n("79e5")((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},a159:function(t,e,n){var r=n("e4ae"),o=n("7e90"),i=n("1691"),a=n("5559")("IE_PROTO"),s=function(){},l=function(){var t,e=n("1ec9")("iframe"),r=i.length;for(e.style.display="none",n("32fc").appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),l=t.F;r--;)delete l.prototype[i[r]];return l()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=l(),void 0===e?n:o(n,e)}},a352:function(t,e){t.exports=n(2)},a3c3:function(t,e,n){var r=n("63b6");r(r.S+r.F,"Object",{assign:n("9306")})},a481:function(t,e,n){"use strict";var r=n("cb7c"),o=n("4bf8"),i=n("9def"),a=n("4588"),s=n("0390"),l=n("5f1b"),c=Math.max,u=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;n("214f")("replace",2,(function(t,e,n,p){return[function(r,o){var i=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},function(t,e){var o=p(n,t,this,e);if(o.done)return o.value;var f=r(t),d=String(this),h="function"==typeof e;h||(e=String(e));var v=f.global;if(v){var m=f.unicode;f.lastIndex=0}for(var b=[];;){var y=l(f,d);if(null===y)break;if(b.push(y),!v)break;""===String(y[0])&&(f.lastIndex=s(d,i(f.lastIndex),m))}for(var x,w="",S=0,_=0;_<b.length;_++){y=b[_];for(var O=String(y[0]),E=c(u(a(y.index),d.length),0),C=[],D=1;D<y.length;D++)C.push(void 0===(x=y[D])?x:String(x));var T=y.groups;if(h){var M=[O].concat(C,E,d);void 0!==T&&M.push(T);var I=String(e.apply(void 0,M))}else I=g(O,d,E,C,T,e);E>=S&&(w+=d.slice(S,E)+I,S=E+O.length)}return w+d.slice(S)}];function g(t,e,r,i,a,s){var l=r+t.length,c=i.length,u=h;return void 0!==a&&(a=o(a),u=d),n.call(s,u,(function(n,o){var s;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(l);case"<":s=a[o.slice(1,-1)];break;default:var u=+o;if(0===u)return n;if(u>c){var d=f(u/10);return 0===d?n:d<=c?void 0===i[d-1]?o.charAt(1):i[d-1]+o.charAt(1):n}s=i[u-1]}return void 0===s?"":s}))}}))},a4bb:function(t,e,n){t.exports=n("8aae")},a745:function(t,e,n){t.exports=n("f410")},aae3:function(t,e,n){var r=n("d3f4"),o=n("2d95"),i=n("2b4c")("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},aebd:function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},b0c5:function(t,e,n){"use strict";var r=n("520a");n("5ca1")({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},b0dc:function(t,e,n){var r=n("e4ae");t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},b447:function(t,e,n){var r=n("3a38"),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},b8e3:function(t,e){t.exports=!0},be13:function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},c366:function(t,e,n){var r=n("6821"),o=n("9def"),i=n("77f1");t.exports=function(t){return function(e,n,a){var s,l=r(e),c=o(l.length),u=i(a,c);if(t&&n!=n){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((t||u in l)&&l[u]===n)return t||u||0;return!t&&-1}}},c367:function(t,e,n){"use strict";var r=n("8436"),o=n("50ed"),i=n("481b"),a=n("36c3");t.exports=n("30f1")(Array,"Array",(function(t,e){this._t=a(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},c3a1:function(t,e,n){var r=n("e6f3"),o=n("1691");t.exports=Object.keys||function(t){return r(t,o)}},c649:function(t,e,n){"use strict";(function(t){n.d(e,"c",(function(){return f})),n.d(e,"a",(function(){return c})),n.d(e,"b",(function(){return i})),n.d(e,"d",(function(){return u}));n("a481");var r=n("4aa6"),o=n.n(r);var i="undefined"!=typeof window?window.console:t.console;var a,s,l=/-(\w)/g,c=(a=function(t){return t.replace(l,(function(t,e){return e?e.toUpperCase():""}))},s=o()(null),function(t){return s[t]||(s[t]=a(t))});function u(t){null!==t.parentElement&&t.parentElement.removeChild(t)}function f(t,e,n){var r=0===n?t.children[0]:t.children[n-1].nextSibling;t.insertBefore(e,r)}}).call(this,n("c8ba"))},c69a:function(t,e,n){t.exports=!n("9e1e")&&!n("79e5")((function(){return 7!=Object.defineProperty(n("230e")("div"),"a",{get:function(){return 7}}).a}))},c8ba:function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},c8bb:function(t,e,n){t.exports=n("54a1")},ca5a:function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},cb7c:function(t,e,n){var r=n("d3f4");t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},ce7e:function(t,e,n){var r=n("63b6"),o=n("584a"),i=n("294c");t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*i((function(){n(1)})),"Object",a)}},d2c8:function(t,e,n){var r=n("aae3"),o=n("be13");t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},d2d5:function(t,e,n){n("1654"),n("549b"),t.exports=n("584a").Array.from},d3f4:function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},d864:function(t,e,n){var r=n("79aa");t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},d8e8:function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},d9f6:function(t,e,n){var r=n("e4ae"),o=n("794b"),i=n("1bc3"),a=Object.defineProperty;e.f=n("8e60")?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},dbdb:function(t,e,n){var r=n("584a"),o=n("e53d"),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n("b8e3")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},dc62:function(t,e,n){n("9427");var r=n("584a").Object;t.exports=function(t,e){return r.create(t,e)}},e4ae:function(t,e,n){var r=n("f772");t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},e53d:function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},e6f3:function(t,e,n){var r=n("07e3"),o=n("36c3"),i=n("5b4e")(!1),a=n("5559")("IE_PROTO");t.exports=function(t,e){var n,s=o(t),l=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;e.length>l;)r(s,n=e[l++])&&(~i(c,n)||c.push(n));return c}},f410:function(t,e,n){n("1af6"),t.exports=n("584a").Array.isArray},f559:function(t,e,n){"use strict";var r=n("5ca1"),o=n("9def"),i=n("d2c8"),a="".startsWith;r(r.P+r.F*n("5147")("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},f772:function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},fa5b:function(t,e,n){t.exports=n("5537")("native-function-to-string",Function.toString)},fb15:function(t,e,n){"use strict";var r;(n.r(e),"undefined"!=typeof window)&&((r=window.document.currentScript)&&(r=r.src.match(/(.+\/)[^/]+\.js(\?.*)?$/))&&(n.p=r[1]));var o=n("5176"),i=n.n(o),a=(n("f559"),n("a4bb")),s=n.n(a),l=n("a745"),c=n.n(l);var u=n("5d73"),f=n.n(u);function d(t,e){return function(t){if(c()(t))return t}(t)||function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var a,s=f()(t);!(r=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==s.return||s.return()}finally{if(o)throw i}}return n}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}n("6762"),n("2fdb");var h=n("774e"),p=n.n(h),g=n("c8bb"),v=n.n(g);function m(t){return function(t){if(c()(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(v()(Object(t))||"[object Arguments]"===Object.prototype.toString.call(t))return p()(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var b=n("a352"),y=n.n(b),x=n("c649");function w(t,e){var n=this;this.$nextTick((function(){return n.$emit(t.toLowerCase(),e)}))}function S(t){var e=this;return function(n){null!==e.realList&&e["onDrag"+t](n),w.call(e,t,n)}}function _(t){return["transition-group","TransitionGroup"].includes(t)}function O(t,e,n){return t[n]||(e[n]?e[n]():void 0)}var E=["Start","Add","Remove","Update","End"],C=["Choose","Unchoose","Sort","Filter","Clone"],D=["Move"].concat(E,C).map((function(t){return"on"+t})),T=null,M={name:"draggable",inheritAttrs:!1,props:{options:Object,list:{type:Array,required:!1,default:null},value:{type:Array,required:!1,default:null},noTransitionOnDrag:{type:Boolean,default:!1},clone:{type:Function,default:function(t){return t}},element:{type:String,default:"div"},tag:{type:String,default:null},move:{type:Function,default:null},componentData:{type:Object,required:!1,default:null}},data:function(){return{transitionMode:!1,noneFunctionalComponentMode:!1}},render:function(t){var e=this.$slots.default;this.transitionMode=function(t){if(!t||1!==t.length)return!1;var e=d(t,1)[0].componentOptions;return!!e&&_(e.tag)}(e);var n=function(t,e,n){var r=0,o=0,i=O(e,n,"header");i&&(r=i.length,t=t?[].concat(m(i),m(t)):m(i));var a=O(e,n,"footer");return a&&(o=a.length,t=t?[].concat(m(t),m(a)):m(a)),{children:t,headerOffset:r,footerOffset:o}}(e,this.$slots,this.$scopedSlots),r=n.children,o=n.headerOffset,a=n.footerOffset;this.headerOffset=o,this.footerOffset=a;var l=function(t,e){var n=null,r=function(t,e){n=function(t,e,n){return void 0===n||((t=t||{})[e]=n),t}(n,t,e)};if(r("attrs",s()(t).filter((function(t){return"id"===t||t.startsWith("data-")})).reduce((function(e,n){return e[n]=t[n],e}),{})),!e)return n;var o=e.on,a=e.props,l=e.attrs;return r("on",o),r("props",a),i()(n.attrs,l),n}(this.$attrs,this.componentData);return t(this.getTag(),l,r)},created:function(){null!==this.list&&null!==this.value&&x.b.error("Value and list props are mutually exclusive! Please set one or another."),"div"!==this.element&&x.b.warn("Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props"),void 0!==this.options&&x.b.warn("Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props")},mounted:function(){var t=this;if(this.noneFunctionalComponentMode=this.getTag().toLowerCase()!==this.$el.nodeName.toLowerCase()&&!this.getIsFunctional(),this.noneFunctionalComponentMode&&this.transitionMode)throw new Error("Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: ".concat(this.getTag()));var e={};E.forEach((function(n){e["on"+n]=S.call(t,n)})),C.forEach((function(n){e["on"+n]=w.bind(t,n)}));var n=s()(this.$attrs).reduce((function(e,n){return e[Object(x.a)(n)]=t.$attrs[n],e}),{}),r=i()({},this.options,n,e,{onMove:function(e,n){return t.onDragMove(e,n)}});!("draggable"in r)&&(r.draggable=">*"),this._sortable=new y.a(this.rootContainer,r),this.computeIndexes()},beforeDestroy:function(){void 0!==this._sortable&&this._sortable.destroy()},computed:{rootContainer:function(){return this.transitionMode?this.$el.children[0]:this.$el},realList:function(){return this.list?this.list:this.value}},watch:{options:{handler:function(t){this.updateOptions(t)},deep:!0},$attrs:{handler:function(t){this.updateOptions(t)},deep:!0},realList:function(){this.computeIndexes()}},methods:{getIsFunctional:function(){var t=this._vnode.fnOptions;return t&&t.functional},getTag:function(){return this.tag||this.element},updateOptions:function(t){for(var e in t){var n=Object(x.a)(e);-1===D.indexOf(n)&&this._sortable.option(n,t[e])}},getChildrenNodes:function(){if(this.noneFunctionalComponentMode)return this.$children[0].$slots.default;var t=this.$slots.default;return this.transitionMode?t[0].child.$slots.default:t},computeIndexes:function(){var t=this;this.$nextTick((function(){t.visibleIndexes=function(t,e,n,r){if(!t)return[];var o=t.map((function(t){return t.elm})),i=e.length-r,a=m(e).map((function(t,e){return e>=i?o.length:o.indexOf(t)}));return n?a.filter((function(t){return-1!==t})):a}(t.getChildrenNodes(),t.rootContainer.children,t.transitionMode,t.footerOffset)}))},getUnderlyingVm:function(t){var e=function(t,e){return t.map((function(t){return t.elm})).indexOf(e)}(this.getChildrenNodes()||[],t);return-1===e?null:{index:e,element:this.realList[e]}},getUnderlyingPotencialDraggableComponent:function(t){var e=t.__vue__;return e&&e.$options&&_(e.$options._componentTag)?e.$parent:!("realList"in e)&&1===e.$children.length&&"realList"in e.$children[0]?e.$children[0]:e},emitChanges:function(t){var e=this;this.$nextTick((function(){e.$emit("change",t)}))},alterList:function(t){if(this.list)t(this.list);else{var e=m(this.value);t(e),this.$emit("input",e)}},spliceList:function(){var t=arguments,e=function(e){return e.splice.apply(e,m(t))};this.alterList(e)},updatePosition:function(t,e){var n=function(n){return n.splice(e,0,n.splice(t,1)[0])};this.alterList(n)},getRelatedContextFromMoveEvent:function(t){var e=t.to,n=t.related,r=this.getUnderlyingPotencialDraggableComponent(e);if(!r)return{component:r};var o=r.realList,a={list:o,component:r};if(e!==n&&o&&r.getUnderlyingVm){var s=r.getUnderlyingVm(n);if(s)return i()(s,a)}return a},getVmIndex:function(t){var e=this.visibleIndexes,n=e.length;return t>n-1?n:e[t]},getComponent:function(){return this.$slots.default[0].componentInstance},resetTransitionData:function(t){if(this.noTransitionOnDrag&&this.transitionMode){this.getChildrenNodes()[t].data=null;var e=this.getComponent();e.children=[],e.kept=void 0}},onDragStart:function(t){this.context=this.getUnderlyingVm(t.item),t.item._underlying_vm_=this.clone(this.context.element),T=t.item},onDragAdd:function(t){var e=t.item._underlying_vm_;if(void 0!==e){Object(x.d)(t.item);var n=this.getVmIndex(t.newIndex);this.spliceList(n,0,e),this.computeIndexes();var r={element:e,newIndex:n};this.emitChanges({added:r})}},onDragRemove:function(t){if(Object(x.c)(this.rootContainer,t.item,t.oldIndex),"clone"!==t.pullMode){var e=this.context.index;this.spliceList(e,1);var n={element:this.context.element,oldIndex:e};this.resetTransitionData(e),this.emitChanges({removed:n})}else Object(x.d)(t.clone)},onDragUpdate:function(t){Object(x.d)(t.item),Object(x.c)(t.from,t.item,t.oldIndex);var e=this.context.index,n=this.getVmIndex(t.newIndex);this.updatePosition(e,n);var r={element:this.context.element,oldIndex:e,newIndex:n};this.emitChanges({moved:r})},updateProperty:function(t,e){t.hasOwnProperty(e)&&(t[e]+=this.headerOffset)},computeFutureIndex:function(t,e){if(!t.element)return 0;var n=m(e.to.children).filter((function(t){return"none"!==t.style.display})),r=n.indexOf(e.related),o=t.component.getVmIndex(r);return-1!==n.indexOf(T)||!e.willInsertAfter?o:o+1},onDragMove:function(t,e){var n=this.move;if(!n||!this.realList)return!0;var r=this.getRelatedContextFromMoveEvent(t),o=this.context,a=this.computeFutureIndex(r,t);return i()(o,{futureIndex:a}),n(i()({},t,{relatedContext:r,draggedContext:o}),e)},onDragEnd:function(){this.computeIndexes(),T=null}}};"undefined"!=typeof window&&"Vue"in window&&window.Vue.component("draggable",M);var I=M;e.default=I}}).default},function(t,e,n){"use strict";
/**!
 * Sortable 1.10.2
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(){return(i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable})))),r.forEach((function(e){o(t,e,n[e])}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}function l(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}n.r(e),n.d(e,"MultiDrag",(function(){return ye})),n.d(e,"Sortable",(function(){return $t})),n.d(e,"Swap",(function(){return le}));function c(t){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(t)}var u=c(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),f=c(/Edge/i),d=c(/firefox/i),h=c(/safari/i)&&!c(/chrome/i)&&!c(/android/i),p=c(/iP(ad|od|hone)/i),g=c(/chrome/i)&&c(/android/i),v={capture:!1,passive:!1};function m(t,e,n){t.addEventListener(e,n,!u&&v)}function b(t,e,n){t.removeEventListener(e,n,!u&&v)}function y(t,e){if(e){if(">"===e[0]&&(e=e.substring(1)),t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e)}catch(t){return!1}return!1}}function x(t){return t.host&&t!==document&&t.host.nodeType?t.host:t.parentNode}function w(t,e,n,r){if(t){n=n||document;do{if(null!=e&&(">"===e[0]?t.parentNode===n&&y(t,e):y(t,e))||r&&t===n)return t;if(t===n)break}while(t=x(t))}return null}var S,_=/\s+/g;function O(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var r=(" "+t.className+" ").replace(_," ").replace(" "+e+" "," ");t.className=(r+(n?" "+e:"")).replace(_," ")}}function E(t,e,n){var r=t&&t.style;if(r){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in r||-1!==e.indexOf("webkit")||(e="-webkit-"+e),r[e]=n+("string"==typeof n?"":"px")}}function C(t,e){var n="";if("string"==typeof t)n=t;else do{var r=E(t,"transform");r&&"none"!==r&&(n=r+" "+n)}while(!e&&(t=t.parentNode));var o=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return o&&new o(n)}function D(t,e,n){if(t){var r=t.getElementsByTagName(e),o=0,i=r.length;if(n)for(;o<i;o++)n(r[o],o);return r}return[]}function T(){var t=document.scrollingElement;return t||document.documentElement}function M(t,e,n,r,o){if(t.getBoundingClientRect||t===window){var i,a,s,l,c,f,d;if(t!==window&&t!==T()?(a=(i=t.getBoundingClientRect()).top,s=i.left,l=i.bottom,c=i.right,f=i.height,d=i.width):(a=0,s=0,l=window.innerHeight,c=window.innerWidth,f=window.innerHeight,d=window.innerWidth),(e||n)&&t!==window&&(o=o||t.parentNode,!u))do{if(o&&o.getBoundingClientRect&&("none"!==E(o,"transform")||n&&"static"!==E(o,"position"))){var h=o.getBoundingClientRect();a-=h.top+parseInt(E(o,"border-top-width")),s-=h.left+parseInt(E(o,"border-left-width")),l=a+i.height,c=s+i.width;break}}while(o=o.parentNode);if(r&&t!==window){var p=C(o||t),g=p&&p.a,v=p&&p.d;p&&(l=(a/=v)+(f/=v),c=(s/=g)+(d/=g))}return{top:a,left:s,bottom:l,right:c,width:d,height:f}}}function I(t,e,n){for(var r=N(t,!0),o=M(t)[e];r;){var i=M(r)[n];if(!("top"===n||"left"===n?o>=i:o<=i))return r;if(r===T())break;r=N(r,!1)}return!1}function A(t,e,n){for(var r=0,o=0,i=t.children;o<i.length;){if("none"!==i[o].style.display&&i[o]!==$t.ghost&&i[o]!==$t.dragged&&w(i[o],n.draggable,t,!1)){if(r===e)return i[o];r++}o++}return null}function P(t,e){for(var n=t.lastElementChild;n&&(n===$t.ghost||"none"===E(n,"display")||e&&!y(n,e));)n=n.previousElementSibling;return n||null}function j(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t=t.previousElementSibling;)"TEMPLATE"===t.nodeName.toUpperCase()||t===$t.clone||e&&!y(t,e)||n++;return n}function R(t){var e=0,n=0,r=T();if(t)do{var o=C(t),i=o.a,a=o.d;e+=t.scrollLeft*i,n+=t.scrollTop*a}while(t!==r&&(t=t.parentNode));return[e,n]}function N(t,e){if(!t||!t.getBoundingClientRect)return T();var n=t,r=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var o=E(n);if(n.clientWidth<n.scrollWidth&&("auto"==o.overflowX||"scroll"==o.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==o.overflowY||"scroll"==o.overflowY)){if(!n.getBoundingClientRect||n===document.body)return T();if(r||e)return n;r=!0}}}while(n=n.parentNode);return T()}function k(t,e){return Math.round(t.top)===Math.round(e.top)&&Math.round(t.left)===Math.round(e.left)&&Math.round(t.height)===Math.round(e.height)&&Math.round(t.width)===Math.round(e.width)}function z(t,e){return function(){if(!S){var n=arguments,r=this;1===n.length?t.call(r,n[0]):t.apply(r,n),S=setTimeout((function(){S=void 0}),e)}}}function F(t,e,n){t.scrollLeft+=e,t.scrollTop+=n}function L(t){var e=window.Polymer,n=window.jQuery||window.Zepto;return e&&e.dom?e.dom(t).cloneNode(!0):n?n(t).clone(!0)[0]:t.cloneNode(!0)}function $(t,e){E(t,"position","absolute"),E(t,"top",e.top),E(t,"left",e.left),E(t,"width",e.width),E(t,"height",e.height)}function B(t){E(t,"position",""),E(t,"top",""),E(t,"left",""),E(t,"width",""),E(t,"height","")}var H="Sortable"+(new Date).getTime();function K(){var t,e=[];return{captureAnimationState:function(){(e=[],this.options.animation)&&[].slice.call(this.el.children).forEach((function(t){if("none"!==E(t,"display")&&t!==$t.ghost){e.push({target:t,rect:M(t)});var n=a({},e[e.length-1].rect);if(t.thisAnimationDuration){var r=C(t,!0);r&&(n.top-=r.f,n.left-=r.e)}t.fromRect=n}}))},addAnimationState:function(t){e.push(t)},removeAnimationState:function(t){e.splice(function(t,e){for(var n in t)if(t.hasOwnProperty(n))for(var r in e)if(e.hasOwnProperty(r)&&e[r]===t[n][r])return Number(n);return-1}(e,{target:t}),1)},animateAll:function(n){var r=this;if(!this.options.animation)return clearTimeout(t),void("function"==typeof n&&n());var o=!1,i=0;e.forEach((function(t){var e=0,n=t.target,a=n.fromRect,s=M(n),l=n.prevFromRect,c=n.prevToRect,u=t.rect,f=C(n,!0);f&&(s.top-=f.f,s.left-=f.e),n.toRect=s,n.thisAnimationDuration&&k(l,s)&&!k(a,s)&&(u.top-s.top)/(u.left-s.left)==(a.top-s.top)/(a.left-s.left)&&(e=function(t,e,n,r){return Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))/Math.sqrt(Math.pow(e.top-n.top,2)+Math.pow(e.left-n.left,2))*r.animation}(u,l,c,r.options)),k(s,a)||(n.prevFromRect=a,n.prevToRect=s,e||(e=r.options.animation),r.animate(n,u,s,e)),e&&(o=!0,i=Math.max(i,e),clearTimeout(n.animationResetTimer),n.animationResetTimer=setTimeout((function(){n.animationTime=0,n.prevFromRect=null,n.fromRect=null,n.prevToRect=null,n.thisAnimationDuration=null}),e),n.thisAnimationDuration=e)})),clearTimeout(t),o?t=setTimeout((function(){"function"==typeof n&&n()}),i):"function"==typeof n&&n(),e=[]},animate:function(t,e,n,r){if(r){E(t,"transition",""),E(t,"transform","");var o=C(this.el),i=o&&o.a,a=o&&o.d,s=(e.left-n.left)/(i||1),l=(e.top-n.top)/(a||1);t.animatingX=!!s,t.animatingY=!!l,E(t,"transform","translate3d("+s+"px,"+l+"px,0)"),function(t){t.offsetWidth}(t),E(t,"transition","transform "+r+"ms"+(this.options.easing?" "+this.options.easing:"")),E(t,"transform","translate3d(0,0,0)"),"number"==typeof t.animated&&clearTimeout(t.animated),t.animated=setTimeout((function(){E(t,"transition",""),E(t,"transform",""),t.animated=!1,t.animatingX=!1,t.animatingY=!1}),r)}}}}var X=[],Y={initializeByDefault:!0},V={mount:function(t){for(var e in Y)Y.hasOwnProperty(e)&&!(e in t)&&(t[e]=Y[e]);X.push(t)},pluginEvent:function(t,e,n){var r=this;this.eventCanceled=!1,n.cancel=function(){r.eventCanceled=!0};var o=t+"Global";X.forEach((function(r){e[r.pluginName]&&(e[r.pluginName][o]&&e[r.pluginName][o](a({sortable:e},n)),e.options[r.pluginName]&&e[r.pluginName][t]&&e[r.pluginName][t](a({sortable:e},n)))}))},initializePlugins:function(t,e,n,r){for(var o in X.forEach((function(r){var o=r.pluginName;if(t.options[o]||r.initializeByDefault){var a=new r(t,e,t.options);a.sortable=t,a.options=t.options,t[o]=a,i(n,a.defaults)}})),t.options)if(t.options.hasOwnProperty(o)){var a=this.modifyOption(t,o,t.options[o]);void 0!==a&&(t.options[o]=a)}},getEventProperties:function(t,e){var n={};return X.forEach((function(r){"function"==typeof r.eventProperties&&i(n,r.eventProperties.call(e[r.pluginName],t))})),n},modifyOption:function(t,e,n){var r;return X.forEach((function(o){t[o.pluginName]&&o.optionListeners&&"function"==typeof o.optionListeners[e]&&(r=o.optionListeners[e].call(t[o.pluginName],n))})),r}};function q(t){var e=t.sortable,n=t.rootEl,r=t.name,o=t.targetEl,i=t.cloneEl,s=t.toEl,l=t.fromEl,c=t.oldIndex,d=t.newIndex,h=t.oldDraggableIndex,p=t.newDraggableIndex,g=t.originalEvent,v=t.putSortable,m=t.extraEventProperties;if(e=e||n&&n[H]){var b,y=e.options,x="on"+r.charAt(0).toUpperCase()+r.substr(1);!window.CustomEvent||u||f?(b=document.createEvent("Event")).initEvent(r,!0,!0):b=new CustomEvent(r,{bubbles:!0,cancelable:!0}),b.to=s||n,b.from=l||n,b.item=o||n,b.clone=i,b.oldIndex=c,b.newIndex=d,b.oldDraggableIndex=h,b.newDraggableIndex=p,b.originalEvent=g,b.pullMode=v?v.lastPutMode:void 0;var w=a({},m,V.getEventProperties(r,e));for(var S in w)b[S]=w[S];n&&n.dispatchEvent(b),y[x]&&y[x].call(e,b)}}var W=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.evt,o=s(n,["evt"]);V.pluginEvent.bind($t)(t,e,a({dragEl:G,parentEl:J,ghostEl:Z,rootEl:Q,nextEl:tt,lastDownEl:et,cloneEl:nt,cloneHidden:rt,dragStarted:vt,putSortable:ct,activeSortable:$t.active,originalEvent:r,oldIndex:ot,oldDraggableIndex:at,newIndex:it,newDraggableIndex:st,hideGhostForTarget:kt,unhideGhostForTarget:zt,cloneNowHidden:function(){rt=!0},cloneNowShown:function(){rt=!1},dispatchSortableEvent:function(t){U({sortable:e,name:t,originalEvent:r})}},o))};function U(t){q(a({putSortable:ct,cloneEl:nt,targetEl:G,rootEl:Q,oldIndex:ot,oldDraggableIndex:at,newIndex:it,newDraggableIndex:st},t))}var G,J,Z,Q,tt,et,nt,rt,ot,it,at,st,lt,ct,ut,ft,dt,ht,pt,gt,vt,mt,bt,yt,xt,wt=!1,St=!1,_t=[],Ot=!1,Et=!1,Ct=[],Dt=!1,Tt=[],Mt="undefined"!=typeof document,It=p,At=f||u?"cssFloat":"float",Pt=Mt&&!g&&!p&&"draggable"in document.createElement("div"),jt=function(){if(Mt){if(u)return!1;var t=document.createElement("x");return t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}}(),Rt=function(t,e){var n=E(t),r=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),o=A(t,0,e),i=A(t,1,e),a=o&&E(o),s=i&&E(i),l=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+M(o).width,c=s&&parseInt(s.marginLeft)+parseInt(s.marginRight)+M(i).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(o&&a.float&&"none"!==a.float){var u="left"===a.float?"left":"right";return!i||"both"!==s.clear&&s.clear!==u?"horizontal":"vertical"}return o&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||l>=r&&"none"===n[At]||i&&"none"===n[At]&&l+c>r)?"vertical":"horizontal"},Nt=function(t){function e(t,n){return function(r,o,i,a){var s=r.options.group.name&&o.options.group.name&&r.options.group.name===o.options.group.name;if(null==t&&(n||s))return!0;if(null==t||!1===t)return!1;if(n&&"clone"===t)return t;if("function"==typeof t)return e(t(r,o,i,a),n)(r,o,i,a);var l=(n?r:o).options.group.name;return!0===t||"string"==typeof t&&t===l||t.join&&t.indexOf(l)>-1}}var n={},o=t.group;o&&"object"==r(o)||(o={name:o}),n.name=o.name,n.checkPull=e(o.pull,!0),n.checkPut=e(o.put),n.revertClone=o.revertClone,t.group=n},kt=function(){!jt&&Z&&E(Z,"display","none")},zt=function(){!jt&&Z&&E(Z,"display","")};Mt&&document.addEventListener("click",(function(t){if(St)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),t.stopImmediatePropagation&&t.stopImmediatePropagation(),St=!1,!1}),!0);var Ft=function(t){if(G){t=t.touches?t.touches[0]:t;var e=(o=t.clientX,i=t.clientY,_t.some((function(t){if(!P(t)){var e=M(t),n=t[H].options.emptyInsertThreshold,r=o>=e.left-n&&o<=e.right+n,s=i>=e.top-n&&i<=e.bottom+n;return n&&r&&s?a=t:void 0}})),a);if(e){var n={};for(var r in t)t.hasOwnProperty(r)&&(n[r]=t[r]);n.target=n.rootEl=e,n.preventDefault=void 0,n.stopPropagation=void 0,e[H]._onDragOver(n)}}var o,i,a},Lt=function(t){G&&G.parentNode[H]._isOutsideThisEl(t.target)};function $t(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));this.el=t,this.options=e=i({},e),t[H]=this;var n={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(t.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Rt(t,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==$t.supportPointer&&"PointerEvent"in window,emptyInsertThreshold:5};for(var r in V.initializePlugins(this,t,n),n)!(r in e)&&(e[r]=n[r]);for(var o in Nt(e),this)"_"===o.charAt(0)&&"function"==typeof this[o]&&(this[o]=this[o].bind(this));this.nativeDraggable=!e.forceFallback&&Pt,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?m(t,"pointerdown",this._onTapStart):(m(t,"mousedown",this._onTapStart),m(t,"touchstart",this._onTapStart)),this.nativeDraggable&&(m(t,"dragover",this),m(t,"dragenter",this)),_t.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),i(this,K())}function Bt(t,e,n,r,o,i,a,s){var l,c,d=t[H],h=d.options.onMove;return!window.CustomEvent||u||f?(l=document.createEvent("Event")).initEvent("move",!0,!0):l=new CustomEvent("move",{bubbles:!0,cancelable:!0}),l.to=e,l.from=t,l.dragged=n,l.draggedRect=r,l.related=o||e,l.relatedRect=i||M(e),l.willInsertAfter=s,l.originalEvent=a,t.dispatchEvent(l),h&&(c=h.call(d,l,a)),c}function Ht(t){t.draggable=!1}function Kt(){Dt=!1}function Xt(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,r=0;n--;)r+=e.charCodeAt(n);return r.toString(36)}function Yt(t){return setTimeout(t,0)}function Vt(t){return clearTimeout(t)}$t.prototype={constructor:$t,_isOutsideThisEl:function(t){this.el.contains(t)||t===this.el||(mt=null)},_getDirection:function(t,e){return"function"==typeof this.options.direction?this.options.direction.call(this,t,e,G):this.options.direction},_onTapStart:function(t){if(t.cancelable){var e=this,n=this.el,r=this.options,o=r.preventOnFilter,i=t.type,a=t.touches&&t.touches[0]||t.pointerType&&"touch"===t.pointerType&&t,s=(a||t).target,l=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||s,c=r.filter;if(function(t){Tt.length=0;var e=t.getElementsByTagName("input"),n=e.length;for(;n--;){var r=e[n];r.checked&&Tt.push(r)}}(n),!G&&!(/mousedown|pointerdown/.test(i)&&0!==t.button||r.disabled||l.isContentEditable||(s=w(s,r.draggable,n,!1))&&s.animated||et===s)){if(ot=j(s),at=j(s,r.draggable),"function"==typeof c){if(c.call(this,t,s,this))return U({sortable:e,rootEl:l,name:"filter",targetEl:s,toEl:n,fromEl:n}),W("filter",e,{evt:t}),void(o&&t.cancelable&&t.preventDefault())}else if(c&&(c=c.split(",").some((function(r){if(r=w(l,r.trim(),n,!1))return U({sortable:e,rootEl:r,name:"filter",targetEl:s,fromEl:n,toEl:n}),W("filter",e,{evt:t}),!0}))))return void(o&&t.cancelable&&t.preventDefault());r.handle&&!w(l,r.handle,n,!1)||this._prepareDragStart(t,a,s)}}},_prepareDragStart:function(t,e,n){var r,o=this,i=o.el,a=o.options,s=i.ownerDocument;if(n&&!G&&n.parentNode===i){var l=M(n);if(Q=i,J=(G=n).parentNode,tt=G.nextSibling,et=n,lt=a.group,$t.dragged=G,ut={target:G,clientX:(e||t).clientX,clientY:(e||t).clientY},pt=ut.clientX-l.left,gt=ut.clientY-l.top,this._lastX=(e||t).clientX,this._lastY=(e||t).clientY,G.style["will-change"]="all",r=function(){W("delayEnded",o,{evt:t}),$t.eventCanceled?o._onDrop():(o._disableDelayedDragEvents(),!d&&o.nativeDraggable&&(G.draggable=!0),o._triggerDragStart(t,e),U({sortable:o,name:"choose",originalEvent:t}),O(G,a.chosenClass,!0))},a.ignore.split(",").forEach((function(t){D(G,t.trim(),Ht)})),m(s,"dragover",Ft),m(s,"mousemove",Ft),m(s,"touchmove",Ft),m(s,"mouseup",o._onDrop),m(s,"touchend",o._onDrop),m(s,"touchcancel",o._onDrop),d&&this.nativeDraggable&&(this.options.touchStartThreshold=4,G.draggable=!0),W("delayStart",this,{evt:t}),!a.delay||a.delayOnTouchOnly&&!e||this.nativeDraggable&&(f||u))r();else{if($t.eventCanceled)return void this._onDrop();m(s,"mouseup",o._disableDelayedDrag),m(s,"touchend",o._disableDelayedDrag),m(s,"touchcancel",o._disableDelayedDrag),m(s,"mousemove",o._delayedDragTouchMoveHandler),m(s,"touchmove",o._delayedDragTouchMoveHandler),a.supportPointer&&m(s,"pointermove",o._delayedDragTouchMoveHandler),o._dragStartTimer=setTimeout(r,a.delay)}}},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;Math.max(Math.abs(e.clientX-this._lastX),Math.abs(e.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){G&&Ht(G),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;b(t,"mouseup",this._disableDelayedDrag),b(t,"touchend",this._disableDelayedDrag),b(t,"touchcancel",this._disableDelayedDrag),b(t,"mousemove",this._delayedDragTouchMoveHandler),b(t,"touchmove",this._delayedDragTouchMoveHandler),b(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,e){e=e||"touch"==t.pointerType&&t,!this.nativeDraggable||e?this.options.supportPointer?m(document,"pointermove",this._onTouchMove):m(document,e?"touchmove":"mousemove",this._onTouchMove):(m(G,"dragend",this),m(Q,"dragstart",this._onDragStart));try{document.selection?Yt((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(t,e){if(wt=!1,Q&&G){W("dragStarted",this,{evt:e}),this.nativeDraggable&&m(document,"dragover",Lt);var n=this.options;!t&&O(G,n.dragClass,!1),O(G,n.ghostClass,!0),$t.active=this,t&&this._appendGhost(),U({sortable:this,name:"start",originalEvent:e})}else this._nulling()},_emulateDragOver:function(){if(ft){this._lastX=ft.clientX,this._lastY=ft.clientY,kt();for(var t=document.elementFromPoint(ft.clientX,ft.clientY),e=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(ft.clientX,ft.clientY))!==e;)e=t;if(G.parentNode[H]._isOutsideThisEl(t),e)do{if(e[H]){if(e[H]._onDragOver({clientX:ft.clientX,clientY:ft.clientY,target:t,rootEl:e})&&!this.options.dragoverBubble)break}t=e}while(e=e.parentNode);zt()}},_onTouchMove:function(t){if(ut){var e=this.options,n=e.fallbackTolerance,r=e.fallbackOffset,o=t.touches?t.touches[0]:t,i=Z&&C(Z,!0),a=Z&&i&&i.a,s=Z&&i&&i.d,l=It&&xt&&R(xt),c=(o.clientX-ut.clientX+r.x)/(a||1)+(l?l[0]-Ct[0]:0)/(a||1),u=(o.clientY-ut.clientY+r.y)/(s||1)+(l?l[1]-Ct[1]:0)/(s||1);if(!$t.active&&!wt){if(n&&Math.max(Math.abs(o.clientX-this._lastX),Math.abs(o.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(Z){i?(i.e+=c-(dt||0),i.f+=u-(ht||0)):i={a:1,b:0,c:0,d:1,e:c,f:u};var f="matrix(".concat(i.a,",").concat(i.b,",").concat(i.c,",").concat(i.d,",").concat(i.e,",").concat(i.f,")");E(Z,"webkitTransform",f),E(Z,"mozTransform",f),E(Z,"msTransform",f),E(Z,"transform",f),dt=c,ht=u,ft=o}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!Z){var t=this.options.fallbackOnBody?document.body:Q,e=M(G,!0,It,!0,t),n=this.options;if(It){for(xt=t;"static"===E(xt,"position")&&"none"===E(xt,"transform")&&xt!==document;)xt=xt.parentNode;xt!==document.body&&xt!==document.documentElement?(xt===document&&(xt=T()),e.top+=xt.scrollTop,e.left+=xt.scrollLeft):xt=T(),Ct=R(xt)}O(Z=G.cloneNode(!0),n.ghostClass,!1),O(Z,n.fallbackClass,!0),O(Z,n.dragClass,!0),E(Z,"transition",""),E(Z,"transform",""),E(Z,"box-sizing","border-box"),E(Z,"margin",0),E(Z,"top",e.top),E(Z,"left",e.left),E(Z,"width",e.width),E(Z,"height",e.height),E(Z,"opacity","0.8"),E(Z,"position",It?"absolute":"fixed"),E(Z,"zIndex","100000"),E(Z,"pointerEvents","none"),$t.ghost=Z,t.appendChild(Z),E(Z,"transform-origin",pt/parseInt(Z.style.width)*100+"% "+gt/parseInt(Z.style.height)*100+"%")}},_onDragStart:function(t,e){var n=this,r=t.dataTransfer,o=n.options;W("dragStart",this,{evt:t}),$t.eventCanceled?this._onDrop():(W("setupClone",this),$t.eventCanceled||((nt=L(G)).draggable=!1,nt.style["will-change"]="",this._hideClone(),O(nt,this.options.chosenClass,!1),$t.clone=nt),n.cloneId=Yt((function(){W("clone",n),$t.eventCanceled||(n.options.removeCloneOnHide||Q.insertBefore(nt,G),n._hideClone(),U({sortable:n,name:"clone"}))})),!e&&O(G,o.dragClass,!0),e?(St=!0,n._loopId=setInterval(n._emulateDragOver,50)):(b(document,"mouseup",n._onDrop),b(document,"touchend",n._onDrop),b(document,"touchcancel",n._onDrop),r&&(r.effectAllowed="move",o.setData&&o.setData.call(n,r,G)),m(document,"drop",n),E(G,"transform","translateZ(0)")),wt=!0,n._dragStartId=Yt(n._dragStarted.bind(n,e,t)),m(document,"selectstart",n),vt=!0,h&&E(document.body,"user-select","none"))},_onDragOver:function(t){var e,n,r,o,i=this.el,s=t.target,l=this.options,c=l.group,u=$t.active,f=lt===c,d=l.sort,h=ct||u,p=this,g=!1;if(!Dt){if(void 0!==t.preventDefault&&t.cancelable&&t.preventDefault(),s=w(s,l.draggable,i,!0),k("dragOver"),$t.eventCanceled)return g;if(G.contains(t.target)||s.animated&&s.animatingX&&s.animatingY||p._ignoreWhileAnimating===s)return L(!1);if(St=!1,u&&!l.disabled&&(f?d||(r=!Q.contains(G)):ct===this||(this.lastPutMode=lt.checkPull(this,u,G,t))&&c.checkPut(this,u,G,t))){if(o="vertical"===this._getDirection(t,s),e=M(G),k("dragOverValid"),$t.eventCanceled)return g;if(r)return J=Q,z(),this._hideClone(),k("revert"),$t.eventCanceled||(tt?Q.insertBefore(G,tt):Q.appendChild(G)),L(!0);var v=P(i,l.draggable);if(!v||function(t,e,n){var r=M(P(n.el,n.options.draggable));return e?t.clientX>r.right+10||t.clientX<=r.right&&t.clientY>r.bottom&&t.clientX>=r.left:t.clientX>r.right&&t.clientY>r.top||t.clientX<=r.right&&t.clientY>r.bottom+10}(t,o,this)&&!v.animated){if(v===G)return L(!1);if(v&&i===t.target&&(s=v),s&&(n=M(s)),!1!==Bt(Q,i,G,e,s,n,t,!!s))return z(),i.appendChild(G),J=i,$(),L(!0)}else if(s.parentNode===i){n=M(s);var m,b,y,x=G.parentNode!==i,S=!function(t,e,n){var r=n?t.left:t.top,o=n?t.right:t.bottom,i=n?t.width:t.height,a=n?e.left:e.top,s=n?e.right:e.bottom,l=n?e.width:e.height;return r===a||o===s||r+i/2===a+l/2}(G.animated&&G.toRect||e,s.animated&&s.toRect||n,o),_=o?"top":"left",C=I(s,"top","top")||I(G,"top","top"),D=C?C.scrollTop:void 0;if(mt!==s&&(b=n[_],Ot=!1,Et=!S&&l.invertSwap||x),0!==(m=function(t,e,n,r,o,i,a,s){var l=r?t.clientY:t.clientX,c=r?n.height:n.width,u=r?n.top:n.left,f=r?n.bottom:n.right,d=!1;if(!a)if(s&&yt<c*o){if(!Ot&&(1===bt?l>u+c*i/2:l<f-c*i/2)&&(Ot=!0),Ot)d=!0;else if(1===bt?l<u+yt:l>f-yt)return-bt}else if(l>u+c*(1-o)/2&&l<f-c*(1-o)/2)return function(t){return j(G)<j(t)?1:-1}(e);if((d=d||a)&&(l<u+c*i/2||l>f-c*i/2))return l>u+c/2?1:-1;return 0}(t,s,n,o,S?1:l.swapThreshold,null==l.invertedSwapThreshold?l.swapThreshold:l.invertedSwapThreshold,Et,mt===s))){var T=j(G);do{T-=m,y=J.children[T]}while(y&&("none"===E(y,"display")||y===Z))}if(0===m||y===s)return L(!1);mt=s,bt=m;var A=s.nextElementSibling,R=!1,N=Bt(Q,i,G,e,s,n,t,R=1===m);if(!1!==N)return 1!==N&&-1!==N||(R=1===N),Dt=!0,setTimeout(Kt,30),z(),R&&!A?i.appendChild(G):s.parentNode.insertBefore(G,R?A:s),C&&F(C,0,D-C.scrollTop),J=G.parentNode,void 0===b||Et||(yt=Math.abs(b-M(s)[_])),$(),L(!0)}if(i.contains(G))return L(!1)}return!1}function k(l,c){W(l,p,a({evt:t,isOwner:f,axis:o?"vertical":"horizontal",revert:r,dragRect:e,targetRect:n,canSort:d,fromSortable:h,target:s,completed:L,onMove:function(n,r){return Bt(Q,i,G,e,n,M(n),t,r)},changed:$},c))}function z(){k("dragOverAnimationCapture"),p.captureAnimationState(),p!==h&&h.captureAnimationState()}function L(e){return k("dragOverCompleted",{insertion:e}),e&&(f?u._hideClone():u._showClone(p),p!==h&&(O(G,ct?ct.options.ghostClass:u.options.ghostClass,!1),O(G,l.ghostClass,!0)),ct!==p&&p!==$t.active?ct=p:p===$t.active&&ct&&(ct=null),h===p&&(p._ignoreWhileAnimating=s),p.animateAll((function(){k("dragOverAnimationComplete"),p._ignoreWhileAnimating=null})),p!==h&&(h.animateAll(),h._ignoreWhileAnimating=null)),(s===G&&!G.animated||s===i&&!s.animated)&&(mt=null),l.dragoverBubble||t.rootEl||s===document||(G.parentNode[H]._isOutsideThisEl(t.target),!e&&Ft(t)),!l.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),g=!0}function $(){it=j(G),st=j(G,l.draggable),U({sortable:p,name:"change",toEl:i,newIndex:it,newDraggableIndex:st,originalEvent:t})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){b(document,"mousemove",this._onTouchMove),b(document,"touchmove",this._onTouchMove),b(document,"pointermove",this._onTouchMove),b(document,"dragover",Ft),b(document,"mousemove",Ft),b(document,"touchmove",Ft)},_offUpEvents:function(){var t=this.el.ownerDocument;b(t,"mouseup",this._onDrop),b(t,"touchend",this._onDrop),b(t,"pointerup",this._onDrop),b(t,"touchcancel",this._onDrop),b(document,"selectstart",this)},_onDrop:function(t){var e=this.el,n=this.options;it=j(G),st=j(G,n.draggable),W("drop",this,{evt:t}),J=G&&G.parentNode,it=j(G),st=j(G,n.draggable),$t.eventCanceled||(wt=!1,Et=!1,Ot=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Vt(this.cloneId),Vt(this._dragStartId),this.nativeDraggable&&(b(document,"drop",this),b(e,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),h&&E(document.body,"user-select",""),E(G,"transform",""),t&&(vt&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),Z&&Z.parentNode&&Z.parentNode.removeChild(Z),(Q===J||ct&&"clone"!==ct.lastPutMode)&&nt&&nt.parentNode&&nt.parentNode.removeChild(nt),G&&(this.nativeDraggable&&b(G,"dragend",this),Ht(G),G.style["will-change"]="",vt&&!wt&&O(G,ct?ct.options.ghostClass:this.options.ghostClass,!1),O(G,this.options.chosenClass,!1),U({sortable:this,name:"unchoose",toEl:J,newIndex:null,newDraggableIndex:null,originalEvent:t}),Q!==J?(it>=0&&(U({rootEl:J,name:"add",toEl:J,fromEl:Q,originalEvent:t}),U({sortable:this,name:"remove",toEl:J,originalEvent:t}),U({rootEl:J,name:"sort",toEl:J,fromEl:Q,originalEvent:t}),U({sortable:this,name:"sort",toEl:J,originalEvent:t})),ct&&ct.save()):it!==ot&&it>=0&&(U({sortable:this,name:"update",toEl:J,originalEvent:t}),U({sortable:this,name:"sort",toEl:J,originalEvent:t})),$t.active&&(null!=it&&-1!==it||(it=ot,st=at),U({sortable:this,name:"end",toEl:J,originalEvent:t}),this.save())))),this._nulling()},_nulling:function(){W("nulling",this),Q=G=J=Z=tt=nt=et=rt=ut=ft=vt=it=st=ot=at=mt=bt=ct=lt=$t.dragged=$t.ghost=$t.clone=$t.active=null,Tt.forEach((function(t){t.checked=!0})),Tt.length=dt=ht=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":G&&(this._onDragOver(t),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move");t.cancelable&&t.preventDefault()}(t));break;case"selectstart":t.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,r=0,o=n.length,i=this.options;r<o;r++)w(t=n[r],i.draggable,this.el,!1)&&e.push(t.getAttribute(i.dataIdAttr)||Xt(t));return e},sort:function(t){var e={},n=this.el;this.toArray().forEach((function(t,r){var o=n.children[r];w(o,this.options.draggable,n,!1)&&(e[t]=o)}),this),t.forEach((function(t){e[t]&&(n.removeChild(e[t]),n.appendChild(e[t]))}))},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return w(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];var r=V.modifyOption(this,t,e);n[t]=void 0!==r?r:e,"group"===t&&Nt(n)},destroy:function(){W("destroy",this);var t=this.el;t[H]=null,b(t,"mousedown",this._onTapStart),b(t,"touchstart",this._onTapStart),b(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(b(t,"dragover",this),b(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),(function(t){t.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),_t.splice(_t.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!rt){if(W("hideClone",this),$t.eventCanceled)return;E(nt,"display","none"),this.options.removeCloneOnHide&&nt.parentNode&&nt.parentNode.removeChild(nt),rt=!0}},_showClone:function(t){if("clone"===t.lastPutMode){if(rt){if(W("showClone",this),$t.eventCanceled)return;Q.contains(G)&&!this.options.group.revertClone?Q.insertBefore(nt,G):tt?Q.insertBefore(nt,tt):Q.appendChild(nt),this.options.group.revertClone&&this.animate(G,nt),E(nt,"display",""),rt=!1}}else this._hideClone()}},Mt&&m(document,"touchmove",(function(t){($t.active||wt)&&t.cancelable&&t.preventDefault()})),$t.utils={on:m,off:b,css:E,find:D,is:function(t,e){return!!w(t,e,t,!1)},extend:function(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},throttle:z,closest:w,toggleClass:O,clone:L,index:j,nextTick:Yt,cancelNextTick:Vt,detectDirection:Rt,getChild:A},$t.get=function(t){return t[H]},$t.mount=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e[0].constructor===Array&&(e=e[0]),e.forEach((function(t){if(!t.prototype||!t.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));t.utils&&($t.utils=a({},$t.utils,t.utils)),V.mount(t)}))},$t.create=function(t,e){return new $t(t,e)},$t.version="1.10.2";var qt,Wt,Ut,Gt,Jt,Zt,Qt=[],te=!1;function ee(){Qt.forEach((function(t){clearInterval(t.pid)})),Qt=[]}function ne(){clearInterval(Zt)}var re,oe=z((function(t,e,n,r){if(e.scroll){var o,i=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,s=e.scrollSensitivity,l=e.scrollSpeed,c=T(),u=!1;Wt!==n&&(Wt=n,ee(),qt=e.scroll,o=e.scrollFn,!0===qt&&(qt=N(n,!0)));var f=0,d=qt;do{var h=d,p=M(h),g=p.top,v=p.bottom,m=p.left,b=p.right,y=p.width,x=p.height,w=void 0,S=void 0,_=h.scrollWidth,O=h.scrollHeight,C=E(h),D=h.scrollLeft,I=h.scrollTop;h===c?(w=y<_&&("auto"===C.overflowX||"scroll"===C.overflowX||"visible"===C.overflowX),S=x<O&&("auto"===C.overflowY||"scroll"===C.overflowY||"visible"===C.overflowY)):(w=y<_&&("auto"===C.overflowX||"scroll"===C.overflowX),S=x<O&&("auto"===C.overflowY||"scroll"===C.overflowY));var A=w&&(Math.abs(b-i)<=s&&D+y<_)-(Math.abs(m-i)<=s&&!!D),P=S&&(Math.abs(v-a)<=s&&I+x<O)-(Math.abs(g-a)<=s&&!!I);if(!Qt[f])for(var j=0;j<=f;j++)Qt[j]||(Qt[j]={});Qt[f].vx==A&&Qt[f].vy==P&&Qt[f].el===h||(Qt[f].el=h,Qt[f].vx=A,Qt[f].vy=P,clearInterval(Qt[f].pid),0==A&&0==P||(u=!0,Qt[f].pid=setInterval(function(){r&&0===this.layer&&$t.active._onTouchMove(Jt);var e=Qt[this.layer].vy?Qt[this.layer].vy*l:0,n=Qt[this.layer].vx?Qt[this.layer].vx*l:0;"function"==typeof o&&"continue"!==o.call($t.dragged.parentNode[H],n,e,t,Jt,Qt[this.layer].el)||F(Qt[this.layer].el,n,e)}.bind({layer:f}),24))),f++}while(e.bubbleScroll&&d!==c&&(d=N(d,!1)));te=u}}),30),ie=function(t){var e=t.originalEvent,n=t.putSortable,r=t.dragEl,o=t.activeSortable,i=t.dispatchSortableEvent,a=t.hideGhostForTarget,s=t.unhideGhostForTarget;if(e){var l=n||o;a();var c=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,u=document.elementFromPoint(c.clientX,c.clientY);s(),l&&!l.el.contains(u)&&(i("spill"),this.onSpill({dragEl:r,putSortable:n}))}};function ae(){}function se(){}function le(){function t(){this.defaults={swapClass:"sortable-swap-highlight"}}return t.prototype={dragStart:function(t){var e=t.dragEl;re=e},dragOverValid:function(t){var e=t.completed,n=t.target,r=t.onMove,o=t.activeSortable,i=t.changed,a=t.cancel;if(o.options.swap){var s=this.sortable.el,l=this.options;if(n&&n!==s){var c=re;!1!==r(n)?(O(n,l.swapClass,!0),re=n):re=null,c&&c!==re&&O(c,l.swapClass,!1)}i(),e(!0),a()}},drop:function(t){var e=t.activeSortable,n=t.putSortable,r=t.dragEl,o=n||this.sortable,i=this.options;re&&O(re,i.swapClass,!1),re&&(i.swap||n&&n.options.swap)&&r!==re&&(o.captureAnimationState(),o!==e&&e.captureAnimationState(),function(t,e){var n,r,o=t.parentNode,i=e.parentNode;if(!o||!i||o.isEqualNode(e)||i.isEqualNode(t))return;n=j(t),r=j(e),o.isEqualNode(i)&&n<r&&r++;o.insertBefore(e,o.children[n]),i.insertBefore(t,i.children[r])}(r,re),o.animateAll(),o!==e&&e.animateAll())},nulling:function(){re=null}},i(t,{pluginName:"swap",eventProperties:function(){return{swapItem:re}}})}ae.prototype={startIndex:null,dragStart:function(t){var e=t.oldDraggableIndex;this.startIndex=e},onSpill:function(t){var e=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var r=A(this.sortable.el,this.startIndex,this.options);r?this.sortable.el.insertBefore(e,r):this.sortable.el.appendChild(e),this.sortable.animateAll(),n&&n.animateAll()},drop:ie},i(ae,{pluginName:"revertOnSpill"}),se.prototype={onSpill:function(t){var e=t.dragEl,n=t.putSortable||this.sortable;n.captureAnimationState(),e.parentNode&&e.parentNode.removeChild(e),n.animateAll()},drop:ie},i(se,{pluginName:"removeOnSpill"});var ce,ue,fe,de,he,pe=[],ge=[],ve=!1,me=!1,be=!1;function ye(){function t(t){for(var e in this)"_"===e.charAt(0)&&"function"==typeof this[e]&&(this[e]=this[e].bind(this));t.options.supportPointer?m(document,"pointerup",this._deselectMultiDrag):(m(document,"mouseup",this._deselectMultiDrag),m(document,"touchend",this._deselectMultiDrag)),m(document,"keydown",this._checkKeyDown),m(document,"keyup",this._checkKeyUp),this.defaults={selectedClass:"sortable-selected",multiDragKey:null,setData:function(e,n){var r="";pe.length&&ue===t?pe.forEach((function(t,e){r+=(e?", ":"")+t.textContent})):r=n.textContent,e.setData("Text",r)}}}return t.prototype={multiDragKeyDown:!1,isMultiDrag:!1,delayStartGlobal:function(t){var e=t.dragEl;fe=e},delayEnded:function(){this.isMultiDrag=~pe.indexOf(fe)},setupClone:function(t){var e=t.sortable,n=t.cancel;if(this.isMultiDrag){for(var r=0;r<pe.length;r++)ge.push(L(pe[r])),ge[r].sortableIndex=pe[r].sortableIndex,ge[r].draggable=!1,ge[r].style["will-change"]="",O(ge[r],this.options.selectedClass,!1),pe[r]===fe&&O(ge[r],this.options.chosenClass,!1);e._hideClone(),n()}},clone:function(t){var e=t.sortable,n=t.rootEl,r=t.dispatchSortableEvent,o=t.cancel;this.isMultiDrag&&(this.options.removeCloneOnHide||pe.length&&ue===e&&(xe(!0,n),r("clone"),o()))},showClone:function(t){var e=t.cloneNowShown,n=t.rootEl,r=t.cancel;this.isMultiDrag&&(xe(!1,n),ge.forEach((function(t){E(t,"display","")})),e(),he=!1,r())},hideClone:function(t){var e=this,n=(t.sortable,t.cloneNowHidden),r=t.cancel;this.isMultiDrag&&(ge.forEach((function(t){E(t,"display","none"),e.options.removeCloneOnHide&&t.parentNode&&t.parentNode.removeChild(t)})),n(),he=!0,r())},dragStartGlobal:function(t){t.sortable;!this.isMultiDrag&&ue&&ue.multiDrag._deselectMultiDrag(),pe.forEach((function(t){t.sortableIndex=j(t)})),pe=pe.sort((function(t,e){return t.sortableIndex-e.sortableIndex})),be=!0},dragStarted:function(t){var e=this,n=t.sortable;if(this.isMultiDrag){if(this.options.sort&&(n.captureAnimationState(),this.options.animation)){pe.forEach((function(t){t!==fe&&E(t,"position","absolute")}));var r=M(fe,!1,!0,!0);pe.forEach((function(t){t!==fe&&$(t,r)})),me=!0,ve=!0}n.animateAll((function(){me=!1,ve=!1,e.options.animation&&pe.forEach((function(t){B(t)})),e.options.sort&&we()}))}},dragOver:function(t){var e=t.target,n=t.completed,r=t.cancel;me&&~pe.indexOf(e)&&(n(!1),r())},revert:function(t){var e=t.fromSortable,n=t.rootEl,r=t.sortable,o=t.dragRect;pe.length>1&&(pe.forEach((function(t){r.addAnimationState({target:t,rect:me?M(t):o}),B(t),t.fromRect=o,e.removeAnimationState(t)})),me=!1,function(t,e){pe.forEach((function(n,r){var o=e.children[n.sortableIndex+(t?Number(r):0)];o?e.insertBefore(n,o):e.appendChild(n)}))}(!this.options.removeCloneOnHide,n))},dragOverCompleted:function(t){var e=t.sortable,n=t.isOwner,r=t.insertion,o=t.activeSortable,i=t.parentEl,a=t.putSortable,s=this.options;if(r){if(n&&o._hideClone(),ve=!1,s.animation&&pe.length>1&&(me||!n&&!o.options.sort&&!a)){var l=M(fe,!1,!0,!0);pe.forEach((function(t){t!==fe&&($(t,l),i.appendChild(t))})),me=!0}if(!n)if(me||we(),pe.length>1){var c=he;o._showClone(e),o.options.animation&&!he&&c&&ge.forEach((function(t){o.addAnimationState({target:t,rect:de}),t.fromRect=de,t.thisAnimationDuration=null}))}else o._showClone(e)}},dragOverAnimationCapture:function(t){var e=t.dragRect,n=t.isOwner,r=t.activeSortable;if(pe.forEach((function(t){t.thisAnimationDuration=null})),r.options.animation&&!n&&r.multiDrag.isMultiDrag){de=i({},e);var o=C(fe,!0);de.top-=o.f,de.left-=o.e}},dragOverAnimationComplete:function(){me&&(me=!1,we())},drop:function(t){var e=t.originalEvent,n=t.rootEl,r=t.parentEl,o=t.sortable,i=t.dispatchSortableEvent,a=t.oldIndex,s=t.putSortable,l=s||this.sortable;if(e){var c=this.options,u=r.children;if(!be)if(c.multiDragKey&&!this.multiDragKeyDown&&this._deselectMultiDrag(),O(fe,c.selectedClass,!~pe.indexOf(fe)),~pe.indexOf(fe))pe.splice(pe.indexOf(fe),1),ce=null,q({sortable:o,rootEl:n,name:"deselect",targetEl:fe,originalEvt:e});else{if(pe.push(fe),q({sortable:o,rootEl:n,name:"select",targetEl:fe,originalEvt:e}),e.shiftKey&&ce&&o.el.contains(ce)){var f,d,h=j(ce),p=j(fe);if(~h&&~p&&h!==p)for(p>h?(d=h,f=p):(d=p,f=h+1);d<f;d++)~pe.indexOf(u[d])||(O(u[d],c.selectedClass,!0),pe.push(u[d]),q({sortable:o,rootEl:n,name:"select",targetEl:u[d],originalEvt:e}))}else ce=fe;ue=l}if(be&&this.isMultiDrag){if((r[H].options.sort||r!==n)&&pe.length>1){var g=M(fe),v=j(fe,":not(."+this.options.selectedClass+")");if(!ve&&c.animation&&(fe.thisAnimationDuration=null),l.captureAnimationState(),!ve&&(c.animation&&(fe.fromRect=g,pe.forEach((function(t){if(t.thisAnimationDuration=null,t!==fe){var e=me?M(t):g;t.fromRect=e,l.addAnimationState({target:t,rect:e})}}))),we(),pe.forEach((function(t){u[v]?r.insertBefore(t,u[v]):r.appendChild(t),v++})),a===j(fe))){var m=!1;pe.forEach((function(t){t.sortableIndex===j(t)||(m=!0)})),m&&i("update")}pe.forEach((function(t){B(t)})),l.animateAll()}ue=l}(n===r||s&&"clone"!==s.lastPutMode)&&ge.forEach((function(t){t.parentNode&&t.parentNode.removeChild(t)}))}},nullingGlobal:function(){this.isMultiDrag=be=!1,ge.length=0},destroyGlobal:function(){this._deselectMultiDrag(),b(document,"pointerup",this._deselectMultiDrag),b(document,"mouseup",this._deselectMultiDrag),b(document,"touchend",this._deselectMultiDrag),b(document,"keydown",this._checkKeyDown),b(document,"keyup",this._checkKeyUp)},_deselectMultiDrag:function(t){if(!(void 0!==be&&be||ue!==this.sortable||t&&w(t.target,this.options.draggable,this.sortable.el,!1)||t&&0!==t.button))for(;pe.length;){var e=pe[0];O(e,this.options.selectedClass,!1),pe.shift(),q({sortable:this.sortable,rootEl:this.sortable.el,name:"deselect",targetEl:e,originalEvt:t})}},_checkKeyDown:function(t){t.key===this.options.multiDragKey&&(this.multiDragKeyDown=!0)},_checkKeyUp:function(t){t.key===this.options.multiDragKey&&(this.multiDragKeyDown=!1)}},i(t,{pluginName:"multiDrag",utils:{select:function(t){var e=t.parentNode[H];e&&e.options.multiDrag&&!~pe.indexOf(t)&&(ue&&ue!==e&&(ue.multiDrag._deselectMultiDrag(),ue=e),O(t,e.options.selectedClass,!0),pe.push(t))},deselect:function(t){var e=t.parentNode[H],n=pe.indexOf(t);e&&e.options.multiDrag&&~n&&(O(t,e.options.selectedClass,!1),pe.splice(n,1))}},eventProperties:function(){var t=this,e=[],n=[];return pe.forEach((function(r){var o;e.push({multiDragElement:r,index:r.sortableIndex}),o=me&&r!==fe?-1:me?j(r,":not(."+t.options.selectedClass+")"):j(r),n.push({multiDragElement:r,index:o})})),{items:l(pe),clones:[].concat(ge),oldIndicies:e,newIndicies:n}},optionListeners:{multiDragKey:function(t){return"ctrl"===(t=t.toLowerCase())?t="Control":t.length>1&&(t=t.charAt(0).toUpperCase()+t.substr(1)),t}}})}function xe(t,e){ge.forEach((function(n,r){var o=e.children[n.sortableIndex+(t?Number(r):0)];o?e.insertBefore(n,o):e.appendChild(n)}))}function we(){pe.forEach((function(t){t!==fe&&t.parentNode&&t.parentNode.removeChild(t)}))}$t.mount(new function(){function t(){for(var t in this.defaults={scroll:!0,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this))}return t.prototype={dragStarted:function(t){var e=t.originalEvent;this.sortable.nativeDraggable?m(document,"dragover",this._handleAutoScroll):this.options.supportPointer?m(document,"pointermove",this._handleFallbackAutoScroll):e.touches?m(document,"touchmove",this._handleFallbackAutoScroll):m(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var e=t.originalEvent;this.options.dragOverBubble||e.rootEl||this._handleAutoScroll(e)},drop:function(){this.sortable.nativeDraggable?b(document,"dragover",this._handleAutoScroll):(b(document,"pointermove",this._handleFallbackAutoScroll),b(document,"touchmove",this._handleFallbackAutoScroll),b(document,"mousemove",this._handleFallbackAutoScroll)),ne(),ee(),clearTimeout(S),S=void 0},nulling:function(){Jt=Wt=qt=te=Zt=Ut=Gt=null,Qt.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,e){var n=this,r=(t.touches?t.touches[0]:t).clientX,o=(t.touches?t.touches[0]:t).clientY,i=document.elementFromPoint(r,o);if(Jt=t,e||f||u||h){oe(t,this.options,i,e);var a=N(i,!0);!te||Zt&&r===Ut&&o===Gt||(Zt&&ne(),Zt=setInterval((function(){var i=N(document.elementFromPoint(r,o),!0);i!==a&&(a=i,ee()),oe(t,n.options,i,e)}),10),Ut=r,Gt=o)}else{if(!this.options.bubbleScroll||N(i,!0)===T())return void ee();oe(t,this.options,N(i,!1),!1)}}},i(t,{pluginName:"scroll",initializeByDefault:!0})}),$t.mount(se,ae),e.default=$t},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r);
/**
  * vue-class-component v7.2.3
  * (c) 2015-present Evan You
  * @license MIT
  */
function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function l(){return"undefined"!=typeof Reflect&&Reflect.defineMetadata&&Reflect.getOwnMetadataKeys}function c(t,e){u(t,e),Object.getOwnPropertyNames(e.prototype).forEach((function(n){u(t.prototype,e.prototype,n)})),Object.getOwnPropertyNames(e).forEach((function(n){u(t,e,n)}))}function u(t,e,n){(n?Reflect.getOwnMetadataKeys(e,n):Reflect.getOwnMetadataKeys(e)).forEach((function(r){var o=n?Reflect.getOwnMetadata(r,e,n):Reflect.getOwnMetadata(r,e);n?Reflect.defineMetadata(r,o,t,n):Reflect.defineMetadata(r,o,t)}))}var f={__proto__:[]}instanceof Array;function d(t){return function(e,n,r){var o="function"==typeof e?e:e.constructor;o.__decorators__||(o.__decorators__=[]),"number"!=typeof r&&(r=void 0),o.__decorators__.push((function(e){return t(e,n,r)}))}}function h(t,e){var n=e.prototype._init;e.prototype._init=function(){var e=this,n=Object.getOwnPropertyNames(t);if(t.$options.props)for(var r in t.$options.props)t.hasOwnProperty(r)||n.push(r);n.forEach((function(n){"_"!==n.charAt(0)&&Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){t[n]=e},configurable:!0})}))};var r=new e;e.prototype._init=n;var o={};return Object.keys(r).forEach((function(t){void 0!==r[t]&&(o[t]=r[t])})),o}var p=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured","serverPrefetch"];function g(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e.name=e.name||t._componentTag||t.name;var n=t.prototype;Object.getOwnPropertyNames(n).forEach((function(t){if("constructor"!==t)if(p.indexOf(t)>-1)e[t]=n[t];else{var r=Object.getOwnPropertyDescriptor(n,t);void 0!==r.value?"function"==typeof r.value?(e.methods||(e.methods={}))[t]=r.value:(e.mixins||(e.mixins=[])).push({data:function(){return a({},t,r.value)}}):(r.get||r.set)&&((e.computed||(e.computed={}))[t]={get:r.get,set:r.set})}})),(e.mixins||(e.mixins=[])).push({data:function(){return h(this,t)}});var r=t.__decorators__;r&&(r.forEach((function(t){return t(e)})),delete t.__decorators__);var i=Object.getPrototypeOf(t.prototype),s=i instanceof o.a?i.constructor:o.a,u=s.extend(e);return m(u,t,s),l()&&c(u,t),u}var v={prototype:!0,arguments:!0,callee:!0,caller:!0};function m(t,e,n){Object.getOwnPropertyNames(e).forEach((function(r){if(!v[r]){var o=Object.getOwnPropertyDescriptor(t,r);if(!o||o.configurable){var a,s,l=Object.getOwnPropertyDescriptor(e,r);if(!f){if("cid"===r)return;var c=Object.getOwnPropertyDescriptor(n,r);if(a=l.value,s=i(a),null!=a&&("object"===s||"function"===s)&&c&&c.value===l.value)return}0,Object.defineProperty(t,r,l)}}}))}function b(t){return"function"==typeof t?g(t):function(e){return g(e,t)}}b.registerHooks=function(t){p.push.apply(p,s(t))};var y=b;var x="undefined"!=typeof Reflect&&void 0!==Reflect.getMetadata;function w(t,e,n){if(x&&!Array.isArray(t)&&"function"!=typeof t&&void 0===t.type){var r=Reflect.getMetadata("design:type",e,n);r!==Object&&(t.type=r)}}function S(t){return void 0===t&&(t={}),function(e,n){w(t,e,n),d((function(e,n){(e.props||(e.props={}))[n]=t}))(e,n)}}var _=n(1),O=n.n(_);const E="FRONT",C="BEHIND",D="INIT",T="FIXED",M="DYNAMIC";class I{constructor(t,e){this.init(t,e)}init(t,e){this.param=t,this.updateHook=e,this.sizes=new Map,this.firstRangeTotalSize=0,this.firstRangeAverageSize=0,this.lastCalcIndex=0,this.fixedSizeValue=0,this.calcType=D,this.offset=0,this.direction="",this.range=Object.create(null),this.param&&this.checkRange(0,t.keeps-1)}destroy(){this.init(null,null)}getRange(){const t=Object.create(null);return t.start=this.range.start,t.end=this.range.end,t.padFront=this.range.padFront,t.padBehind=this.range.padBehind,t}isBehind(){return this.direction===C}isFront(){return this.direction===E}getOffset(t){return this.getIndexOffset(t)}updateParam(t,e){this.param&&t in this.param&&(this.param[t]=e)}saveSize(t,e){this.sizes.set(t,e),this.calcType===D?(this.fixedSizeValue=e,this.calcType=T):this.calcType===T&&this.fixedSizeValue!==e&&(this.calcType=M,delete this.fixedSizeValue),this.sizes.size<=this.param.keeps?(this.firstRangeTotalSize=this.firstRangeTotalSize+e,this.firstRangeAverageSize=Math.round(this.firstRangeTotalSize/this.sizes.size)):delete this.firstRangeTotalSize}handleDataSourcesChange(){let t=this.range.start;this.isFront()?t-=2:this.isBehind()&&(t+=2),t=Math.max(t,0),this.updateRange(this.range.start,this.getEndByStart(t))}handleSlotSizeChange(){this.handleDataSourcesChange()}handleScroll(t){this.direction=t<this.offset?E:C,this.offset=t,this.direction===E?this.handleFront():this.direction===C&&this.handleBehind()}handleFront(){const t=this.getScrollOvers();if(t>this.range.start)return;const e=Math.max(t-this.param.buffer,0);this.checkRange(e,this.getEndByStart(e))}handleBehind(){const t=this.getScrollOvers();t<this.range.start+this.param.buffer||this.checkRange(t,this.getEndByStart(t))}getScrollOvers(){const t=this.offset-this.param.slotHeaderSize;if(t<=0)return 0;if(this.isFixedType())return Math.floor(t/this.fixedSizeValue);let e=0,n=0,r=0,o=this.param.uniqueIds.length;for(;e<=o;){if(n=e+Math.floor((o-e)/2),r=this.getIndexOffset(n),r===t)return n;r<t?e=n+1:r>t&&(o=n-1)}return e>0?--e:0}getIndexOffset(t){if(!t)return 0;let e=0,n=0;for(let r=0;r<t;r++)n=this.sizes.get(this.param.uniqueIds[r]),e+=n||this.getEstimateSize();return this.lastCalcIndex=Math.max(this.lastCalcIndex,t-1),this.lastCalcIndex=Math.min(this.lastCalcIndex,this.getLastIndex()),e}isFixedType(){return this.calcType===T}getLastIndex(){return this.param.uniqueIds.length-1}checkRange(t,e){const n=this.param.keeps;this.param.uniqueIds.length<=n?(t=0,e=this.getLastIndex()):e-t<n-1&&(t=e-n+1),this.range.start!==t&&this.updateRange(t,e)}updateRange(t,e){this.range.start=t,this.range.end=e,this.range.padFront=this.getPadFront(),this.range.padBehind=this.getPadBehind(),this.updateHook(this.getRange())}getEndByStart(t){const e=t+this.param.keeps-1;return Math.min(e,this.getLastIndex())}getPadFront(){return this.isFixedType()?this.fixedSizeValue*this.range.start:this.getIndexOffset(this.range.start)}getPadBehind(){const t=this.range.end,e=this.getLastIndex();return this.isFixedType()?(e-t)*this.fixedSizeValue:this.lastCalcIndex===e?this.getIndexOffset(e)-this.getIndexOffset(t):(e-t)*this.getEstimateSize()}getEstimateSize(){return this.firstRangeAverageSize||this.param.size}}const A={size:{type:Number},keeps:{type:Number,require:!0},dataKey:{type:String,require:!0},dataSources:{type:Array,require:!0},dataComponent:{type:Object,require:!0},extraProps:{type:Object},rootTag:{type:String,default:"div"},wrapTag:{type:String,default:"div"},wrapClass:{type:String,default:""},direction:{type:String,default:"vertical"},upperThreshold:{type:Number,default:0},lowerThreshold:{type:Number,default:0},start:{type:Number,default:0},offset:{type:Number,default:0},itemTag:{type:String,default:"div"},itemClass:{type:String,default:""},headerTag:{type:String,default:"div"},headerClass:{type:String,default:""},footerTag:{type:String,default:"div"},footerClass:{type:String,default:""},disabled:{type:Boolean,default:!1}},P={event:{type:String},tag:{type:String},horizontal:{type:Boolean},source:{type:Object},component:{type:Object},uniqueKey:{type:String},extraProps:{type:Object}},j={event:{type:String},uniqueKey:{type:String},tag:{type:String},horizontal:{type:Boolean}},R={created(){this.hasInitial=!1,this.shapeKey=this.horizontal?"offsetWidth":"offsetHeight"},mounted(){this.dispatchSizeChange(),"undefined"!=typeof ResizeObserver&&(this.resizeObserver=new ResizeObserver(()=>{this.hasInitial?this.dispatchSizeChange():this.hasInitial=!0}),this.resizeObserver.observe(this.$el))},beforeDestroy(){this.resizeObserver&&(this.resizeObserver.disconnect(),this.resizeObserver=null)},methods:{getCurrentSize(){return this.$el?this.$el[this.shapeKey]:0},dispatchSizeChange(){this.$parent.$emit(this.event,this.uniqueKey,this.getCurrentSize(),this.hasInitial)}}},N=o.a.component("virtual-list-item",{mixins:[R],props:P,render(t){return t(this.tag,{role:"item"},[t(this.component,{props:{...this.extraProps,source:this.source}})])}}),k=o.a.component("virtual-list-slot",{mixins:[R],props:j,render(t){return t(this.tag,{attrs:{role:this.uniqueKey}},this.$slots.default)}}),z="item_resize",F="slot_resize",L="header",$="footer";var B,H=o.a.component("virtual-list",{props:A,data:()=>({range:null}),watch:{dataSources(t,e){t.length!==e.length&&(this.virtual.updateParam("uniqueIds",this.getUniqueIdFromDataSources()),this.virtual.handleDataSourcesChange())}},created(){this.isHorizontal="horizontal"===this.direction,this.directionKey=this.isHorizontal?"scrollLeft":"scrollTop",this.virtual=new I({size:this.size,slotHeaderSize:0,slotFooterSize:0,keeps:this.keeps,buffer:Math.round(this.keeps/3),uniqueIds:this.getUniqueIdFromDataSources()},this.onRangeChanged),this.range=this.virtual.getRange(),this.$on(z,this.onItemResized),(this.$slots.header||this.$slots.footer)&&this.$on(F,this.onSlotResized)},beforeDestroy(){this.virtual.destroy()},mounted(){this.start?this.setScrollOffset(this.virtual.getOffset(this.start)):this.offset&&this.setScrollOffset(this.offset)},methods:{onItemResized(t,e){this.virtual.saveSize(t,e)},onSlotResized(t,e,n){t===L?this.virtual.updateParam("slotHeaderSize",e):t===$&&this.virtual.updateParam("slotFooterSize",e),n&&this.virtual.handleSlotSizeChange()},onRangeChanged(t){this.range=t},onScroll(t){const{root:e}=this.$refs;if(!e)return;const n=e[this.directionKey];this.virtual.handleScroll(n),this.emitEvent(n,t)},getUniqueIdFromDataSources(){return this.dataSources.map(t=>t[this.dataKey])},setScrollOffset(t){const{root:e}=this.$refs;e&&(e[this.directionKey]=t||0)},emitEvent(t,e){const{root:n}=this.$refs,r=this.virtual.getRange(),o=this.virtual.isFront(),i=this.virtual.isBehind(),a=n[this.isHorizontal?"clientWidth":"clientHeight"],s=n[this.isHorizontal?"scrollWidth":"scrollHeight"];o&&this.dataSources.length&&t-this.upperThreshold<=0?this.$emit("totop",e,r):i&&t+a+this.lowerThreshold>=s?this.$emit("tobottom",e,r):this.$emit("scroll",e,r)},getRenderSlots(t){const e=[],n=this.disabled?0:this.range.start,r=this.disabled?this.dataSources.length-1:this.range.end;for(let o=n;o<=r;o++){const n=this.dataSources[o];n?e.push(t(N,{class:this.itemClass,props:{tag:this.itemTag,event:z,horizontal:this.isHorizontal,uniqueKey:n[this.dataKey],source:n,extraProps:this.extraProps,component:this.dataComponent}})):console.warn(`[virtual-list]: cannot get the index ${o} from data-sources.`)}return e}},render(t){const{header:e,footer:n}=this.$slots,r=this.disabled?0:this.isHorizontal?`0px ${this.range.padBehind}px 0px ${this.range.padFront}px`:`${this.range.padFront}px 0px ${this.range.padBehind}px`;return t(this.rootTag,{ref:"root",on:{"&scroll":this.onScroll}},[e?t(k,{class:this.headerClass,props:{tag:this.headerTag,event:F,uniqueKey:L}},e):null,t(this.wrapTag,{class:this.wrapClass,attrs:{role:"group"},style:{padding:r}},this.getRenderSlots(t)),n?t(k,{class:this.footerClass,props:{tag:this.footerTag,event:F,uniqueKey:$}},n):null])}}),K=(B=function(t,e){return(B=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}B(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),X=function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var s=t.length-1;s>=0;s--)(o=t[s])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a},Y=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),o=0;for(e=0;e<n;e++)for(var i=arguments[e],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r},V=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return K(e,t),e.prototype.created=function(){!function(t,e,n){var r=t.options.methods.getRenderSlots;function o(t,e){var r=e.range.start,o=t.moved,i=o.oldIndex,a=o.newIndex,s=Y(n.value);s.splice(r+a,0,s.splice(r+i,1)[0]),this.$emit("input",s)}t.options.methods.getRenderSlots=function(t){var i=this,a=this,s=r.call(a,t);return[t(e,{props:{value:n.value},on:{change:function(t){"moved"in t&&o.call(i,t,a)}}},s)]}}(this.virtualListCtor,this.draggableCtor,this)},e.prototype.render=function(t){var e=this,n=e.keeps,r=e.dataKey,o=e.dataSources,i=e.dataComponent,a=e.size;return t(this.virtualListCtor,{props:{keeps:n,dataKey:r,dataSources:o,dataComponent:i,size:a},on:{input:this.$emit.bind(this,"input")}})},X([S({default:function(){return O.a}})],e.prototype,"draggableCtor",void 0),X([S({default:function(){return H}})],e.prototype,"virtualListCtor",void 0),X([S()],e.prototype,"keeps",void 0),X([S()],e.prototype,"dataKey",void 0),X([S()],e.prototype,"dataSources",void 0),X([S()],e.prototype,"dataComponent",void 0),X([S()],e.prototype,"size",void 0),X([S()],e.prototype,"value",void 0),e=X([y],e)}(o.a);e.default=V}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9EcmFnZ2FibGVWaXJ0dWFsTGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9EcmFnZ2FibGVWaXJ0dWFsTGlzdC9leHRlcm5hbCBcIlZ1ZVwiIiwid2VicGFjazovL0RyYWdnYWJsZVZpcnR1YWxMaXN0Ly4vbm9kZV9tb2R1bGVzL3Z1ZWRyYWdnYWJsZS9kaXN0L3Z1ZWRyYWdnYWJsZS5jb21tb24uanMiLCJ3ZWJwYWNrOi8vRHJhZ2dhYmxlVmlydHVhbExpc3QvLi9ub2RlX21vZHVsZXMvc29ydGFibGVqcy9tb2R1bGFyL3NvcnRhYmxlLmVzbS5qcyIsIndlYnBhY2s6Ly9EcmFnZ2FibGVWaXJ0dWFsTGlzdC8uL25vZGVfbW9kdWxlcy92dWUtY2xhc3MtY29tcG9uZW50L2Rpc3QvdnVlLWNsYXNzLWNvbXBvbmVudC5lc20uanMiLCJ3ZWJwYWNrOi8vRHJhZ2dhYmxlVmlydHVhbExpc3QvLi9ub2RlX21vZHVsZXMvdnVlLXByb3BlcnR5LWRlY29yYXRvci9saWIvdnVlLXByb3BlcnR5LWRlY29yYXRvci5qcyIsIndlYnBhY2s6Ly9EcmFnZ2FibGVWaXJ0dWFsTGlzdC8uL25vZGVfbW9kdWxlcy92dWUtdmlydHVhbC1zY3JvbGwtbGlzdC9zcmMvdmlydHVhbC5qcyIsIndlYnBhY2s6Ly9EcmFnZ2FibGVWaXJ0dWFsTGlzdC8uL25vZGVfbW9kdWxlcy92dWUtdmlydHVhbC1zY3JvbGwtbGlzdC9zcmMvcHJvcHMuanMiLCJ3ZWJwYWNrOi8vRHJhZ2dhYmxlVmlydHVhbExpc3QvLi9ub2RlX21vZHVsZXMvdnVlLXZpcnR1YWwtc2Nyb2xsLWxpc3Qvc3JjL2l0ZW0uanMiLCJ3ZWJwYWNrOi8vRHJhZ2dhYmxlVmlydHVhbExpc3QvLi9ub2RlX21vZHVsZXMvdnVlLXZpcnR1YWwtc2Nyb2xsLWxpc3Qvc3JjL2luZGV4LmpzIiwid2VicGFjazovL0RyYWdnYWJsZVZpcnR1YWxMaXN0Ly4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiVnVlIiwidG9JbnRlZ2VyIiwiZGVmaW5lZCIsIlRPX1NUUklORyIsInRoYXQiLCJwb3MiLCJhIiwiYiIsIlN0cmluZyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJzbGljZSIsImF0IiwiUyIsImluZGV4IiwidW5pY29kZSIsIml0IiwiYW5PYmplY3QiLCJ0aGlzIiwicmVzdWx0IiwiZ2xvYmFsIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsIm1heCIsIk1hdGgiLCJtaW4iLCIkYXQiLCJpdGVyYXRlZCIsIl90IiwiX2kiLCJwb2ludCIsIk8iLCJkb25lIiwic3BsaXQiLCIkZXhwb3J0IiwiaXNBcnJheSIsImlzT2JqZWN0IiwiZm4iLCJ2YWwiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJUeXBlRXJyb3IiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsIiRkZWZpbmVQcm9wZXJ0eSIsImNyZWF0ZURlc2MiLCJmIiwicmVkZWZpbmUiLCJoaWRlIiwiZmFpbHMiLCJ3a3MiLCJyZWdleHBFeGVjIiwiU1BFQ0lFUyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJleGVjIiwiZ3JvdXBzIiwicmVwbGFjZSIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsImFwcGx5IiwiYXJndW1lbnRzIiwiS0VZIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsImNvbnN0cnVjdG9yIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwiUmVnRXhwIiwic3RyaW5nIiwiYXJnIiwiY29mIiwiVEFHIiwiQVJHIiwiVCIsIkIiLCJlIiwidHJ5R2V0IiwiY2FsbGVlIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIkZ1bmN0aW9uIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiY29udGV4dCIsIlAiLCJGIiwiaW5jbHVkZXMiLCJzZWFyY2hTdHJpbmciLCJpbmRleE9mIiwiTElCUkFSWSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsIklURVJBVE9SIiwiQlVHR1kiLCJrZXlzIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJwcm90byIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsInRvT2JqZWN0IiwiJGtleXMiLCJkUCIsImRvY3VtZW50RWxlbWVudCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiSU9iamVjdCIsIkFycmF5UHJvdG8iLCJBcnJheSIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiZGVmIiwidGFnIiwic3RhdCIsImNvbmZpZ3VyYWJsZSIsImJpdG1hcCIsIndyaXRhYmxlIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJmcm9tIiwic2tpcENsb3NpbmciLCJhcnIiLCJpdGVyIiwiTUFUQ0giLCJhc3NpZ24iLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwibGFzdEluZGV4IiwicmVDb3B5IiwibWF0Y2giLCJzb3VyY2UiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiY3R4IiwiaXNBcnJheUl0ZXIiLCJ0b0xlbmd0aCIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlckZuIiwiYXJyYXlMaWtlIiwic3RlcCIsIml0ZXJhdG9yIiwiQyIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJjb3JlIiwicHVzaCIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJzaGFyZWQiLCJfX2UiLCJ0b0lPYmplY3QiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJ0eXBlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiSVNfQklORCIsInRhcmdldCIsImV4cFByb3RvIiwiVSIsIlciLCJSIiwiY2xhc3NvZiIsImJ1aWx0aW5FeGVjIiwiaWQiLCJweCIsInJhbmRvbSIsImNvbmNhdCIsIklTX1dSQVAiLCJ2aXJ0dWFsIiwiJGluY2x1ZGVzIiwiVE9fU1RSSU5HX1RBRyIsIkRPTUl0ZXJhYmxlcyIsIkNvbGxlY3Rpb24iLCJ3aW5kb3ciLCJzZWxmIiwiX19nIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJnZXRJdGVyYXRvciIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiUHJvcGVydGllcyIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJBdHRyaWJ1dGVzIiwiZGVzY3JpcHRvciIsImdPUFMiLCJwSUUiLCIkYXNzaWduIiwiQSIsIksiLCJmb3JFYWNoIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJqIiwiaXNJdGVyYWJsZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsImFGdW5jdGlvbiIsIlVOU0NPUEFCTEVTIiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsIm1heWJlQ2FsbE5hdGl2ZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVzIiwicngiLCJmdW5jdGlvbmFsUmVwbGFjZSIsImZ1bGxVbmljb2RlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwic3ltYm9scyIsImNoIiwiY2FwdHVyZSIsImlzUmVnRXhwIiwiZm9yY2VkIiwicmV0IiwiYWRkVG9VbnNjb3BhYmxlcyIsIl9rIiwiQXJndW1lbnRzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImluc2VydE5vZGVBdCIsImNhbWVsaXplIiwiY29uc29sZSIsInJlbW92ZU5vZGUiLCJGX3NvdXJjZV9WdWVfRHJhZ2dhYmxlX25vZGVfbW9kdWxlc19iYWJlbF9ydW50aW1lX2NvcmVqczJfY29yZV9qc19vYmplY3RfY3JlYXRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJGX3NvdXJjZV9WdWVfRHJhZ2dhYmxlX25vZGVfbW9kdWxlc19iYWJlbF9ydW50aW1lX2NvcmVqczJfY29yZV9qc19vYmplY3RfY3JlYXRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsImNhY2hlIiwicmVnZXgiLCJfIiwidG9VcHBlckNhc2UiLCJub2RlIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwiZmF0aGVyTm9kZSIsInJlZk5vZGUiLCJjaGlsZHJlbiIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZyIsIiRPYmplY3QiLCJEIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzZWFyY2giLCJzZXRQdWJsaWNQYXRoX2kiLCJjdXJyZW50U2NyaXB0Iiwib2JqZWN0X2Fzc2lnbiIsImFzc2lnbl9kZWZhdWx0Iiwia2V5c19kZWZhdWx0IiwiaXNfYXJyYXkiLCJpc19hcnJheV9kZWZhdWx0IiwiZ2V0X2l0ZXJhdG9yIiwiZ2V0X2l0ZXJhdG9yX2RlZmF1bHQiLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJmcm9tX2RlZmF1bHQiLCJpc19pdGVyYWJsZSIsImlzX2l0ZXJhYmxlX2RlZmF1bHQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImV4dGVybmFsX2NvbW1vbmpzX3NvcnRhYmxlanNfY29tbW9uanMyX3NvcnRhYmxlanNfYW1kX3NvcnRhYmxlanNfcm9vdF9Tb3J0YWJsZV8iLCJleHRlcm5hbF9jb21tb25qc19zb3J0YWJsZWpzX2NvbW1vbmpzMl9zb3J0YWJsZWpzX2FtZF9zb3J0YWJsZWpzX3Jvb3RfU29ydGFibGVfZGVmYXVsdCIsImhlbHBlciIsImVtaXQiLCJldnROYW1lIiwiZXZ0RGF0YSIsIl90aGlzIiwiJG5leHRUaWNrIiwiJGVtaXQiLCJ0b0xvd2VyQ2FzZSIsImRlbGVnYXRlQW5kRW1pdCIsIl90aGlzMiIsInJlYWxMaXN0IiwiaXNUcmFuc2l0aW9uTmFtZSIsImdldFNsb3QiLCJzbG90Iiwic2NvcGVkU2xvdCIsImV2ZW50c0xpc3RlbmVkIiwiZXZlbnRzVG9FbWl0IiwicmVhZG9ubHlQcm9wZXJ0aWVzIiwibWFwIiwiZXZ0IiwiZHJhZ2dpbmdFbGVtZW50IiwiZHJhZ2dhYmxlQ29tcG9uZW50IiwiaW5oZXJpdEF0dHJzIiwicHJvcHMiLCJvcHRpb25zIiwibGlzdCIsInJlcXVpcmVkIiwiZGVmYXVsdCIsIm5vVHJhbnNpdGlvbk9uRHJhZyIsIkJvb2xlYW4iLCJjbG9uZSIsIm9yaWdpbmFsIiwiZWxlbWVudCIsIm1vdmUiLCJjb21wb25lbnREYXRhIiwiZGF0YSIsInRyYW5zaXRpb25Nb2RlIiwibm9uZUZ1bmN0aW9uYWxDb21wb25lbnRNb2RlIiwicmVuZGVyIiwiaCIsInNsb3RzIiwiJHNsb3RzIiwiY29tcG9uZW50T3B0aW9ucyIsInZ1ZWRyYWdnYWJsZV9pc1RyYW5zaXRpb24iLCJfY29tcHV0ZUNoaWxkcmVuQW5kT2YiLCJoZWFkZXJPZmZzZXQiLCJmb290ZXJPZmZzZXQiLCJoZWFkZXIiLCJmb290ZXIiLCJjb21wdXRlQ2hpbGRyZW5BbmRPZmZzZXRzIiwiJHNjb3BlZFNsb3RzIiwiYXR0cmlidXRlcyIsIiRhdHRycyIsInVwZGF0ZSIsInByb3BOYW1lIiwiYnVpbGRBdHRyaWJ1dGUiLCJmaWx0ZXIiLCJyZWR1Y2UiLCJvbiIsImNvbXBvbmVudERhdGFBdHRycyIsImF0dHJzIiwiZ2V0Q29tcG9uZW50QXR0cmlidXRlcyIsImdldFRhZyIsImNyZWF0ZWQiLCJlcnJvciIsIndhcm4iLCJtb3VudGVkIiwiX3RoaXMzIiwiJGVsIiwibm9kZU5hbWUiLCJnZXRJc0Z1bmN0aW9uYWwiLCJFcnJvciIsIm9wdGlvbnNBZGRlZCIsImVsdCIsIm9uTW92ZSIsIm9yaWdpbmFsRXZlbnQiLCJvbkRyYWdNb3ZlIiwiZHJhZ2dhYmxlIiwiX3NvcnRhYmxlIiwicm9vdENvbnRhaW5lciIsImNvbXB1dGVJbmRleGVzIiwiYmVmb3JlRGVzdHJveSIsImRlc3Ryb3kiLCJjb21wdXRlZCIsIndhdGNoIiwiaGFuZGxlciIsIm5ld09wdGlvblZhbHVlIiwidXBkYXRlT3B0aW9ucyIsImRlZXAiLCJmbk9wdGlvbnMiLCJfdm5vZGUiLCJmdW5jdGlvbmFsIiwib3B0aW9uIiwiZ2V0Q2hpbGRyZW5Ob2RlcyIsIiRjaGlsZHJlbiIsInJhd05vZGVzIiwiY2hpbGQiLCJfdGhpczQiLCJ2aXNpYmxlSW5kZXhlcyIsImlzVHJhbnNpdGlvbiIsImVsbUZyb21Ob2RlcyIsImVsbSIsImZvb3RlckluZGV4IiwicmF3SW5kZXhlcyIsImlkeCIsImluZCIsIl9jb21wdXRlSW5kZXhlcyIsImdldFVuZGVybHlpbmdWbSIsImh0bWxFbHQiLCJ2bm9kZXMiLCJjb21wdXRlVm1JbmRleCIsImdldFVuZGVybHlpbmdQb3RlbmNpYWxEcmFnZ2FibGVDb21wb25lbnQiLCJfcmVmIiwidnVlIiwiX192dWVfXyIsIiRvcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsIiRwYXJlbnQiLCJlbWl0Q2hhbmdlcyIsIl90aGlzNSIsImFsdGVyTGlzdCIsIm9uTGlzdCIsIm5ld0xpc3QiLCJzcGxpY2VMaXN0IiwiX2FyZ3VtZW50cyIsInNwbGljZSIsInVwZGF0ZVBvc2l0aW9uIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsImdldFJlbGF0ZWRDb250ZXh0RnJvbU1vdmVFdmVudCIsIl9yZWYyIiwidG8iLCJyZWxhdGVkIiwiY29tcG9uZW50IiwiZGVzdGluYXRpb24iLCJnZXRWbUluZGV4IiwiZG9tSW5kZXgiLCJpbmRleGVzIiwibnVtYmVySW5kZXhlcyIsImdldENvbXBvbmVudCIsImNvbXBvbmVudEluc3RhbmNlIiwicmVzZXRUcmFuc2l0aW9uRGF0YSIsInRyYW5zaXRpb25Db250YWluZXIiLCJrZXB0Iiwib25EcmFnU3RhcnQiLCJpdGVtIiwiX3VuZGVybHlpbmdfdm1fIiwib25EcmFnQWRkIiwiYWRkZWQiLCJvbkRyYWdSZW1vdmUiLCJwdWxsTW9kZSIsInJlbW92ZWQiLCJvbkRyYWdVcGRhdGUiLCJtb3ZlZCIsInVwZGF0ZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiY29tcHV0ZUZ1dHVyZUluZGV4IiwicmVsYXRlZENvbnRleHQiLCJkb21DaGlsZHJlbiIsImN1cnJlbnRET01JbmRleCIsImN1cnJlbnRJbmRleCIsIndpbGxJbnNlcnRBZnRlciIsImRyYWdnZWRDb250ZXh0IiwiZnV0dXJlSW5kZXgiLCJvbkRyYWdFbmQiLCJ2dWVkcmFnZ2FibGUiLCJfdHlwZW9mIiwib2JqIiwiX2RlZmluZVByb3BlcnR5IiwiX2V4dGVuZHMiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlU3ltYm9sS2V5cyIsInVzZXJBZ2VudCIsInBhdHRlcm4iLCJuYXZpZ2F0b3IiLCJJRTExT3JMZXNzIiwiRWRnZSIsIkZpcmVGb3giLCJTYWZhcmkiLCJJT1MiLCJDaHJvbWVGb3JBbmRyb2lkIiwiY2FwdHVyZU1vZGUiLCJwYXNzaXZlIiwiZXZlbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm1hdGNoZXMiLCJzZWxlY3RvciIsInN1YnN0cmluZyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwiZ2V0UGFyZW50T3JIb3N0IiwiaG9zdCIsIm5vZGVUeXBlIiwicGFyZW50Tm9kZSIsImNsb3Nlc3QiLCJpbmNsdWRlQ1RYIiwiX3Rocm90dGxlVGltZW91dCIsIlJfU1BBQ0UiLCJ0b2dnbGVDbGFzcyIsInN0YXRlIiwiY2xhc3NMaXN0IiwiY2xhc3NOYW1lIiwiY3NzIiwicHJvcCIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdHJpeCIsInNlbGZPbmx5IiwiYXBwbGllZFRyYW5zZm9ybXMiLCJ0cmFuc2Zvcm0iLCJtYXRyaXhGbiIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsIkNTU01hdHJpeCIsIk1TQ1NTTWF0cml4IiwiZmluZCIsInRhZ05hbWUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0UmVjdCIsInJlbGF0aXZlVG9Db250YWluaW5nQmxvY2siLCJyZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50IiwidW5kb1NjYWxlIiwiY29udGFpbmVyIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxSZWN0IiwidG9wIiwibGVmdCIsImJvdHRvbSIsInJpZ2h0IiwiaGVpZ2h0Iiwid2lkdGgiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJjb250YWluZXJSZWN0IiwicGFyc2VJbnQiLCJlbE1hdHJpeCIsInNjYWxlWCIsInNjYWxlWSIsImlzU2Nyb2xsZWRQYXN0IiwiZWxTaWRlIiwicGFyZW50U2lkZSIsInBhcmVudCIsImdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50IiwiZWxTaWRlVmFsIiwicGFyZW50U2lkZVZhbCIsImdldENoaWxkIiwiY2hpbGROdW0iLCJjdXJyZW50Q2hpbGQiLCJTb3J0YWJsZSIsImdob3N0IiwiZHJhZ2dlZCIsImxhc3RDaGlsZCIsImxhc3QiLCJsYXN0RWxlbWVudENoaWxkIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsIndpblNjcm9sbGVyIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsImluY2x1ZGVTZWxmIiwiZWxlbSIsImdvdFNlbGYiLCJjbGllbnRXaWR0aCIsInNjcm9sbFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiZWxlbUNTUyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImJvZHkiLCJpc1JlY3RFcXVhbCIsInJlY3QxIiwicmVjdDIiLCJyb3VuZCIsInRocm90dGxlIiwiY2FsbGJhY2siLCJtcyIsImFyZ3MiLCJzZXRUaW1lb3V0Iiwic2Nyb2xsQnkiLCJ4IiwieSIsIlBvbHltZXIiLCIkIiwialF1ZXJ5IiwiWmVwdG8iLCJkb20iLCJjbG9uZU5vZGUiLCJzZXRSZWN0IiwicmVjdCIsInVuc2V0UmVjdCIsImV4cGFuZG8iLCJEYXRlIiwiZ2V0VGltZSIsIkFuaW1hdGlvblN0YXRlTWFuYWdlciIsImFuaW1hdGlvbkNhbGxiYWNrSWQiLCJhbmltYXRpb25TdGF0ZXMiLCJjYXB0dXJlQW5pbWF0aW9uU3RhdGUiLCJhbmltYXRpb24iLCJmcm9tUmVjdCIsInRoaXNBbmltYXRpb25EdXJhdGlvbiIsImNoaWxkTWF0cml4IiwiYWRkQW5pbWF0aW9uU3RhdGUiLCJyZW1vdmVBbmltYXRpb25TdGF0ZSIsIk51bWJlciIsImluZGV4T2ZPYmplY3QiLCJhbmltYXRlQWxsIiwiY2xlYXJUaW1lb3V0IiwiYW5pbWF0aW5nIiwiYW5pbWF0aW9uVGltZSIsInRpbWUiLCJ0b1JlY3QiLCJwcmV2RnJvbVJlY3QiLCJwcmV2VG9SZWN0IiwiYW5pbWF0aW5nUmVjdCIsInRhcmdldE1hdHJpeCIsInNxcnQiLCJwb3ciLCJjYWxjdWxhdGVSZWFsVGltZSIsImFuaW1hdGUiLCJhbmltYXRpb25SZXNldFRpbWVyIiwiY3VycmVudFJlY3QiLCJkdXJhdGlvbiIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiYW5pbWF0aW5nWCIsImFuaW1hdGluZ1kiLCJvZmZzZXRXaWR0aCIsInJlcGFpbnQiLCJlYXNpbmciLCJhbmltYXRlZCIsInBsdWdpbnMiLCJkZWZhdWx0cyIsImluaXRpYWxpemVCeURlZmF1bHQiLCJQbHVnaW5NYW5hZ2VyIiwibW91bnQiLCJwbHVnaW4iLCJwbHVnaW5FdmVudCIsImV2ZW50TmFtZSIsInNvcnRhYmxlIiwiZXZlbnRDYW5jZWxlZCIsImNhbmNlbCIsImV2ZW50TmFtZUdsb2JhbCIsInBsdWdpbk5hbWUiLCJpbml0aWFsaXplUGx1Z2lucyIsImluaXRpYWxpemVkIiwibW9kaWZpZWQiLCJtb2RpZnlPcHRpb24iLCJnZXRFdmVudFByb3BlcnRpZXMiLCJldmVudFByb3BlcnRpZXMiLCJtb2RpZmllZFZhbHVlIiwib3B0aW9uTGlzdGVuZXJzIiwiZGlzcGF0Y2hFdmVudCIsInJvb3RFbCIsInRhcmdldEVsIiwiY2xvbmVFbCIsInRvRWwiLCJmcm9tRWwiLCJvbGREcmFnZ2FibGVJbmRleCIsIm5ld0RyYWdnYWJsZUluZGV4IiwicHV0U29ydGFibGUiLCJleHRyYUV2ZW50UHJvcGVydGllcyIsIm9uTmFtZSIsInN1YnN0ciIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImxhc3RQdXRNb2RlIiwiYWxsRXZlbnRQcm9wZXJ0aWVzIiwiZHJhZ0VsIiwicGFyZW50RWwiLCJnaG9zdEVsIiwibmV4dEVsIiwibGFzdERvd25FbCIsImNsb25lSGlkZGVuIiwiZHJhZ1N0YXJ0ZWQiLCJhY3RpdmVTb3J0YWJsZSIsImFjdGl2ZSIsImhpZGVHaG9zdEZvclRhcmdldCIsIl9oaWRlR2hvc3RGb3JUYXJnZXQiLCJ1bmhpZGVHaG9zdEZvclRhcmdldCIsIl91bmhpZGVHaG9zdEZvclRhcmdldCIsImNsb25lTm93SGlkZGVuIiwiY2xvbmVOb3dTaG93biIsImRpc3BhdGNoU29ydGFibGVFdmVudCIsIl9kaXNwYXRjaEV2ZW50IiwiaW5mbyIsImFjdGl2ZUdyb3VwIiwidGFwRXZ0IiwidG91Y2hFdnQiLCJsYXN0RHgiLCJsYXN0RHkiLCJ0YXBEaXN0YW5jZUxlZnQiLCJ0YXBEaXN0YW5jZVRvcCIsImxhc3RUYXJnZXQiLCJsYXN0RGlyZWN0aW9uIiwidGFyZ2V0TW92ZURpc3RhbmNlIiwiZ2hvc3RSZWxhdGl2ZVBhcmVudCIsImF3YWl0aW5nRHJhZ1N0YXJ0ZWQiLCJpZ25vcmVOZXh0Q2xpY2siLCJzb3J0YWJsZXMiLCJwYXN0Rmlyc3RJbnZlcnRUaHJlc2giLCJpc0NpcmN1bXN0YW50aWFsSW52ZXJ0IiwiZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGwiLCJfc2lsZW50Iiwic2F2ZWRJbnB1dENoZWNrZWQiLCJkb2N1bWVudEV4aXN0cyIsIlBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5IiwiQ1NTRmxvYXRQcm9wZXJ0eSIsInN1cHBvcnREcmFnZ2FibGUiLCJzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyIsImNzc1RleHQiLCJwb2ludGVyRXZlbnRzIiwiX2RldGVjdERpcmVjdGlvbiIsImVsQ1NTIiwiZWxXaWR0aCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsImNoaWxkMSIsImNoaWxkMiIsImZpcnN0Q2hpbGRDU1MiLCJzZWNvbmRDaGlsZENTUyIsImZpcnN0Q2hpbGRXaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsInNlY29uZENoaWxkV2lkdGgiLCJmbGV4RGlyZWN0aW9uIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsInRvdWNoaW5nU2lkZUNoaWxkMiIsImNsZWFyIiwiX3ByZXBhcmVHcm91cCIsInRvRm4iLCJwdWxsIiwic2FtZUdyb3VwIiwiZ3JvdXAiLCJvdGhlckdyb3VwIiwib3JpZ2luYWxHcm91cCIsImNoZWNrUHVsbCIsImNoZWNrUHV0IiwicHV0IiwicmV2ZXJ0Q2xvbmUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50IiwidG91Y2hlcyIsIm5lYXJlc3QiLCJjbGllbnRYIiwiY2xpZW50WSIsInNvbWUiLCJ0aHJlc2hvbGQiLCJlbXB0eUluc2VydFRocmVzaG9sZCIsImluc2lkZUhvcml6b250YWxseSIsImluc2lkZVZlcnRpY2FsbHkiLCJfb25EcmFnT3ZlciIsIl9jaGVja091dHNpZGVUYXJnZXRFbCIsIl9pc091dHNpZGVUaGlzRWwiLCJzb3J0IiwiZGlzYWJsZWQiLCJoYW5kbGUiLCJ0ZXN0Iiwic3dhcFRocmVzaG9sZCIsImludmVydFN3YXAiLCJpbnZlcnRlZFN3YXBUaHJlc2hvbGQiLCJyZW1vdmVDbG9uZU9uSGlkZSIsImRpcmVjdGlvbiIsImdob3N0Q2xhc3MiLCJjaG9zZW5DbGFzcyIsImRyYWdDbGFzcyIsImlnbm9yZSIsInByZXZlbnRPbkZpbHRlciIsInNldERhdGEiLCJkYXRhVHJhbnNmZXIiLCJ0ZXh0Q29udGVudCIsImRyb3BCdWJibGUiLCJkcmFnb3ZlckJ1YmJsZSIsImRhdGFJZEF0dHIiLCJkZWxheSIsImRlbGF5T25Ub3VjaE9ubHkiLCJ0b3VjaFN0YXJ0VGhyZXNob2xkIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImZvcmNlRmFsbGJhY2siLCJmYWxsYmFja0NsYXNzIiwiZmFsbGJhY2tPbkJvZHkiLCJmYWxsYmFja1RvbGVyYW5jZSIsImZhbGxiYWNrT2Zmc2V0Iiwic3VwcG9ydFBvaW50ZXIiLCJuYXRpdmVEcmFnZ2FibGUiLCJfb25UYXBTdGFydCIsIl9vbk1vdmUiLCJkcmFnUmVjdCIsInRhcmdldFJlY3QiLCJyZXRWYWwiLCJvbk1vdmVGbiIsImRyYWdnZWRSZWN0IiwicmVsYXRlZFJlY3QiLCJfZGlzYWJsZURyYWdnYWJsZSIsIl91bnNpbGVudCIsIl9nZW5lcmF0ZUlkIiwiaHJlZiIsInN1bSIsIl9uZXh0VGljayIsIl9jYW5jZWxOZXh0VGljayIsImNvbnRhaW5zIiwiX2dldERpcmVjdGlvbiIsInRvdWNoIiwicG9pbnRlclR5cGUiLCJvcmlnaW5hbFRhcmdldCIsInNoYWRvd1Jvb3QiLCJwYXRoIiwiY29tcG9zZWRQYXRoIiwicm9vdCIsImlucHV0cyIsImNoZWNrZWQiLCJfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlIiwiYnV0dG9uIiwiaXNDb250ZW50RWRpdGFibGUiLCJjcml0ZXJpYSIsInRyaW0iLCJfcHJlcGFyZURyYWdTdGFydCIsImRyYWdTdGFydEZuIiwib3duZXJEb2N1bWVudCIsIl9sYXN0WCIsIl9sYXN0WSIsIl9vbkRyb3AiLCJfZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzIiwiX3RyaWdnZXJEcmFnU3RhcnQiLCJfZGlzYWJsZURlbGF5ZWREcmFnIiwiX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlciIsIl9kcmFnU3RhcnRUaW1lciIsImFicyIsIl9vblRvdWNoTW92ZSIsIl9vbkRyYWdTdGFydCIsInNlbGVjdGlvbiIsImVtcHR5IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsUmFuZ2VzIiwiX2RyYWdTdGFydGVkIiwiZmFsbGJhY2siLCJfYXBwZW5kR2hvc3QiLCJfbnVsbGluZyIsIl9lbXVsYXRlRHJhZ092ZXIiLCJlbGVtZW50RnJvbVBvaW50IiwiZ2hvc3RNYXRyaXgiLCJyZWxhdGl2ZVNjcm9sbE9mZnNldCIsImR4IiwiZHkiLCJjc3NNYXRyaXgiLCJfaGlkZUNsb25lIiwiY2xvbmVJZCIsIl9sb29wSWQiLCJzZXRJbnRlcnZhbCIsImVmZmVjdEFsbG93ZWQiLCJfZHJhZ1N0YXJ0SWQiLCJyZXZlcnQiLCJ2ZXJ0aWNhbCIsImlzT3duZXIiLCJjYW5Tb3J0IiwiZnJvbVNvcnRhYmxlIiwiY29tcGxldGVkRmlyZWQiLCJkcmFnT3ZlckV2ZW50IiwiX2lnbm9yZVdoaWxlQW5pbWF0aW5nIiwiY29tcGxldGVkIiwiZWxMYXN0Q2hpbGQiLCJfZ2hvc3RJc0xhc3QiLCJjaGFuZ2VkIiwidGFyZ2V0QmVmb3JlRmlyc3RTd2FwIiwic2libGluZyIsImRpZmZlcmVudExldmVsIiwiZGlmZmVyZW50Um93Q29sIiwiZHJhZ0VsUzFPcHAiLCJkcmFnRWxTMk9wcCIsImRyYWdFbE9wcExlbmd0aCIsInRhcmdldFMxT3BwIiwidGFyZ2V0UzJPcHAiLCJ0YXJnZXRPcHBMZW5ndGgiLCJfZHJhZ0VsSW5Sb3dDb2x1bW4iLCJzaWRlMSIsInNjcm9sbGVkUGFzdFRvcCIsInNjcm9sbEJlZm9yZSIsImlzTGFzdFRhcmdldCIsIm1vdXNlT25BeGlzIiwidGFyZ2V0TGVuZ3RoIiwidGFyZ2V0UzEiLCJ0YXJnZXRTMiIsImludmVydCIsIl9nZXRJbnNlcnREaXJlY3Rpb24iLCJfZ2V0U3dhcERpcmVjdGlvbiIsImRyYWdJbmRleCIsIm5leHRFbGVtZW50U2libGluZyIsImFmdGVyIiwibW92ZVZlY3RvciIsImV4dHJhIiwiYXhpcyIsImluc2VydGlvbiIsIl9zaG93Q2xvbmUiLCJfb2ZmTW92ZUV2ZW50cyIsIl9vZmZVcEV2ZW50cyIsImNsZWFySW50ZXJ2YWwiLCJzYXZlIiwiaGFuZGxlRXZlbnQiLCJkcm9wRWZmZWN0IiwiX2dsb2JhbERyYWdPdmVyIiwidG9BcnJheSIsIm9yZGVyIiwiZ2V0QXR0cmlidXRlIiwiaXRlbXMiLCJzZXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicmVtb3ZlQXR0cmlidXRlIiwidXRpbHMiLCJleHRlbmQiLCJkc3QiLCJuZXh0VGljayIsImNhbmNlbE5leHRUaWNrIiwiZGV0ZWN0RGlyZWN0aW9uIiwiX2xlbiIsIl9rZXkiLCJzY3JvbGxFbCIsInNjcm9sbFJvb3RFbCIsImxhc3RBdXRvU2Nyb2xsWCIsImxhc3RBdXRvU2Nyb2xsWSIsInRvdWNoRXZ0JDEiLCJwb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCIsImF1dG9TY3JvbGxzIiwic2Nyb2xsaW5nIiwiY2xlYXJBdXRvU2Nyb2xscyIsImF1dG9TY3JvbGwiLCJwaWQiLCJjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIiwibGFzdFN3YXBFbCIsImlzRmFsbGJhY2siLCJzY3JvbGwiLCJzY3JvbGxDdXN0b21GbiIsInNlbnMiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNwZWVkIiwic2Nyb2xsU3BlZWQiLCJzY3JvbGxUaGlzSW5zdGFuY2UiLCJzY3JvbGxGbiIsImxheWVyc091dCIsImN1cnJlbnRQYXJlbnQiLCJjYW5TY3JvbGxYIiwiY2FuU2Nyb2xsWSIsInNjcm9sbFBvc1giLCJzY3JvbGxQb3NZIiwidngiLCJ2eSIsImxheWVyIiwic2Nyb2xsT2Zmc2V0WSIsInNjcm9sbE9mZnNldFgiLCJidWJibGVTY3JvbGwiLCJkcm9wIiwidG9Tb3J0YWJsZSIsImNoYW5nZWRUb3VjaGVzIiwib25TcGlsbCIsIlJldmVydCIsIlJlbW92ZSIsIlN3YXBQbHVnaW4iLCJTd2FwIiwic3dhcENsYXNzIiwiZHJhZ1N0YXJ0IiwiZHJhZ092ZXJWYWxpZCIsInN3YXAiLCJwcmV2U3dhcEVsIiwiX3JlZjMiLCJuMSIsIm4yIiwiaTEiLCJpMiIsInAxIiwicDIiLCJpc0VxdWFsTm9kZSIsInN3YXBOb2RlcyIsIm51bGxpbmciLCJzd2FwSXRlbSIsInN0YXJ0SW5kZXgiLCJfcmVmNCIsInBhcmVudFNvcnRhYmxlIiwibGFzdE11bHRpRHJhZ1NlbGVjdCIsIm11bHRpRHJhZ1NvcnRhYmxlIiwiZHJhZ0VsJDEiLCJjbG9uZXNGcm9tUmVjdCIsImNsb25lc0hpZGRlbiIsIm11bHRpRHJhZ0VsZW1lbnRzIiwibXVsdGlEcmFnQ2xvbmVzIiwiaW5pdGlhbEZvbGRpbmciLCJmb2xkaW5nIiwiTXVsdGlEcmFnUGx1Z2luIiwiTXVsdGlEcmFnIiwiX2Rlc2VsZWN0TXVsdGlEcmFnIiwiX2NoZWNrS2V5RG93biIsIl9jaGVja0tleVVwIiwic2VsZWN0ZWRDbGFzcyIsIm11bHRpRHJhZ0tleSIsIm11bHRpRHJhZ0VsZW1lbnQiLCJtdWx0aURyYWdLZXlEb3duIiwiaXNNdWx0aURyYWciLCJkZWxheVN0YXJ0R2xvYmFsIiwiZGVsYXlFbmRlZCIsInNldHVwQ2xvbmUiLCJzb3J0YWJsZUluZGV4IiwiaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzIiwic2hvd0Nsb25lIiwiaGlkZUNsb25lIiwiX3JlZjUiLCJkcmFnU3RhcnRHbG9iYWwiLCJfcmVmNiIsIm11bHRpRHJhZyIsIl9yZWY3IiwicmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMiLCJkcmFnT3ZlciIsIl9yZWY4IiwiX3JlZjkiLCJjbG9uZXNJbnNlcnRlZCIsImluc2VydE11bHRpRHJhZ0VsZW1lbnRzIiwiZHJhZ092ZXJDb21wbGV0ZWQiLCJfcmVmMTAiLCJkcmFnUmVjdEFic29sdXRlIiwiY2xvbmVzSGlkZGVuQmVmb3JlIiwiZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlIiwiX3JlZjExIiwiZHJhZ01hdHJpeCIsImRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUiLCJfcmVmMTIiLCJvcmlnaW5hbEV2dCIsInNoaWZ0S2V5IiwibXVsdGlEcmFnSW5kZXgiLCJudWxsaW5nR2xvYmFsIiwiZGVzdHJveUdsb2JhbCIsInNoaWZ0Iiwic2VsZWN0IiwiZGVzZWxlY3QiLCJvbGRJbmRpY2llcyIsIm5ld0luZGljaWVzIiwiY2xvbmVzIiwiZWxlbWVudHNJbnNlcnRlZCIsIkF1dG9TY3JvbGwiLCJfaGFuZGxlQXV0b1Njcm9sbCIsIl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwiLCJkcmFnT3ZlckJ1YmJsZSIsIm9nRWxlbVNjcm9sbGVyIiwibmV3RWxlbSIsInJlZmxlY3Rpb25Jc1N1cHBvcnRlZCIsIlJlZmxlY3QiLCJkZWZpbmVNZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsImNvcHlSZWZsZWN0aW9uTWV0YWRhdGEiLCJmb3J3YXJkTWV0YWRhdGEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicHJvcGVydHlLZXkiLCJtZXRhS2V5IiwibWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YSIsImhhc1Byb3RvIiwiX19wcm90b19fIiwiY3JlYXRlRGVjb3JhdG9yIiwiZmFjdG9yeSIsIkN0b3IiLCJfX2RlY29yYXRvcnNfXyIsImNvbGxlY3REYXRhRnJvbUNvbnN0cnVjdG9yIiwidm0iLCJDb21wb25lbnQiLCJvcmlnaW5hbEluaXQiLCJfaW5pdCIsInBsYWluRGF0YSIsIiRpbnRlcm5hbEhvb2tzIiwiY29tcG9uZW50RmFjdG9yeSIsIm1peGlucyIsImRlY29yYXRvcnMiLCJzdXBlclByb3RvIiwiU3VwZXIiLCJFeHRlbmRlZCIsImZvcndhcmRTdGF0aWNNZW1iZXJzIiwic2hvdWxkSWdub3JlIiwiY2FsbGVyIiwiT3JpZ2luYWwiLCJleHRlbmRlZERlc2NyaXB0b3IiLCJzdXBlckRlc2NyaXB0b3IiLCJyZWdpc3Rlckhvb2tzIiwicmVmbGVjdE1ldGFkYXRhSXNTdXBwb3J0ZWQiLCJnZXRNZXRhZGF0YSIsImFwcGx5TWV0YWRhdGEiLCJQcm9wIiwiRElSRUNUSU9OX1RZUEUiLCJDQUxDX1RZUEUiLCJWaXJ0dWFsIiwicGFyYW0iLCJ1cGRhdGVIb29rIiwiaW5pdCIsInNpemVzIiwiTWFwIiwiZmlyc3RSYW5nZVRvdGFsU2l6ZSIsImZpcnN0UmFuZ2VBdmVyYWdlU2l6ZSIsImxhc3RDYWxjSW5kZXgiLCJmaXhlZFNpemVWYWx1ZSIsImNhbGNUeXBlIiwib2Zmc2V0IiwicmFuZ2UiLCJjaGVja1JhbmdlIiwia2VlcHMiLCJzdGFydCIsImVuZCIsInBhZEZyb250IiwicGFkQmVoaW5kIiwiZ2V0SW5kZXhPZmZzZXQiLCJzaXplIiwiaXNGcm9udCIsImlzQmVoaW5kIiwidXBkYXRlUmFuZ2UiLCJnZXRFbmRCeVN0YXJ0IiwiaGFuZGxlRGF0YVNvdXJjZXNDaGFuZ2UiLCJoYW5kbGVGcm9udCIsImhhbmRsZUJlaGluZCIsIm92ZXJzIiwiZ2V0U2Nyb2xsT3ZlcnMiLCJidWZmZXIiLCJzbG90SGVhZGVyU2l6ZSIsImlzRml4ZWRUeXBlIiwibG93IiwibWlkZGxlIiwibWlkZGxlT2Zmc2V0IiwiaGlnaCIsInVuaXF1ZUlkcyIsImdpdmVuSW5kZXgiLCJpbmRleFNpemUiLCJnZXRFc3RpbWF0ZVNpemUiLCJnZXRMYXN0SW5kZXgiLCJnZXRQYWRGcm9udCIsImdldFBhZEJlaGluZCIsImdldFJhbmdlIiwidGhlb3J5RW5kIiwiVmlydHVhbFByb3BzIiwicmVxdWlyZSIsImRhdGFLZXkiLCJkYXRhU291cmNlcyIsImRhdGFDb21wb25lbnQiLCJleHRyYVByb3BzIiwicm9vdFRhZyIsIndyYXBUYWciLCJ3cmFwQ2xhc3MiLCJ1cHBlclRocmVzaG9sZCIsImxvd2VyVGhyZXNob2xkIiwiaXRlbVRhZyIsIml0ZW1DbGFzcyIsImhlYWRlclRhZyIsImhlYWRlckNsYXNzIiwiZm9vdGVyVGFnIiwiZm9vdGVyQ2xhc3MiLCJJdGVtUHJvcHMiLCJob3Jpem9udGFsIiwidW5pcXVlS2V5IiwiU2xvdFByb3BzIiwiV3JhcHBlciIsImhhc0luaXRpYWwiLCJzaGFwZUtleSIsImRpc3BhdGNoU2l6ZUNoYW5nZSIsIlJlc2l6ZU9ic2VydmVyIiwicmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImdldEN1cnJlbnRTaXplIiwiSXRlbSIsInJvbGUiLCJTbG90IiwiRVZFTlRfVFlQRSIsIlNMT1RfVFlQRSIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJ1cGRhdGVQYXJhbSIsImdldFVuaXF1ZUlkRnJvbURhdGFTb3VyY2VzIiwiaXNIb3Jpem9udGFsIiwiZGlyZWN0aW9uS2V5Iiwic2xvdEZvb3RlclNpemUiLCJvblJhbmdlQ2hhbmdlZCIsIiRvbiIsIm9uSXRlbVJlc2l6ZWQiLCJvblNsb3RSZXNpemVkIiwic2V0U2Nyb2xsT2Zmc2V0IiwiZ2V0T2Zmc2V0Iiwic2F2ZVNpemUiLCJoYXNJbml0IiwiaGFuZGxlU2xvdFNpemVDaGFuZ2UiLCIkcmVmcyIsImhhbmRsZVNjcm9sbCIsImVtaXRFdmVudCIsImRhdGFTb3VyY2UiLCJvZmZzZXRTaGFwZSIsInNjcm9sbFNoYXBlIiwiY2xhc3MiLCJwYWRkaW5nIiwicmVmIiwib25TY3JvbGwiLCJnZXRSZW5kZXJTbG90cyIsIlZpcnR1YWxMaXN0IiwiRHJhZ2dhYmxlIiwib25Nb3ZlZCIsInZpcnR1YWxMaXN0IiwiY2hhbmdlIiwicGF0Y2hWaXJ0dWFsTGlzdEdldFJlbmRlclNsb3RzIiwidmlydHVhbExpc3RDdG9yIiwiZHJhZ2dhYmxlQ3RvciIsImlucHV0IiwiRHJhZ2dhYmxlVmlydHVhbExpc3QiXSwibWFwcGluZ3MiOiJxQ0FDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUEwRGYsT0FyREFGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRyxnQkNsRnJEaEMsRUFBT0QsUUFBVWtDLEssZ0JDQWpCakMsRUFBT0QsUUFDRSxTQUFVSSxHQUVULElBQUlQLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQTBEZixPQXJEQUYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxRQW5GcEQsQ0FzRkMsQ0FFSixPQUNBLFNBQVVoQyxFQUFRRCxFQUFTRixHQUVqQyxJQUFJcUMsRUFBWXJDLEVBQW9CLFFBQ2hDc0MsRUFBVXRDLEVBQW9CLFFBR2xDRyxFQUFPRCxRQUFVLFNBQVVxQyxHQUN6QixPQUFPLFNBQVVDLEVBQU1DLEdBQ3JCLElBR0lDLEVBQUdDLEVBSEhSLEVBQUlTLE9BQU9OLEVBQVFFLElBQ25CcEMsRUFBSWlDLEVBQVVJLEdBQ2RwQyxFQUFJOEIsRUFBRVUsT0FFVixPQUFJekMsRUFBSSxHQUFLQSxHQUFLQyxFQUFVa0MsRUFBWSxRQUFLTyxHQUM3Q0osRUFBSVAsRUFBRVksV0FBVzNDLElBQ04sT0FBVXNDLEVBQUksT0FBVXRDLEVBQUksSUFBTUMsSUFBTXNDLEVBQUlSLEVBQUVZLFdBQVczQyxFQUFJLElBQU0sT0FBVXVDLEVBQUksTUFDeEZKLEVBQVlKLEVBQUVhLE9BQU81QyxHQUFLc0MsRUFDMUJILEVBQVlKLEVBQUVjLE1BQU03QyxFQUFHQSxFQUFJLEdBQTJCdUMsRUFBSSxPQUF6QkQsRUFBSSxPQUFVLElBQXFCLFNBT3RFLE9BQ0EsU0FBVXZDLEVBQVFELEVBQVNGLEdBRWpDLGFBRUEsSUFBSWtELEVBQUtsRCxFQUFvQixPQUFwQkEsRUFBNEIsR0FJckNHLEVBQU9ELFFBQVUsU0FBVWlELEVBQUdDLEVBQU9DLEdBQ25DLE9BQU9ELEdBQVNDLEVBQVVILEVBQUdDLEVBQUdDLEdBQU9QLE9BQVMsS0FNNUMsT0FDQSxTQUFVMUMsRUFBUUQsR0FFeEIsSUFBSStCLEVBQWlCLEdBQUdBLGVBQ3hCOUIsRUFBT0QsUUFBVSxTQUFVb0QsRUFBSTNCLEdBQzdCLE9BQU9NLEVBQWUxQixLQUFLK0MsRUFBSTNCLEtBTTNCLE9BQ0EsU0FBVXhCLEVBQVFELEVBQVNGLEdBRWpDLGFBR0EsSUFBSXVELEVBQVd2RCxFQUFvQixRQUNuQ0csRUFBT0QsUUFBVSxXQUNmLElBQUlzQyxFQUFPZSxFQUFTQyxNQUNoQkMsRUFBUyxHQU1iLE9BTElqQixFQUFLa0IsU0FBUUQsR0FBVSxLQUN2QmpCLEVBQUttQixhQUFZRixHQUFVLEtBQzNCakIsRUFBS29CLFlBQVdILEdBQVUsS0FDMUJqQixFQUFLYSxVQUFTSSxHQUFVLEtBQ3hCakIsRUFBS3FCLFNBQVFKLEdBQVUsS0FDcEJBLElBTUgsT0FDQSxTQUFVdEQsRUFBUUQsRUFBU0YsR0FFakMsSUFBSXFDLEVBQVlyQyxFQUFvQixRQUNoQzhELEVBQU1DLEtBQUtELElBQ1hFLEVBQU1ELEtBQUtDLElBQ2Y3RCxFQUFPRCxRQUFVLFNBQVVrRCxFQUFPUCxHQUVoQyxPQURBTyxFQUFRZixFQUFVZSxJQUNILEVBQUlVLEVBQUlWLEVBQVFQLEVBQVEsR0FBS21CLEVBQUlaLEVBQU9QLEtBTW5ELEtBQ0EsU0FBVTFDLEVBQVFELEVBQVNGLEdBRWpDLGFBRUEsSUFBSWlFLEVBQU1qRSxFQUFvQixPQUFwQkEsRUFBNEIsR0FHdENBLEVBQW9CLE9BQXBCQSxDQUE0QjRDLE9BQVEsVUFBVSxTQUFVc0IsR0FDdERWLEtBQUtXLEdBQUt2QixPQUFPc0IsR0FDakJWLEtBQUtZLEdBQUssS0FFVCxXQUNELElBRUlDLEVBRkFDLEVBQUlkLEtBQUtXLEdBQ1RmLEVBQVFJLEtBQUtZLEdBRWpCLE9BQUloQixHQUFTa0IsRUFBRXpCLE9BQWUsQ0FBRXhCLFdBQU95QixFQUFXeUIsTUFBTSxJQUN4REYsRUFBUUosRUFBSUssRUFBR2xCLEdBQ2ZJLEtBQUtZLElBQU1DLEVBQU14QixPQUNWLENBQUV4QixNQUFPZ0QsRUFBT0UsTUFBTSxRQU16QixLQUNBLFNBQVVwRSxFQUFRRCxHQUd4QkMsRUFBT0QsUUFBVSxnR0FFZnNFLE1BQU0sTUFLRixPQUNBLFNBQVVyRSxFQUFRRCxFQUFTRixHQUdqQyxJQUFJeUUsRUFBVXpFLEVBQW9CLFFBRWxDeUUsRUFBUUEsRUFBUXRCLEVBQUcsUUFBUyxDQUFFdUIsUUFBUzFFLEVBQW9CLFdBS3JELE9BQ0EsU0FBVUcsRUFBUUQsRUFBU0YsR0FHakMsSUFBSTJFLEVBQVczRSxFQUFvQixRQUduQ0csRUFBT0QsUUFBVSxTQUFVb0QsRUFBSUgsR0FDN0IsSUFBS3dCLEVBQVNyQixHQUFLLE9BQU9BLEVBQzFCLElBQUlzQixFQUFJQyxFQUNSLEdBQUkxQixHQUFrQyxtQkFBckJ5QixFQUFLdEIsRUFBR3dCLFlBQTRCSCxFQUFTRSxFQUFNRCxFQUFHckUsS0FBSytDLElBQU0sT0FBT3VCLEVBQ3pGLEdBQWdDLG1CQUFwQkQsRUFBS3RCLEVBQUd5QixXQUEyQkosRUFBU0UsRUFBTUQsRUFBR3JFLEtBQUsrQyxJQUFNLE9BQU91QixFQUNuRixJQUFLMUIsR0FBa0MsbUJBQXJCeUIsRUFBS3RCLEVBQUd3QixZQUE0QkgsRUFBU0UsRUFBTUQsRUFBR3JFLEtBQUsrQyxJQUFNLE9BQU91QixFQUMxRixNQUFNRyxVQUFVLDZDQU1aLE9BQ0EsU0FBVTdFLEVBQVFELEVBQVNGLEdBRWpDLElBQUkyRSxFQUFXM0UsRUFBb0IsUUFDL0JpRixFQUFXakYsRUFBb0IsUUFBUWlGLFNBRXZDQyxFQUFLUCxFQUFTTSxJQUFhTixFQUFTTSxFQUFTRSxlQUNqRGhGLEVBQU9ELFFBQVUsU0FBVW9ELEdBQ3pCLE9BQU80QixFQUFLRCxFQUFTRSxjQUFjN0IsR0FBTSxLQU1yQyxPQUNBLFNBQVVuRCxFQUFRRCxFQUFTRixHQUVqQyxhQUVBLElBQUlvRixFQUFrQnBGLEVBQW9CLFFBQ3RDcUYsRUFBYXJGLEVBQW9CLFFBRXJDRyxFQUFPRCxRQUFVLFNBQVU0QixFQUFRc0IsRUFBTy9CLEdBQ3BDK0IsS0FBU3RCLEVBQVFzRCxFQUFnQkUsRUFBRXhELEVBQVFzQixFQUFPaUMsRUFBVyxFQUFHaEUsSUFDL0RTLEVBQU9zQixHQUFTL0IsSUFNakIsT0FDQSxTQUFVbEIsRUFBUUQsRUFBU0YsR0FFakMsYUFFQUEsRUFBb0IsUUFDcEIsSUFBSXVGLEVBQVd2RixFQUFvQixRQUMvQndGLEVBQU94RixFQUFvQixRQUMzQnlGLEVBQVF6RixFQUFvQixRQUM1QnNDLEVBQVV0QyxFQUFvQixRQUM5QjBGLEVBQU0xRixFQUFvQixRQUMxQjJGLEVBQWEzRixFQUFvQixRQUVqQzRGLEVBQVVGLEVBQUksV0FFZEcsR0FBaUNKLEdBQU0sV0FJekMsSUFBSUssRUFBSyxJQU1ULE9BTEFBLEVBQUdDLEtBQU8sV0FDUixJQUFJdEMsRUFBUyxHQUViLE9BREFBLEVBQU91QyxPQUFTLENBQUV0RCxFQUFHLEtBQ2RlLEdBRXlCLE1BQTNCLEdBQUd3QyxRQUFRSCxFQUFJLFdBR3BCSSxFQUFvQyxXQUV0QyxJQUFJSixFQUFLLE9BQ0xLLEVBQWVMLEVBQUdDLEtBQ3RCRCxFQUFHQyxLQUFPLFdBQWMsT0FBT0ksRUFBYUMsTUFBTTVDLEtBQU02QyxZQUN4RCxJQUFJNUMsRUFBUyxLQUFLZSxNQUFNc0IsR0FDeEIsT0FBeUIsSUFBbEJyQyxFQUFPWixRQUE4QixNQUFkWSxFQUFPLElBQTRCLE1BQWRBLEVBQU8sR0FOcEIsR0FTeEN0RCxFQUFPRCxRQUFVLFNBQVVvRyxFQUFLekQsRUFBUWtELEdBQ3RDLElBQUlRLEVBQVNiLEVBQUlZLEdBRWJFLEdBQXVCZixHQUFNLFdBRS9CLElBQUluQixFQUFJLEdBRVIsT0FEQUEsRUFBRWlDLEdBQVUsV0FBYyxPQUFPLEdBQ1osR0FBZCxHQUFHRCxHQUFLaEMsTUFHYm1DLEVBQW9CRCxHQUF1QmYsR0FBTSxXQUVuRCxJQUFJaUIsR0FBYSxFQUNiWixFQUFLLElBU1QsT0FSQUEsRUFBR0MsS0FBTyxXQUFpQyxPQUFuQlcsR0FBYSxFQUFhLE1BQ3RDLFVBQVJKLElBR0ZSLEVBQUdhLFlBQWMsR0FDakJiLEVBQUdhLFlBQVlmLEdBQVcsV0FBYyxPQUFPRSxJQUVqREEsRUFBR1MsR0FBUSxLQUNIRyxVQUNMNUQsRUFFTCxJQUNHMEQsSUFDQUMsR0FDUSxZQUFSSCxJQUFzQlQsR0FDZCxVQUFSUyxJQUFvQkosRUFDckIsQ0FDQSxJQUFJVSxFQUFxQixJQUFJTCxHQUN6Qk0sRUFBTWQsRUFDUnpELEVBQ0FpRSxFQUNBLEdBQUdELElBQ0gsU0FBeUJRLEVBQWNDLEVBQVFDLEVBQUtDLEVBQU1DLEdBQ3hELE9BQUlILEVBQU9oQixPQUFTSixFQUNkYSxJQUF3QlUsRUFJbkIsQ0FBRTNDLE1BQU0sRUFBTWxELE1BQU91RixFQUFtQnJHLEtBQUt3RyxFQUFRQyxFQUFLQyxJQUU1RCxDQUFFMUMsTUFBTSxFQUFNbEQsTUFBT3lGLEVBQWF2RyxLQUFLeUcsRUFBS0QsRUFBUUUsSUFFdEQsQ0FBRTFDLE1BQU0sTUFHZjRDLEVBQVFOLEVBQUksR0FDWk8sRUFBT1AsRUFBSSxHQUVmdEIsRUFBUzNDLE9BQU9aLFVBQVdzRSxFQUFLYSxHQUNoQzNCLEVBQUs2QixPQUFPckYsVUFBV3VFLEVBQWtCLEdBQVYxRCxFQUczQixTQUFVeUUsRUFBUUMsR0FBTyxPQUFPSCxFQUFLN0csS0FBSytHLEVBQVE5RCxLQUFNK0QsSUFHeEQsU0FBVUQsR0FBVSxPQUFPRixFQUFLN0csS0FBSytHLEVBQVE5RCxXQVEvQyxPQUNBLFNBQVVyRCxFQUFRRCxFQUFTRixHQUVqQyxJQUFJMkUsRUFBVzNFLEVBQW9CLFFBQy9CaUYsRUFBV2pGLEVBQW9CLFFBQVFpRixTQUV2Q0MsRUFBS1AsRUFBU00sSUFBYU4sRUFBU00sRUFBU0UsZUFDakRoRixFQUFPRCxRQUFVLFNBQVVvRCxHQUN6QixPQUFPNEIsRUFBS0QsRUFBU0UsY0FBYzdCLEdBQU0sS0FNckMsT0FDQSxTQUFVbkQsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXdILEVBQU14SCxFQUFvQixRQUMxQnlILEVBQU16SCxFQUFvQixPQUFwQkEsQ0FBNEIsZUFFbEMwSCxFQUFrRCxhQUE1Q0YsRUFBSSxXQUFjLE9BQU9uQixVQUFyQixJQVNkbEcsRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsSUFBSWdCLEVBQUdxRCxFQUFHQyxFQUNWLFlBQWM5RSxJQUFQUSxFQUFtQixZQUFxQixPQUFQQSxFQUFjLE9BRU4saUJBQXBDcUUsRUFWRCxTQUFVckUsRUFBSTNCLEdBQ3pCLElBQ0UsT0FBTzJCLEVBQUczQixHQUNWLE1BQU9rRyxLQU9PQyxDQUFPeEQsRUFBSXhELE9BQU93QyxHQUFLbUUsSUFBb0JFLEVBRXZERCxFQUFNRixFQUFJbEQsR0FFTSxXQUFmc0QsRUFBSUosRUFBSWxELEtBQXNDLG1CQUFaQSxFQUFFeUQsT0FBdUIsWUFBY0gsSUFNMUUsT0FDQSxTQUFVekgsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXNDLEVBQVV0QyxFQUFvQixRQUNsQ0csRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsT0FBT3hDLE9BQU93QixFQUFRZ0IsTUFNbEIsT0FDQSxTQUFVbkQsRUFBUUQsR0FHeEJDLEVBQU9ELFFBQVUsU0FBVW9ELEdBQ3pCLEdBQVVSLE1BQU5RLEVBQWlCLE1BQU0wQixVQUFVLHlCQUEyQjFCLEdBQ2hFLE9BQU9BLElBTUgsT0FDQSxTQUFVbkQsRUFBUUQsR0FFeEJDLEVBQU9ELFFBQVUsU0FBVTZGLEdBQ3pCLElBQ0UsUUFBU0EsSUFDVCxNQUFPOEIsR0FDUCxPQUFPLEtBT0wsT0FDQSxTQUFVMUgsRUFBUUQsRUFBU0YsR0FFakMsSUFBSTBELEVBQVMxRCxFQUFvQixRQUM3QndGLEVBQU94RixFQUFvQixRQUMzQmdJLEVBQU1oSSxFQUFvQixRQUMxQmlJLEVBQU1qSSxFQUFvQixPQUFwQkEsQ0FBNEIsT0FDbENrSSxFQUFZbEksRUFBb0IsUUFFaENtSSxHQUFPLEdBQUtELEdBQVcxRCxNQURYLFlBR2hCeEUsRUFBb0IsUUFBUW9JLGNBQWdCLFNBQVU5RSxHQUNwRCxPQUFPNEUsRUFBVTNILEtBQUsrQyxLQUd2Qm5ELEVBQU9ELFFBQVUsU0FBVW9FLEVBQUczQyxFQUFLa0QsRUFBS3dELEdBQ3ZDLElBQUlDLEVBQTJCLG1CQUFQekQsRUFDcEJ5RCxJQUFZTixFQUFJbkQsRUFBSyxTQUFXVyxFQUFLWCxFQUFLLE9BQVFsRCxJQUNsRDJDLEVBQUUzQyxLQUFTa0QsSUFDWHlELElBQVlOLEVBQUluRCxFQUFLb0QsSUFBUXpDLEVBQUtYLEVBQUtvRCxFQUFLM0QsRUFBRTNDLEdBQU8sR0FBSzJDLEVBQUUzQyxHQUFPd0csRUFBSUksS0FBSzNGLE9BQU9qQixNQUNuRjJDLElBQU1aLEVBQ1JZLEVBQUUzQyxHQUFPa0QsRUFDQ3dELEVBR0QvRCxFQUFFM0MsR0FDWDJDLEVBQUUzQyxHQUFPa0QsRUFFVFcsRUFBS2xCLEVBQUczQyxFQUFLa0QsV0FMTlAsRUFBRTNDLEdBQ1Q2RCxFQUFLbEIsRUFBRzNDLEVBQUtrRCxPQU9kMkQsU0FBU3hHLFVBdkJJLFlBdUJrQixXQUNoQyxNQUFzQixtQkFBUndCLE1BQXNCQSxLQUFLeUUsSUFBUUMsRUFBVTNILEtBQUtpRCxVQU01RCxPQUNBLFNBQVVyRCxFQUFRRCxFQUFTRixHQUVqQyxJQUFJeUksRUFBUXpJLEVBQW9CLE9BQXBCQSxDQUE0QixPQUNwQzBJLEVBQU0xSSxFQUFvQixRQUMxQm1CLEVBQVNuQixFQUFvQixRQUFRbUIsT0FDckN3SCxFQUE4QixtQkFBVnhILEdBRVRoQixFQUFPRCxRQUFVLFNBQVVTLEdBQ3hDLE9BQU84SCxFQUFNOUgsS0FBVThILEVBQU05SCxHQUMzQmdJLEdBQWN4SCxFQUFPUixLQUFVZ0ksRUFBYXhILEVBQVN1SCxHQUFLLFVBQVkvSCxNQUdqRThILE1BQVFBLEdBS1gsT0FDQSxTQUFVdEksRUFBUUQsR0FFeEJDLEVBQU9ELFNBQVUsR0FLWCxPQUNBLFNBQVVDLEVBQVFELEdBRXhCLElBQUk0RSxFQUFXLEdBQUdBLFNBRWxCM0UsRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsT0FBT3dCLEVBQVN2RSxLQUFLK0MsR0FBSUwsTUFBTSxHQUFJLEtBTS9CLE9BQ0EsU0FBVTlDLEVBQVFELEVBQVNGLEdBRWpDLGFBR0EsSUFBSXlFLEVBQVV6RSxFQUFvQixRQUM5QjRJLEVBQVU1SSxFQUFvQixRQUdsQ3lFLEVBQVFBLEVBQVFvRSxFQUFJcEUsRUFBUXFFLEVBQUk5SSxFQUFvQixPQUFwQkEsQ0FGakIsWUFFd0QsU0FBVSxDQUMvRStJLFNBQVUsU0FBa0JDLEdBQzFCLFNBQVVKLEVBQVFwRixLQUFNd0YsRUFKYixZQUtSQyxRQUFRRCxFQUFjM0MsVUFBVXhELE9BQVMsRUFBSXdELFVBQVUsUUFBS3ZELE9BTzdELE9BQ0EsU0FBVTNDLEVBQVFELEVBQVNGLEdBRWpDLGFBRUEsSUFBSWtKLEVBQVVsSixFQUFvQixRQUM5QnlFLEVBQVV6RSxFQUFvQixRQUM5QnVGLEVBQVd2RixFQUFvQixRQUMvQndGLEVBQU94RixFQUFvQixRQUMzQm1KLEVBQVluSixFQUFvQixRQUNoQ29KLEVBQWNwSixFQUFvQixRQUNsQ3FKLEVBQWlCckosRUFBb0IsUUFDckNzSixFQUFpQnRKLEVBQW9CLFFBQ3JDdUosRUFBV3ZKLEVBQW9CLE9BQXBCQSxDQUE0QixZQUN2Q3dKLElBQVUsR0FBR0MsTUFBUSxRQUFVLEdBQUdBLFFBS2xDQyxFQUFhLFdBQWMsT0FBT2xHLE1BRXRDckQsRUFBT0QsUUFBVSxTQUFVeUosRUFBTUMsRUFBTUMsRUFBYUMsRUFBTUMsRUFBU0MsRUFBUUMsR0FDekViLEVBQVlTLEVBQWFELEVBQU1FLEdBQy9CLElBZUlJLEVBQVN2SSxFQUFLd0ksRUFmZEMsRUFBWSxTQUFVQyxHQUN4QixJQUFLYixHQUFTYSxLQUFRQyxFQUFPLE9BQU9BLEVBQU1ELEdBQzFDLE9BQVFBLEdBQ04sSUFWSyxPQVdMLElBVk8sU0FVTSxPQUFPLFdBQW9CLE9BQU8sSUFBSVIsRUFBWXJHLEtBQU02RyxJQUNyRSxPQUFPLFdBQXFCLE9BQU8sSUFBSVIsRUFBWXJHLEtBQU02RyxLQUV6RDVDLEVBQU1tQyxFQUFPLFlBQ2JXLEVBZE8sVUFjTVIsRUFDYlMsR0FBYSxFQUNiRixFQUFRWCxFQUFLM0gsVUFDYnlJLEVBQVVILEVBQU1mLElBQWFlLEVBbkJqQixlQW1CdUNQLEdBQVdPLEVBQU1QLEdBQ3BFVyxFQUFXRCxHQUFXTCxFQUFVTCxHQUNoQ1ksRUFBV1osRUFBV1EsRUFBd0JILEVBQVUsV0FBckJNLE9BQWtDNUgsRUFDckU4SCxFQUFxQixTQUFSaEIsR0FBa0JVLEVBQU1PLFNBQXFCSixFQXdCOUQsR0FyQklHLElBQ0ZULEVBQW9CYixFQUFlc0IsRUFBV3JLLEtBQUssSUFBSW9KLE9BQzdCN0ksT0FBT2tCLFdBQWFtSSxFQUFrQkwsT0FFOURULEVBQWVjLEVBQW1CMUMsR0FBSyxHQUVsQ3lCLEdBQWlELG1CQUEvQmlCLEVBQWtCWixJQUF5Qi9ELEVBQUsyRSxFQUFtQlosRUFBVUcsSUFJcEdhLEdBQWNFLEdBakNQLFdBaUNrQkEsRUFBUTlKLE9BQ25DNkosR0FBYSxFQUNiRSxFQUFXLFdBQW9CLE9BQU9ELEVBQVFsSyxLQUFLaUQsUUFHL0MwRixJQUFXZSxJQUFZVCxJQUFTZ0IsR0FBZUYsRUFBTWYsSUFDekQvRCxFQUFLOEUsRUFBT2YsRUFBVW1CLEdBR3hCdkIsRUFBVVMsR0FBUWMsRUFDbEJ2QixFQUFVMUIsR0FBT2lDLEVBQ2JLLEVBTUYsR0FMQUcsRUFBVSxDQUNSWSxPQUFRUCxFQUFhRyxFQUFXTixFQTlDekIsVUErQ1BYLEtBQU1PLEVBQVNVLEVBQVdOLEVBaERyQixRQWlETFMsUUFBU0YsR0FFUFYsRUFBUSxJQUFLdEksS0FBT3VJLEVBQ2hCdkksS0FBTzJJLEdBQVEvRSxFQUFTK0UsRUFBTzNJLEVBQUt1SSxFQUFRdkksU0FDN0M4QyxFQUFRQSxFQUFRb0UsRUFBSXBFLEVBQVFxRSxHQUFLVSxHQUFTZ0IsR0FBYVosRUFBTU0sR0FFdEUsT0FBT0EsSUFNSCxPQUNBLFNBQVUvSixFQUFRRCxFQUFTRixHQUdqQyxJQUFJK0ssRUFBVy9LLEVBQW9CLFFBQy9CZ0wsRUFBUWhMLEVBQW9CLFFBRWhDQSxFQUFvQixPQUFwQkEsQ0FBNEIsUUFBUSxXQUNsQyxPQUFPLFNBQWNzRCxHQUNuQixPQUFPMEgsRUFBTUQsRUFBU3pILFNBT3BCLE9BQ0EsU0FBVW5ELEVBQVFELEVBQVNGLEdBRWpDLElBQUlpTCxFQUFLakwsRUFBb0IsUUFDekJxRixFQUFhckYsRUFBb0IsUUFDckNHLEVBQU9ELFFBQVVGLEVBQW9CLFFBQVUsU0FBVThCLEVBQVFILEVBQUtOLEdBQ3BFLE9BQU80SixFQUFHM0YsRUFBRXhELEVBQVFILEVBQUswRCxFQUFXLEVBQUdoRSxLQUNyQyxTQUFVUyxFQUFRSCxFQUFLTixHQUV6QixPQURBUyxFQUFPSCxHQUFPTixFQUNQUyxJQU1ILE9BQ0EsU0FBVTNCLEVBQVFELEVBQVNGLEdBRWpDLElBQUlpRixFQUFXakYsRUFBb0IsUUFBUWlGLFNBQzNDOUUsRUFBT0QsUUFBVStFLEdBQVlBLEVBQVNpRyxpQkFLaEMsT0FDQSxTQUFVL0ssRUFBUUQsRUFBU0YsR0FHakMsSUFBSXdILEVBQU14SCxFQUFvQixRQUU5QkcsRUFBT0QsUUFBVVksT0FBTyxLQUFLcUsscUJBQXFCLEdBQUtySyxPQUFTLFNBQVV3QyxHQUN4RSxNQUFrQixVQUFYa0UsRUFBSWxFLEdBQWtCQSxFQUFHa0IsTUFBTSxJQUFNMUQsT0FBT3dDLEtBTS9DLE9BQ0EsU0FBVW5ELEVBQVFELEdBRXhCQSxFQUFRb0YsRUFBSSxHQUFHNkYsc0JBS1QsT0FDQSxTQUFVaEwsRUFBUUQsRUFBU0YsR0FFakMsSUFBSWlMLEVBQUtqTCxFQUFvQixRQUN6QnFGLEVBQWFyRixFQUFvQixRQUNyQ0csRUFBT0QsUUFBVUYsRUFBb0IsUUFBVSxTQUFVOEIsRUFBUUgsRUFBS04sR0FDcEUsT0FBTzRKLEVBQUczRixFQUFFeEQsRUFBUUgsRUFBSzBELEVBQVcsRUFBR2hFLEtBQ3JDLFNBQVVTLEVBQVFILEVBQUtOLEdBRXpCLE9BREFTLEVBQU9ILEdBQU9OLEVBQ1BTLElBTUgsT0FDQSxTQUFVM0IsRUFBUUQsRUFBU0YsR0FHakMsSUFBSW9MLEVBQVVwTCxFQUFvQixRQUM5QnNDLEVBQVV0QyxFQUFvQixRQUNsQ0csRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsT0FBTzhILEVBQVE5SSxFQUFRZ0IsTUFNbkIsS0FDQSxTQUFVbkQsRUFBUUQsRUFBU0YsR0FHakMsSUFBSW1KLEVBQVluSixFQUFvQixRQUNoQ3VKLEVBQVd2SixFQUFvQixPQUFwQkEsQ0FBNEIsWUFDdkNxTCxFQUFhQyxNQUFNdEosVUFFdkI3QixFQUFPRCxRQUFVLFNBQVVvRCxHQUN6QixZQUFjUixJQUFQUSxJQUFxQjZGLEVBQVVtQyxRQUFVaEksR0FBTStILEVBQVc5QixLQUFjakcsS0FNM0UsT0FDQSxTQUFVbkQsRUFBUUQsR0FHeEIsSUFBSXFMLEVBQU94SCxLQUFLd0gsS0FDWkMsRUFBUXpILEtBQUt5SCxNQUNqQnJMLEVBQU9ELFFBQVUsU0FBVW9ELEdBQ3pCLE9BQU9tSSxNQUFNbkksR0FBTUEsR0FBTSxHQUFLQSxFQUFLLEVBQUlrSSxFQUFRRCxHQUFNakksS0FNakQsT0FDQSxTQUFVbkQsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXdILEVBQU14SCxFQUFvQixRQUMxQnlILEVBQU16SCxFQUFvQixPQUFwQkEsQ0FBNEIsZUFFbEMwSCxFQUFrRCxhQUE1Q0YsRUFBSSxXQUFjLE9BQU9uQixVQUFyQixJQVNkbEcsRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsSUFBSWdCLEVBQUdxRCxFQUFHQyxFQUNWLFlBQWM5RSxJQUFQUSxFQUFtQixZQUFxQixPQUFQQSxFQUFjLE9BRU4saUJBQXBDcUUsRUFWRCxTQUFVckUsRUFBSTNCLEdBQ3pCLElBQ0UsT0FBTzJCLEVBQUczQixHQUNWLE1BQU9rRyxLQU9PQyxDQUFPeEQsRUFBSXhELE9BQU93QyxHQUFLbUUsSUFBb0JFLEVBRXZERCxFQUFNRixFQUFJbEQsR0FFTSxXQUFmc0QsRUFBSUosRUFBSWxELEtBQXNDLG1CQUFaQSxFQUFFeUQsT0FBdUIsWUFBY0gsSUFNMUUsS0FDQSxTQUFVekgsRUFBUUQsR0FHeEIsSUFBSXFMLEVBQU94SCxLQUFLd0gsS0FDWkMsRUFBUXpILEtBQUt5SCxNQUNqQnJMLEVBQU9ELFFBQVUsU0FBVW9ELEdBQ3pCLE9BQU9tSSxNQUFNbkksR0FBTUEsR0FBTSxHQUFLQSxFQUFLLEVBQUlrSSxFQUFRRCxHQUFNakksS0FNakQsT0FDQSxTQUFVbkQsRUFBUUQsRUFBU0YsR0FFakMsSUFBSTBMLEVBQU0xTCxFQUFvQixRQUFRc0YsRUFDbEMwQyxFQUFNaEksRUFBb0IsUUFDMUJ5SCxFQUFNekgsRUFBb0IsT0FBcEJBLENBQTRCLGVBRXRDRyxFQUFPRCxRQUFVLFNBQVVvRCxFQUFJcUksRUFBS0MsR0FDOUJ0SSxJQUFPMEUsRUFBSTFFLEVBQUtzSSxFQUFPdEksRUFBS0EsRUFBR3RCLFVBQVd5RixJQUFNaUUsRUFBSXBJLEVBQUltRSxFQUFLLENBQUVvRSxjQUFjLEVBQU14SyxNQUFPc0ssTUFNMUYsS0FDQSxTQUFVeEwsRUFBUUQsR0FFeEJDLEVBQU9ELFFBQVUsU0FBVTRMLEVBQVF6SyxHQUNqQyxNQUFPLENBQ0xMLGFBQXVCLEVBQVQ4SyxHQUNkRCxlQUF5QixFQUFUQyxHQUNoQkMsV0FBcUIsRUFBVEQsR0FDWnpLLE1BQU9BLEtBT0wsT0FDQSxTQUFVbEIsRUFBUUQsRUFBU0YsR0FFakNBLEVBQW9CLFFBQ3BCQSxFQUFvQixRQUNwQkcsRUFBT0QsUUFBVUYsRUFBb0IsU0FLL0IsT0FDQSxTQUFVRyxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxJQUtYLE9BQ0EsU0FBVUMsRUFBUUQsRUFBU0YsR0FFakNHLEVBQU9ELFFBQVVGLEVBQW9CLFNBSS9CLE9BQ0EsU0FBVUcsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXNDLEVBQVV0QyxFQUFvQixRQUNsQ0csRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsT0FBT3hDLE9BQU93QixFQUFRZ0IsTUFNbEIsT0FDQSxTQUFVbkQsRUFBUUQsRUFBU0YsR0FFakMsSUFBSXVKLEVBQVd2SixFQUFvQixPQUFwQkEsQ0FBNEIsWUFDdkNnTSxHQUFlLEVBRW5CLElBQ0UsSUFBSUMsRUFBUSxDQUFDLEdBQUcxQyxLQUNoQjBDLEVBQWMsT0FBSSxXQUFjRCxHQUFlLEdBRS9DVixNQUFNWSxLQUFLRCxHQUFPLFdBQWMsTUFBTSxLQUN0QyxNQUFPcEUsSUFFVDFILEVBQU9ELFFBQVUsU0FBVTZGLEVBQU1vRyxHQUMvQixJQUFLQSxJQUFnQkgsRUFBYyxPQUFPLEVBQzFDLElBQUkzRCxHQUFPLEVBQ1gsSUFDRSxJQUFJK0QsRUFBTSxDQUFDLEdBQ1BDLEVBQU9ELEVBQUk3QyxLQUNmOEMsRUFBS3ZDLEtBQU8sV0FBYyxNQUFPLENBQUV2RixLQUFNOEQsR0FBTyxJQUNoRCtELEVBQUk3QyxHQUFZLFdBQWMsT0FBTzhDLEdBQ3JDdEcsRUFBS3FHLEdBQ0wsTUFBT3ZFLElBQ1QsT0FBT1EsSUFNSCxPQUNBLFNBQVVsSSxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxTQUFVcUUsRUFBTWxELEdBQy9CLE1BQU8sQ0FBRUEsTUFBT0EsRUFBT2tELE9BQVFBLEtBTTNCLEtBQ0EsU0FBVXBFLEVBQVFELEVBQVNGLEdBRWpDLElBQUlzTSxFQUFRdE0sRUFBb0IsT0FBcEJBLENBQTRCLFNBQ3hDRyxFQUFPRCxRQUFVLFNBQVVvRyxHQUN6QixJQUFJUixFQUFLLElBQ1QsSUFDRSxNQUFNUSxHQUFLUixHQUNYLE1BQU8rQixHQUNQLElBRUUsT0FEQS9CLEVBQUd3RyxJQUFTLEdBQ0osTUFBTWhHLEdBQUtSLEdBQ25CLE1BQU9SLEtBQ1QsT0FBTyxJQU1MLEtBQ0EsU0FBVW5GLEVBQVFELEVBQVNGLEdBRWpDLElBQUl5SSxFQUFRekksRUFBb0IsT0FBcEJBLENBQTRCLE9BQ3BDMEksRUFBTTFJLEVBQW9CLFFBQzFCbUIsRUFBU25CLEVBQW9CLFFBQVFtQixPQUNyQ3dILEVBQThCLG1CQUFWeEgsR0FFVGhCLEVBQU9ELFFBQVUsU0FBVVMsR0FDeEMsT0FBTzhILEVBQU05SCxLQUFVOEgsRUFBTTlILEdBQzNCZ0ksR0FBY3hILEVBQU9SLEtBQVVnSSxFQUFheEgsRUFBU3VILEdBQUssVUFBWS9ILE1BR2pFOEgsTUFBUUEsR0FLWCxLQUNBLFNBQVV0SSxFQUFRRCxFQUFTRixHQUVqQ0csRUFBT0QsUUFBVUYsRUFBb0IsU0FJL0IsT0FDQSxTQUFVRyxFQUFRRCxFQUFTRixHQUVqQ0EsRUFBb0IsUUFDcEJHLEVBQU9ELFFBQVVGLEVBQW9CLFFBQVFjLE9BQU95TCxRQUs5QyxPQUNBLFNBQVVwTSxFQUFRRCxFQUFTRixHQUVqQyxhQUdBLElBYU13TSxFQUNBQyxFQWRGQyxFQUFjMU0sRUFBb0IsUUFFbEMyTSxFQUFhdEYsT0FBT3JGLFVBQVUrRCxLQUk5QjZHLEVBQWdCaEssT0FBT1osVUFBVWlFLFFBRWpDNEcsRUFBY0YsRUFJZEcsR0FDRU4sRUFBTSxJQUNOQyxFQUFNLE1BQ1ZFLEVBQVdwTSxLQUFLaU0sRUFBSyxLQUNyQkcsRUFBV3BNLEtBQUtrTSxFQUFLLEtBQ00sSUFBcEJELEVBQWMsV0FBK0IsSUFBcEJDLEVBQWMsV0FJNUNNLE9BQXVDakssSUFBdkIsT0FBT2lELEtBQUssSUFBSSxJQUV4QitHLEdBQTRCQyxLQUd0Q0YsRUFBYyxTQUFjN0YsR0FDMUIsSUFDSWdHLEVBQVdDLEVBQVFDLEVBQU85TSxFQUQxQjBGLEVBQUt0QyxLQXdCVCxPQXJCSXVKLElBQ0ZFLEVBQVMsSUFBSTVGLE9BQU8sSUFBTXZCLEVBQUdxSCxPQUFTLFdBQVlULEVBQVluTSxLQUFLdUYsS0FFakVnSCxJQUEwQkUsRUFBWWxILEVBQWEsV0FFdkRvSCxFQUFRUCxFQUFXcE0sS0FBS3VGLEVBQUlrQixHQUV4QjhGLEdBQTRCSSxJQUM5QnBILEVBQWEsVUFBSUEsRUFBR3BDLE9BQVN3SixFQUFNOUosTUFBUThKLEVBQU0sR0FBR3JLLE9BQVNtSyxHQUUzREQsR0FBaUJHLEdBQVNBLEVBQU1ySyxPQUFTLEdBSTNDK0osRUFBY3JNLEtBQUsyTSxFQUFNLEdBQUlELEdBQVEsV0FDbkMsSUFBSzdNLEVBQUksRUFBR0EsRUFBSWlHLFVBQVV4RCxPQUFTLEVBQUd6QyxTQUNmMEMsSUFBakJ1RCxVQUFVakcsS0FBa0I4TSxFQUFNOU0sUUFBSzBDLE1BSzFDb0ssSUFJWC9NLEVBQU9ELFFBQVUyTSxHQUtYLE9BQ0EsU0FBVTFNLEVBQVFELEVBQVNGLEdBR2pDLElBQUlnSSxFQUFNaEksRUFBb0IsUUFDMUIrSyxFQUFXL0ssRUFBb0IsUUFDL0JvTixFQUFXcE4sRUFBb0IsT0FBcEJBLENBQTRCLFlBQ3ZDcU4sRUFBY3ZNLE9BQU9rQixVQUV6QjdCLEVBQU9ELFFBQVVZLE9BQU93SSxnQkFBa0IsU0FBVWhGLEdBRWxELE9BREFBLEVBQUl5RyxFQUFTekcsR0FDVDBELEVBQUkxRCxFQUFHOEksR0FBa0I5SSxFQUFFOEksR0FDSCxtQkFBakI5SSxFQUFFcUMsYUFBNkJyQyxhQUFhQSxFQUFFcUMsWUFDaERyQyxFQUFFcUMsWUFBWTNFLFVBQ2RzQyxhQUFheEQsT0FBU3VNLEVBQWMsT0FNekMsT0FDQSxTQUFVbE4sRUFBUUQsRUFBU0YsR0FFakMsYUFFQSxJQUFJc04sRUFBTXROLEVBQW9CLFFBQzFCeUUsRUFBVXpFLEVBQW9CLFFBQzlCK0ssRUFBVy9LLEVBQW9CLFFBQy9CTyxFQUFPUCxFQUFvQixRQUMzQnVOLEVBQWN2TixFQUFvQixRQUNsQ3dOLEVBQVd4TixFQUFvQixRQUMvQnlOLEVBQWlCek4sRUFBb0IsUUFDckMwTixFQUFZMU4sRUFBb0IsUUFFcEN5RSxFQUFRQSxFQUFRdEIsRUFBSXNCLEVBQVFxRSxHQUFLOUksRUFBb0IsT0FBcEJBLEVBQTRCLFNBQVVxTSxHQUFRZixNQUFNWSxLQUFLRyxNQUFXLFFBQVMsQ0FFNUdILEtBQU0sU0FBY3lCLEdBQ2xCLElBT0k5SyxFQUFRWSxFQUFRbUssRUFBTUMsRUFQdEJ2SixFQUFJeUcsRUFBUzRDLEdBQ2JHLEVBQW1CLG1CQUFSdEssS0FBcUJBLEtBQU84SCxNQUN2Q3lDLEVBQU8xSCxVQUFVeEQsT0FDakJtTCxFQUFRRCxFQUFPLEVBQUkxSCxVQUFVLFFBQUt2RCxFQUNsQ21MLE9BQW9CbkwsSUFBVmtMLEVBQ1Y1SyxFQUFRLEVBQ1I4SyxFQUFTUixFQUFVcEosR0FJdkIsR0FGSTJKLElBQVNELEVBQVFWLEVBQUlVLEVBQU9ELEVBQU8sRUFBSTFILFVBQVUsUUFBS3ZELEVBQVcsSUFFdkRBLE1BQVZvTCxHQUF5QkosR0FBS3hDLE9BQVNpQyxFQUFZVyxHQU1yRCxJQUFLekssRUFBUyxJQUFJcUssRUFEbEJqTCxFQUFTMkssRUFBU2xKLEVBQUV6QixTQUNTQSxFQUFTTyxFQUFPQSxJQUMzQ3FLLEVBQWVoSyxFQUFRTCxFQUFPNkssRUFBVUQsRUFBTTFKLEVBQUVsQixHQUFRQSxHQUFTa0IsRUFBRWxCLFNBTnJFLElBQUt5SyxFQUFXSyxFQUFPM04sS0FBSytELEdBQUliLEVBQVMsSUFBSXFLLElBQU9GLEVBQU9DLEVBQVMvRCxRQUFRdkYsS0FBTW5CLElBQ2hGcUssRUFBZWhLLEVBQVFMLEVBQU82SyxFQUFVMU4sRUFBS3NOLEVBQVVHLEVBQU8sQ0FBQ0osRUFBS3ZNLE1BQU8rQixJQUFRLEdBQVF3SyxFQUFLdk0sT0FTcEcsT0FEQW9DLEVBQU9aLE9BQVNPLEVBQ1RLLE1BT0wsT0FDQSxTQUFVdEQsRUFBUUQsRUFBU0YsR0FFakNBLEVBQW9CLFFBQ3BCQSxFQUFvQixRQUNwQkcsRUFBT0QsUUFBVUYsRUFBb0IsU0FLL0IsS0FDQSxTQUFVRyxFQUFRRCxFQUFTRixHQUVqQyxJQUFJbU8sRUFBT25PLEVBQW9CLFFBQzNCMEQsRUFBUzFELEVBQW9CLFFBRTdCeUksRUFBUS9FLEVBREMsd0JBQ2tCQSxFQURsQixzQkFDbUMsS0FFL0N2RCxFQUFPRCxRQUFVLFNBQVV5QixFQUFLTixHQUMvQixPQUFPb0gsRUFBTTlHLEtBQVM4RyxFQUFNOUcsUUFBaUJtQixJQUFWekIsRUFBc0JBLEVBQVEsTUFDaEUsV0FBWSxJQUFJK00sS0FBSyxDQUN0QkMsUUFBU0YsRUFBS0UsUUFDZDlNLEtBQU12QixFQUFvQixRQUFVLE9BQVMsU0FDN0NzTyxVQUFXLDBDQU1QLEtBQ0EsU0FBVW5PLEVBQVFELEVBQVNGLEdBRWpDLElBQUl1TyxFQUFTdk8sRUFBb0IsT0FBcEJBLENBQTRCLFFBQ3JDMEksRUFBTTFJLEVBQW9CLFFBQzlCRyxFQUFPRCxRQUFVLFNBQVV5QixHQUN6QixPQUFPNE0sRUFBTzVNLEtBQVM0TSxFQUFPNU0sR0FBTytHLEVBQUkvRyxNQU1yQyxPQUNBLFNBQVV4QixFQUFRRCxHQUV4QixJQUFJaU8sRUFBT2hPLEVBQU9ELFFBQVUsQ0FBRW1PLFFBQVMsU0FDckIsaUJBQVBHLE1BQWlCQSxJQUFNTCxJQUs1QixPQUNBLFNBQVVoTyxFQUFRRCxFQUFTRixHQUlqQyxJQUFJeU8sRUFBWXpPLEVBQW9CLFFBQ2hDd04sRUFBV3hOLEVBQW9CLFFBQy9CME8sRUFBa0IxTyxFQUFvQixRQUMxQ0csRUFBT0QsUUFBVSxTQUFVeU8sR0FDekIsT0FBTyxTQUFVQyxFQUFPQyxFQUFJQyxHQUMxQixJQUdJek4sRUFIQWlELEVBQUltSyxFQUFVRyxHQUNkL0wsRUFBUzJLLEVBQVNsSixFQUFFekIsUUFDcEJPLEVBQVFzTCxFQUFnQkksRUFBV2pNLEdBSXZDLEdBQUk4TCxHQUFlRSxHQUFNQSxHQUFJLEtBQU9oTSxFQUFTTyxHQUczQyxJQUZBL0IsRUFBUWlELEVBQUVsQixPQUVHL0IsRUFBTyxPQUFPLE9BRXRCLEtBQU13QixFQUFTTyxFQUFPQSxJQUFTLElBQUl1TCxHQUFldkwsS0FBU2tCLElBQzVEQSxFQUFFbEIsS0FBV3lMLEVBQUksT0FBT0YsR0FBZXZMLEdBQVMsRUFDcEQsT0FBUXVMLElBQWdCLEtBT3hCLE9BQ0EsU0FBVXhPLEVBQVFELEVBQVNGLEdBRWpDLElBQUkwRCxFQUFTMUQsRUFBb0IsUUFDN0JtTyxFQUFPbk8sRUFBb0IsUUFDM0J3RixFQUFPeEYsRUFBb0IsUUFDM0J1RixFQUFXdkYsRUFBb0IsUUFDL0JzTixFQUFNdE4sRUFBb0IsUUFHMUJ5RSxFQUFVLFNBQVVzSyxFQUFNcE8sRUFBTXdNLEdBQ2xDLElBUUl4TCxFQUFLcU4sRUFBS0MsRUFBS0MsRUFSZkMsRUFBWUosRUFBT3RLLEVBQVFxRSxFQUMzQnNHLEVBQVlMLEVBQU90SyxFQUFRNEssRUFDM0JDLEVBQVlQLEVBQU90SyxFQUFRdEIsRUFDM0JvTSxFQUFXUixFQUFPdEssRUFBUW9FLEVBQzFCMkcsRUFBVVQsRUFBT3RLLEVBQVFtRCxFQUN6QjZILEVBQVNMLEVBQVkxTCxFQUFTNEwsRUFBWTVMLEVBQU8vQyxLQUFVK0MsRUFBTy9DLEdBQVEsS0FBTytDLEVBQU8vQyxJQUFTLElBQWEsVUFDOUdULEVBQVVrUCxFQUFZakIsRUFBT0EsRUFBS3hOLEtBQVV3TixFQUFLeE4sR0FBUSxJQUN6RCtPLEVBQVd4UCxFQUFpQixZQUFNQSxFQUFpQixVQUFJLElBRzNELElBQUt5QixLQUREeU4sSUFBV2pDLEVBQVN4TSxHQUNad00sRUFJVjhCLElBRkFELEdBQU9HLEdBQWFNLFFBQTBCM00sSUFBaEIyTSxFQUFPOU4sSUFFeEI4TixFQUFTdEMsR0FBUXhMLEdBRTlCdU4sRUFBTU0sR0FBV1IsRUFBTTFCLEVBQUkyQixFQUFLdkwsR0FBVTZMLEdBQTBCLG1CQUFQTixFQUFvQjNCLEVBQUk5RSxTQUFTakksS0FBTTBPLEdBQU9BLEVBRXZHUSxHQUFRbEssRUFBU2tLLEVBQVE5TixFQUFLc04sRUFBS0YsRUFBT3RLLEVBQVFrTCxHQUVsRHpQLEVBQVF5QixJQUFRc04sR0FBS3pKLEVBQUt0RixFQUFTeUIsRUFBS3VOLEdBQ3hDSyxHQUFZRyxFQUFTL04sSUFBUXNOLElBQUtTLEVBQVMvTixHQUFPc04sSUFHMUR2TCxFQUFPeUssS0FBT0EsRUFFZDFKLEVBQVFxRSxFQUFJLEVBQ1pyRSxFQUFRNEssRUFBSSxFQUNaNUssRUFBUXRCLEVBQUksRUFDWnNCLEVBQVFvRSxFQUFJLEVBQ1pwRSxFQUFRbUQsRUFBSSxHQUNabkQsRUFBUW1MLEVBQUksR0FDWm5MLEVBQVFrTCxFQUFJLEdBQ1psTCxFQUFRb0wsRUFBSSxJQUNaMVAsRUFBT0QsUUFBVXVFLEdBS1gsT0FDQSxTQUFVdEUsRUFBUUQsRUFBU0YsR0FFakNHLEVBQU9ELFFBQVVGLEVBQW9CLFNBSS9CLE9BQ0EsU0FBVUcsRUFBUUQsRUFBU0YsR0FFakMsYUFHQSxJQUFJOFAsRUFBVTlQLEVBQW9CLFFBQzlCK1AsRUFBYzFJLE9BQU9yRixVQUFVK0QsS0FJbkM1RixFQUFPRCxRQUFVLFNBQVUyUCxFQUFHMU0sR0FDNUIsSUFBSTRDLEVBQU84SixFQUFFOUosS0FDYixHQUFvQixtQkFBVEEsRUFBcUIsQ0FDOUIsSUFBSXRDLEVBQVNzQyxFQUFLeEYsS0FBS3NQLEVBQUcxTSxHQUMxQixHQUFzQixpQkFBWE0sRUFDVCxNQUFNLElBQUl1QixVQUFVLHNFQUV0QixPQUFPdkIsRUFFVCxHQUFtQixXQUFmcU0sRUFBUUQsR0FDVixNQUFNLElBQUk3SyxVQUFVLCtDQUV0QixPQUFPK0ssRUFBWXhQLEtBQUtzUCxFQUFHMU0sS0FNdkIsT0FDQSxTQUFVaEQsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXdILEVBQU14SCxFQUFvQixRQUU5QkcsRUFBT0QsUUFBVVksT0FBTyxLQUFLcUsscUJBQXFCLEdBQUtySyxPQUFTLFNBQVV3QyxHQUN4RSxNQUFrQixVQUFYa0UsRUFBSWxFLEdBQWtCQSxFQUFHa0IsTUFBTSxJQUFNMUQsT0FBT3dDLEtBTS9DLE9BQ0EsU0FBVW5ELEVBQVFELEdBRXhCLElBQUk4UCxFQUFLLEVBQ0xDLEVBQUtsTSxLQUFLbU0sU0FDZC9QLEVBQU9ELFFBQVUsU0FBVXlCLEdBQ3pCLE1BQU8sVUFBVXdPLFlBQWVyTixJQUFSbkIsRUFBb0IsR0FBS0EsRUFBSyxRQUFTcU8sRUFBS0MsR0FBSW5MLFNBQVMsT0FNN0UsT0FDQSxTQUFVM0UsRUFBUUQsRUFBU0YsR0FFakMsSUFBSTBELEVBQVMxRCxFQUFvQixRQUM3Qm1PLEVBQU9uTyxFQUFvQixRQUMzQnNOLEVBQU10TixFQUFvQixRQUMxQndGLEVBQU94RixFQUFvQixRQUMzQmdJLEVBQU1oSSxFQUFvQixRQUcxQnlFLEVBQVUsU0FBVXNLLEVBQU1wTyxFQUFNd00sR0FDbEMsSUFTSXhMLEVBQUtxTixFQUFLQyxFQVRWRSxFQUFZSixFQUFPdEssRUFBUXFFLEVBQzNCc0csRUFBWUwsRUFBT3RLLEVBQVE0SyxFQUMzQkMsRUFBWVAsRUFBT3RLLEVBQVF0QixFQUMzQm9NLEVBQVdSLEVBQU90SyxFQUFRb0UsRUFDMUIyRyxFQUFVVCxFQUFPdEssRUFBUW1ELEVBQ3pCd0ksRUFBVXJCLEVBQU90SyxFQUFRbUwsRUFDekIxUCxFQUFVa1AsRUFBWWpCLEVBQU9BLEVBQUt4TixLQUFVd04sRUFBS3hOLEdBQVEsSUFDekQrTyxFQUFXeFAsRUFBaUIsVUFDNUJ1UCxFQUFTTCxFQUFZMUwsRUFBUzRMLEVBQVk1TCxFQUFPL0MsSUFBUytDLEVBQU8vQyxJQUFTLElBQWEsVUFHM0YsSUFBS2dCLEtBRER5TixJQUFXakMsRUFBU3hNLEdBQ1p3TSxHQUVWNkIsR0FBT0csR0FBYU0sUUFBMEIzTSxJQUFoQjJNLEVBQU85TixLQUMxQnFHLEVBQUk5SCxFQUFTeUIsS0FFeEJzTixFQUFNRCxFQUFNUyxFQUFPOU4sR0FBT3dMLEVBQU94TCxHQUVqQ3pCLEVBQVF5QixHQUFPeU4sR0FBbUMsbUJBQWZLLEVBQU85TixHQUFxQndMLEVBQU94TCxHQUVwRTZOLEdBQVdSLEVBQU0xQixFQUFJMkIsRUFBS3ZMLEdBRTFCME0sR0FBV1gsRUFBTzlOLElBQVFzTixFQUFNLFNBQVduQixHQUMzQyxJQUFJaEYsRUFBSSxTQUFVcEcsRUFBR0MsRUFBR2xDLEdBQ3RCLEdBQUkrQyxnQkFBZ0JzSyxFQUFHLENBQ3JCLE9BQVF6SCxVQUFVeEQsUUFDaEIsS0FBSyxFQUFHLE9BQU8sSUFBSWlMLEVBQ25CLEtBQUssRUFBRyxPQUFPLElBQUlBLEVBQUVwTCxHQUNyQixLQUFLLEVBQUcsT0FBTyxJQUFJb0wsRUFBRXBMLEVBQUdDLEdBQ3hCLE9BQU8sSUFBSW1MLEVBQUVwTCxFQUFHQyxFQUFHbEMsR0FDckIsT0FBT3FOLEVBQUUxSCxNQUFNNUMsS0FBTTZDLFlBR3pCLE9BREF5QyxFQUFXLFVBQUlnRixFQUFXLFVBQ25CaEYsRUFYeUIsQ0FhL0JtRyxHQUFPTSxHQUEwQixtQkFBUE4sRUFBb0IzQixFQUFJOUUsU0FBU2pJLEtBQU0wTyxHQUFPQSxFQUV2RU0sS0FDRHJQLEVBQVFtUSxVQUFZblEsRUFBUW1RLFFBQVUsS0FBSzFPLEdBQU9zTixFQUUvQ0YsRUFBT3RLLEVBQVFvTCxHQUFLSCxJQUFhQSxFQUFTL04sSUFBTTZELEVBQUtrSyxFQUFVL04sRUFBS3NOLE1BSzlFeEssRUFBUXFFLEVBQUksRUFDWnJFLEVBQVE0SyxFQUFJLEVBQ1o1SyxFQUFRdEIsRUFBSSxFQUNac0IsRUFBUW9FLEVBQUksRUFDWnBFLEVBQVFtRCxFQUFJLEdBQ1puRCxFQUFRbUwsRUFBSSxHQUNabkwsRUFBUWtMLEVBQUksR0FDWmxMLEVBQVFvTCxFQUFJLElBQ1oxUCxFQUFPRCxRQUFVdUUsR0FLWCxLQUNBLFNBQVV0RSxFQUFRRCxFQUFTRixHQUVqQyxhQUdBLElBQUl5RSxFQUFVekUsRUFBb0IsUUFDOUJzUSxFQUFZdFEsRUFBb0IsT0FBcEJBLEVBQTRCLEdBRTVDeUUsRUFBUUEsRUFBUW9FLEVBQUcsUUFBUyxDQUMxQkUsU0FBVSxTQUFrQjhGLEdBQzFCLE9BQU95QixFQUFVOU0sS0FBTXFMLEVBQUl4SSxVQUFVeEQsT0FBUyxFQUFJd0QsVUFBVSxRQUFLdkQsTUFJckU5QyxFQUFvQixPQUFwQkEsQ0FBNEIsYUFLdEIsS0FDQSxTQUFVRyxFQUFRRCxFQUFTRixHQUdqQyxJQUFJb0wsRUFBVXBMLEVBQW9CLFFBQzlCc0MsRUFBVXRDLEVBQW9CLFFBQ2xDRyxFQUFPRCxRQUFVLFNBQVVvRCxHQUN6QixPQUFPOEgsRUFBUTlJLEVBQVFnQixNQU1uQixPQUNBLFNBQVVuRCxFQUFRRCxHQUV4QixJQUFJK0IsRUFBaUIsR0FBR0EsZUFDeEI5QixFQUFPRCxRQUFVLFNBQVVvRCxFQUFJM0IsR0FDN0IsT0FBT00sRUFBZTFCLEtBQUsrQyxFQUFJM0IsS0FNM0IsT0FDQSxTQUFVeEIsRUFBUUQsRUFBU0YsR0FHakMsSUFBSTJFLEVBQVczRSxFQUFvQixRQUduQ0csRUFBT0QsUUFBVSxTQUFVb0QsRUFBSUgsR0FDN0IsSUFBS3dCLEVBQVNyQixHQUFLLE9BQU9BLEVBQzFCLElBQUlzQixFQUFJQyxFQUNSLEdBQUkxQixHQUFrQyxtQkFBckJ5QixFQUFLdEIsRUFBR3dCLFlBQTRCSCxFQUFTRSxFQUFNRCxFQUFHckUsS0FBSytDLElBQU0sT0FBT3VCLEVBQ3pGLEdBQWdDLG1CQUFwQkQsRUFBS3RCLEVBQUd5QixXQUEyQkosRUFBU0UsRUFBTUQsRUFBR3JFLEtBQUsrQyxJQUFNLE9BQU91QixFQUNuRixJQUFLMUIsR0FBa0MsbUJBQXJCeUIsRUFBS3RCLEVBQUd3QixZQUE0QkgsRUFBU0UsRUFBTUQsRUFBR3JFLEtBQUsrQyxJQUFNLE9BQU91QixFQUMxRixNQUFNRyxVQUFVLDZDQU1aLE9BQ0EsU0FBVTdFLEVBQVFELEdBRXhCLElBQUk0RSxFQUFXLEdBQUdBLFNBRWxCM0UsRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsT0FBT3dCLEVBQVN2RSxLQUFLK0MsR0FBSUwsTUFBTSxHQUFJLEtBTS9CLE9BQ0EsU0FBVTlDLEVBQVFELEVBQVNGLEdBRWpDQSxFQUFvQixRQVlwQixJQVhBLElBQUkwRCxFQUFTMUQsRUFBb0IsUUFDN0J3RixFQUFPeEYsRUFBb0IsUUFDM0JtSixFQUFZbkosRUFBb0IsUUFDaEN1USxFQUFnQnZRLEVBQW9CLE9BQXBCQSxDQUE0QixlQUU1Q3dRLEVBQWUsd2JBSVVoTSxNQUFNLEtBRTFCcEUsRUFBSSxFQUFHQSxFQUFJb1EsRUFBYTNOLE9BQVF6QyxJQUFLLENBQzVDLElBQUl3SixFQUFPNEcsRUFBYXBRLEdBQ3BCcVEsRUFBYS9NLEVBQU9rRyxHQUNwQlUsRUFBUW1HLEdBQWNBLEVBQVd6TyxVQUNqQ3NJLElBQVVBLEVBQU1pRyxJQUFnQi9LLEVBQUs4RSxFQUFPaUcsRUFBZTNHLEdBQy9EVCxFQUFVUyxHQUFRVCxFQUFVbUMsUUFNeEIsT0FDQSxTQUFVbkwsRUFBUUQsRUFBU0YsR0FFakMsSUFBSXFDLEVBQVlyQyxFQUFvQixRQUNoQ3NDLEVBQVV0QyxFQUFvQixRQUdsQ0csRUFBT0QsUUFBVSxTQUFVcUMsR0FDekIsT0FBTyxTQUFVQyxFQUFNQyxHQUNyQixJQUdJQyxFQUFHQyxFQUhIUixFQUFJUyxPQUFPTixFQUFRRSxJQUNuQnBDLEVBQUlpQyxFQUFVSSxHQUNkcEMsRUFBSThCLEVBQUVVLE9BRVYsT0FBSXpDLEVBQUksR0FBS0EsR0FBS0MsRUFBVWtDLEVBQVksUUFBS08sR0FDN0NKLEVBQUlQLEVBQUVZLFdBQVczQyxJQUNOLE9BQVVzQyxFQUFJLE9BQVV0QyxFQUFJLElBQU1DLElBQU1zQyxFQUFJUixFQUFFWSxXQUFXM0MsRUFBSSxJQUFNLE9BQVV1QyxFQUFJLE1BQ3hGSixFQUFZSixFQUFFYSxPQUFPNUMsR0FBS3NDLEVBQzFCSCxFQUFZSixFQUFFYyxNQUFNN0MsRUFBR0EsRUFBSSxHQUEyQnVDLEVBQUksT0FBekJELEVBQUksT0FBVSxJQUFxQixTQU90RSxLQUNBLFNBQVV2QyxFQUFRRCxHQUd4QixJQUFJd0QsRUFBU3ZELEVBQU9ELFFBQTJCLG9CQUFWd1EsUUFBeUJBLE9BQU8zTSxNQUFRQSxLQUN6RTJNLE9BQXdCLG9CQUFSQyxNQUF1QkEsS0FBSzVNLE1BQVFBLEtBQU80TSxLQUUzRG5JLFNBQVMsY0FBVEEsR0FDYyxpQkFBUG9JLE1BQWlCQSxJQUFNbE4sSUFLNUIsT0FDQSxTQUFVdkQsRUFBUUQsRUFBU0YsR0FFakNHLEVBQU9ELFFBQVVGLEVBQW9CLFNBSS9CLE9BQ0EsU0FBVUcsRUFBUUQsRUFBU0YsR0FFakMsSUFBSXFDLEVBQVlyQyxFQUFvQixRQUNoQzhELEVBQU1DLEtBQUtELElBQ1hFLEVBQU1ELEtBQUtDLElBQ2Y3RCxFQUFPRCxRQUFVLFNBQVVrRCxFQUFPUCxHQUVoQyxPQURBTyxFQUFRZixFQUFVZSxJQUNILEVBQUlVLEVBQUlWLEVBQVFQLEVBQVEsR0FBS21CLEVBQUlaLEVBQU9QLEtBTW5ELE9BQ0EsU0FBVTFDLEVBQVFELEVBQVNGLEdBRWpDRyxFQUFPRCxTQUFXRixFQUFvQixVQUFZQSxFQUFvQixPQUFwQkEsRUFBNEIsV0FDNUUsT0FBK0csR0FBeEdjLE9BQU9DLGVBQWVmLEVBQW9CLE9BQXBCQSxDQUE0QixPQUFRLElBQUssQ0FBRWlCLElBQUssV0FBYyxPQUFPLEtBQVF5QixNQU10RyxPQUNBLFNBQVV2QyxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsR0FBaUIsbUJBQU5BLEVBQWtCLE1BQU0wQixVQUFVMUIsRUFBSyx1QkFDbEQsT0FBT0EsSUFNSCxPQUNBLFNBQVVuRCxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxTQUFVNkYsR0FDekIsSUFDRSxRQUFTQSxJQUNULE1BQU84QixHQUNQLE9BQU8sS0FPTCxPQUNBLFNBQVUxSCxFQUFRRCxFQUFTRixHQUVqQyxJQUFJOFAsRUFBVTlQLEVBQW9CLFFBQzlCdUosRUFBV3ZKLEVBQW9CLE9BQXBCQSxDQUE0QixZQUN2Q21KLEVBQVluSixFQUFvQixRQUNwQ0csRUFBT0QsUUFBVUYsRUFBb0IsUUFBUTZRLGtCQUFvQixTQUFVdk4sR0FDekUsR0FBVVIsTUFBTlEsRUFBaUIsT0FBT0EsRUFBR2lHLElBQzFCakcsRUFBRyxlQUNINkYsRUFBVTJHLEVBQVF4TSxNQU1uQixPQUNBLFNBQVVuRCxFQUFRRCxFQUFTRixHQUVqQyxJQUFJdUQsRUFBV3ZELEVBQW9CLFFBQy9CaUIsRUFBTWpCLEVBQW9CLFFBQzlCRyxFQUFPRCxRQUFVRixFQUFvQixRQUFROFEsWUFBYyxTQUFVeE4sR0FDbkUsSUFBSTRLLEVBQVNqTixFQUFJcUMsR0FDakIsR0FBcUIsbUJBQVY0SyxFQUFzQixNQUFNbEosVUFBVTFCLEVBQUsscUJBQ3RELE9BQU9DLEVBQVMySyxFQUFPM04sS0FBSytDLE1BTXhCLE9BQ0EsU0FBVW5ELEVBQVFELEVBQVNGLEdBRWpDLElBQUlpTCxFQUFLakwsRUFBb0IsUUFDekJ1RCxFQUFXdkQsRUFBb0IsUUFDL0IrUSxFQUFVL1EsRUFBb0IsUUFFbENHLEVBQU9ELFFBQVVGLEVBQW9CLFFBQVVjLE9BQU9rUSxpQkFBbUIsU0FBMEIxTSxFQUFHMk0sR0FDcEcxTixFQUFTZSxHQUtULElBSkEsSUFHSXVFLEVBSEFZLEVBQU9zSCxFQUFRRSxHQUNmcE8sRUFBUzRHLEVBQUs1RyxPQUNkekMsRUFBSSxFQUVEeUMsRUFBU3pDLEdBQUc2SyxFQUFHM0YsRUFBRWhCLEVBQUd1RSxFQUFJWSxFQUFLckosS0FBTTZRLEVBQVdwSSxJQUNyRCxPQUFPdkUsSUFNSCxLQUNBLFNBQVVuRSxFQUFRRCxHQUV4QixJQUFJaU8sRUFBT2hPLEVBQU9ELFFBQVUsQ0FBRW1PLFFBQVMsU0FDckIsaUJBQVBHLE1BQWlCQSxJQUFNTCxJQUs1QixLQUNBLFNBQVVoTyxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxjQUtYLE9BQ0EsU0FBVUMsRUFBUUQsRUFBU0YsR0FFakMsSUFBSXVELEVBQVd2RCxFQUFvQixRQUMvQmtSLEVBQWlCbFIsRUFBb0IsUUFDckNtUixFQUFjblIsRUFBb0IsUUFDbENpTCxFQUFLbkssT0FBT0MsZUFFaEJiLEVBQVFvRixFQUFJdEYsRUFBb0IsUUFBVWMsT0FBT0MsZUFBaUIsU0FBd0J1RCxFQUFHdUUsRUFBR3VJLEdBSTlGLEdBSEE3TixFQUFTZSxHQUNUdUUsRUFBSXNJLEVBQVl0SSxHQUFHLEdBQ25CdEYsRUFBUzZOLEdBQ0xGLEVBQWdCLElBQ2xCLE9BQU9qRyxFQUFHM0csRUFBR3VFLEVBQUd1SSxHQUNoQixNQUFPdkosSUFDVCxHQUFJLFFBQVN1SixHQUFjLFFBQVNBLEVBQVksTUFBTXBNLFVBQVUsNEJBRWhFLE1BREksVUFBV29NLElBQVk5TSxFQUFFdUUsR0FBS3VJLEVBQVcvUCxPQUN0Q2lELElBTUgsT0FDQSxTQUFVbkUsRUFBUUQsRUFBU0YsR0FFakNBLEVBQW9CLFFBQ3BCRyxFQUFPRCxRQUFVRixFQUFvQixRQUFRYyxPQUFPMkksTUFLOUMsT0FDQSxTQUFVdEosRUFBUUQsRUFBU0YsR0FHakNHLEVBQU9ELFNBQVdGLEVBQW9CLE9BQXBCQSxFQUE0QixXQUM1QyxPQUErRSxHQUF4RWMsT0FBT0MsZUFBZSxHQUFJLElBQUssQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUXlCLE1BTXRFLE9BQ0EsU0FBVXZDLEVBQVFELEVBQVNGLEdBRWpDLGFBRUEsSUFBSTBCLEVBQVMxQixFQUFvQixRQUM3QnFSLEVBQWFyUixFQUFvQixRQUNqQ3FKLEVBQWlCckosRUFBb0IsUUFDckNtSyxFQUFvQixHQUd4Qm5LLEVBQW9CLE9BQXBCQSxDQUE0Qm1LLEVBQW1CbkssRUFBb0IsT0FBcEJBLENBQTRCLGFBQWEsV0FBYyxPQUFPd0QsUUFFN0dyRCxFQUFPRCxRQUFVLFNBQVUySixFQUFhRCxFQUFNRSxHQUM1Q0QsRUFBWTdILFVBQVlOLEVBQU95SSxFQUFtQixDQUFFTCxLQUFNdUgsRUFBVyxFQUFHdkgsS0FDeEVULEVBQWVRLEVBQWFELEVBQU8sZUFNL0IsS0FDQSxTQUFVekosRUFBUUQsRUFBU0YsR0FHakMsSUFBSXdILEVBQU14SCxFQUFvQixRQUM5QkcsRUFBT0QsUUFBVW9MLE1BQU01RyxTQUFXLFNBQWlCNkMsR0FDakQsTUFBbUIsU0FBWkMsRUFBSUQsS0FNUCxLQUNBLFNBQVVwSCxFQUFRRCxFQUFTRixHQUVqQ0csRUFBT0QsUUFBVUYsRUFBb0IsU0FLL0IsS0FDQSxTQUFVRyxFQUFRRCxFQUFTRixHQUVqQyxhQUdBLElBQUkrUSxFQUFVL1EsRUFBb0IsUUFDOUJzUixFQUFPdFIsRUFBb0IsUUFDM0J1UixFQUFNdlIsRUFBb0IsUUFDMUIrSyxFQUFXL0ssRUFBb0IsUUFDL0JvTCxFQUFVcEwsRUFBb0IsUUFDOUJ3UixFQUFVMVEsT0FBT3lMLE9BR3JCcE0sRUFBT0QsU0FBV3NSLEdBQVd4UixFQUFvQixPQUFwQkEsRUFBNEIsV0FDdkQsSUFBSXlSLEVBQUksR0FDSjdKLEVBQUksR0FFSnpFLEVBQUloQyxTQUNKdVEsRUFBSSx1QkFHUixPQUZBRCxFQUFFdE8sR0FBSyxFQUNQdU8sRUFBRWxOLE1BQU0sSUFBSW1OLFNBQVEsU0FBVUMsR0FBS2hLLEVBQUVnSyxHQUFLQSxLQUNkLEdBQXJCSixFQUFRLEdBQUlDLEdBQUd0TyxJQUFXckMsT0FBTzJJLEtBQUsrSCxFQUFRLEdBQUk1SixJQUFJVyxLQUFLLEtBQU9tSixLQUN0RSxTQUFnQmpDLEVBQVF0QyxHQU0zQixJQUxBLElBQUl4RixFQUFJb0QsRUFBUzBFLEdBQ2IxQixFQUFPMUgsVUFBVXhELE9BQ2pCTyxFQUFRLEVBQ1J5TyxFQUFhUCxFQUFLaE0sRUFDbEJ3TSxFQUFTUCxFQUFJak0sRUFDVnlJLEVBQU8zSyxHQU1aLElBTEEsSUFJSXpCLEVBSkF3QixFQUFJaUksRUFBUS9FLFVBQVVqRCxNQUN0QnFHLEVBQU9vSSxFQUFhZCxFQUFRNU4sR0FBR2dOLE9BQU8wQixFQUFXMU8sSUFBTTROLEVBQVE1TixHQUMvRE4sRUFBUzRHLEVBQUs1RyxPQUNka1AsRUFBSSxFQUVEbFAsRUFBU2tQLEdBQU9ELEVBQU92UixLQUFLNEMsRUFBR3hCLEVBQU04SCxFQUFLc0ksUUFBT3BLLEVBQUVoRyxHQUFPd0IsRUFBRXhCLElBQ25FLE9BQU9nRyxHQUNQNkosR0FLRSxLQUNBLFNBQVVyUixFQUFRRCxFQUFTRixHQUVqQyxJQUFJeUUsRUFBVXpFLEVBQW9CLFFBRWxDeUUsRUFBUUEsRUFBUXRCLEVBQUcsU0FBVSxDQUFFekIsT0FBUTFCLEVBQW9CLFdBS3JELE9BQ0EsU0FBVUcsRUFBUUQsRUFBU0YsR0FFakMsSUFBSThQLEVBQVU5UCxFQUFvQixRQUM5QnVKLEVBQVd2SixFQUFvQixPQUFwQkEsQ0FBNEIsWUFDdkNtSixFQUFZbkosRUFBb0IsUUFDcENHLEVBQU9ELFFBQVVGLEVBQW9CLFFBQVFnUyxXQUFhLFNBQVUxTyxHQUNsRSxJQUFJZ0IsRUFBSXhELE9BQU93QyxHQUNmLFlBQXVCUixJQUFoQndCLEVBQUVpRixJQUNKLGVBQWdCakYsR0FFaEI2RSxFQUFVbEgsZUFBZTZOLEVBQVF4TCxNQU1sQyxPQUNBLFNBQVVuRSxFQUFRRCxHQUV4QkEsRUFBUW9GLEVBQUl4RSxPQUFPbVIsdUJBS2IsT0FDQSxTQUFVOVIsRUFBUUQsRUFBU0YsR0FHakMsSUFBSWtTLEVBQVlsUyxFQUFvQixRQUNwQ0csRUFBT0QsUUFBVSxTQUFVMEUsRUFBSXBDLEVBQU1LLEdBRW5DLEdBREFxUCxFQUFVdE4sUUFDRzlCLElBQVROLEVBQW9CLE9BQU9vQyxFQUMvQixPQUFRL0IsR0FDTixLQUFLLEVBQUcsT0FBTyxTQUFVSCxHQUN2QixPQUFPa0MsRUFBR3JFLEtBQUtpQyxFQUFNRSxJQUV2QixLQUFLLEVBQUcsT0FBTyxTQUFVQSxFQUFHQyxHQUMxQixPQUFPaUMsRUFBR3JFLEtBQUtpQyxFQUFNRSxFQUFHQyxJQUUxQixLQUFLLEVBQUcsT0FBTyxTQUFVRCxFQUFHQyxFQUFHbEMsR0FDN0IsT0FBT21FLEVBQUdyRSxLQUFLaUMsRUFBTUUsRUFBR0MsRUFBR2xDLElBRy9CLE9BQU8sV0FDTCxPQUFPbUUsRUFBR3dCLE1BQU01RCxFQUFNNkQsY0FPcEIsT0FDQSxTQUFVbEcsRUFBUUQsRUFBU0YsR0FHakMsSUFBSW1TLEVBQWNuUyxFQUFvQixPQUFwQkEsQ0FBNEIsZUFDMUNxTCxFQUFhQyxNQUFNdEosVUFDUWMsTUFBM0J1SSxFQUFXOEcsSUFBMkJuUyxFQUFvQixPQUFwQkEsQ0FBNEJxTCxFQUFZOEcsRUFBYSxJQUMvRmhTLEVBQU9ELFFBQVUsU0FBVXlCLEdBQ3pCMEosRUFBVzhHLEdBQWF4USxJQUFPLElBTTNCLE9BQ0EsU0FBVXhCLEVBQVFELEVBQVNGLEdBR2pDLElBQUlxQyxFQUFZckMsRUFBb0IsUUFDaENnRSxFQUFNRCxLQUFLQyxJQUNmN0QsRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsT0FBT0EsRUFBSyxFQUFJVSxFQUFJM0IsRUFBVWlCLEdBQUssa0JBQW9CLElBTW5ELE9BQ0EsU0FBVW5ELEVBQVFELEVBQVNGLEdBR2pDRyxFQUFPRCxTQUFXRixFQUFvQixPQUFwQkEsRUFBNEIsV0FDNUMsT0FBK0UsR0FBeEVjLE9BQU9DLGVBQWUsR0FBSSxJQUFLLENBQUVFLElBQUssV0FBYyxPQUFPLEtBQVF5QixNQU10RSxLQUNBLFNBQVV2QyxFQUFRRCxFQUFTRixHQUdqQyxJQUFJdUQsRUFBV3ZELEVBQW9CLFFBQy9Cb1MsRUFBTXBTLEVBQW9CLFFBQzFCcVMsRUFBY3JTLEVBQW9CLFFBQ2xDb04sRUFBV3BOLEVBQW9CLE9BQXBCQSxDQUE0QixZQUN2Q3NTLEVBQVEsYUFJUkMsRUFBYSxXQUVmLElBSUlDLEVBSkFDLEVBQVN6UyxFQUFvQixPQUFwQkEsQ0FBNEIsVUFDckNJLEVBQUlpUyxFQUFZeFAsT0FjcEIsSUFWQTRQLEVBQU9DLE1BQU1DLFFBQVUsT0FDdkIzUyxFQUFvQixRQUFRNFMsWUFBWUgsR0FDeENBLEVBQU9JLElBQU0sZUFHYkwsRUFBaUJDLEVBQU9LLGNBQWM3TixVQUN2QjhOLE9BQ2ZQLEVBQWVRLE1BQU1DLHVDQUNyQlQsRUFBZVUsUUFDZlgsRUFBYUMsRUFBZTFKLEVBQ3JCMUksWUFBWW1TLEVBQW9CLFVBQUVGLEVBQVlqUyxJQUNyRCxPQUFPbVMsS0FHVHBTLEVBQU9ELFFBQVVZLE9BQU9ZLFFBQVUsU0FBZ0I0QyxFQUFHMk0sR0FDbkQsSUFBSXhOLEVBUUosT0FQVSxPQUFOYSxHQUNGZ08sRUFBZSxVQUFJL08sRUFBU2UsR0FDNUJiLEVBQVMsSUFBSTZPLEVBQ2JBLEVBQWUsVUFBSSxLQUVuQjdPLEVBQU8ySixHQUFZOUksR0FDZGIsRUFBUzhPLFNBQ016UCxJQUFmbU8sRUFBMkJ4TixFQUFTMk8sRUFBSTNPLEVBQVF3TixLQU1uRCxLQUNBLFNBQVU5USxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxFQUFRLElBSW5CLEtBQ0EsU0FBVUMsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXlFLEVBQVV6RSxFQUFvQixRQUVsQ3lFLEVBQVFBLEVBQVF0QixFQUFJc0IsRUFBUXFFLEVBQUcsU0FBVSxDQUFFeUQsT0FBUXZNLEVBQW9CLFdBS2pFLEtBQ0EsU0FBVUcsRUFBUUQsRUFBU0YsR0FFakMsYUFHQSxJQUFJdUQsRUFBV3ZELEVBQW9CLFFBQy9CK0ssRUFBVy9LLEVBQW9CLFFBQy9Cd04sRUFBV3hOLEVBQW9CLFFBQy9CcUMsRUFBWXJDLEVBQW9CLFFBQ2hDbVQsRUFBcUJuVCxFQUFvQixRQUN6Q29ULEVBQWFwVCxFQUFvQixRQUNqQzhELEVBQU1DLEtBQUtELElBQ1hFLEVBQU1ELEtBQUtDLElBQ1h3SCxFQUFRekgsS0FBS3lILE1BQ2I2SCxFQUF1Qiw0QkFDdkJDLEVBQWdDLG9CQU9wQ3RULEVBQW9CLE9BQXBCQSxDQUE0QixVQUFXLEdBQUcsU0FBVXNDLEVBQVNpUixFQUFTQyxFQUFVQyxHQUM5RSxNQUFPLENBR0wsU0FBaUJDLEVBQWFDLEdBQzVCLElBQUlyUCxFQUFJaEMsRUFBUWtCLE1BQ1pvQixFQUFvQjlCLE1BQWY0USxPQUEyQjVRLEVBQVk0USxFQUFZSCxHQUM1RCxZQUFjelEsSUFBUDhCLEVBQ0hBLEVBQUdyRSxLQUFLbVQsRUFBYXBQLEVBQUdxUCxHQUN4QkgsRUFBU2pULEtBQUtxQyxPQUFPMEIsR0FBSW9QLEVBQWFDLElBSTVDLFNBQVU1TSxFQUFRNE0sR0FDaEIsSUFBSUMsRUFBTUgsRUFBZ0JELEVBQVV6TSxFQUFRdkQsS0FBTW1RLEdBQ2xELEdBQUlDLEVBQUlyUCxLQUFNLE9BQU9xUCxFQUFJdlMsTUFFekIsSUFBSXdTLEVBQUt0USxFQUFTd0QsR0FDZDVELEVBQUlQLE9BQU9ZLE1BQ1hzUSxFQUE0QyxtQkFBakJILEVBQzFCRyxJQUFtQkgsRUFBZS9RLE9BQU8rUSxJQUM5QyxJQUFJalEsRUFBU21RLEVBQUduUSxPQUNoQixHQUFJQSxFQUFRLENBQ1YsSUFBSXFRLEVBQWNGLEVBQUd4USxRQUNyQndRLEVBQUc3RyxVQUFZLEVBR2pCLElBREEsSUFBSWdILEVBQVUsS0FDRCxDQUNYLElBQUl2USxFQUFTMlAsRUFBV1MsRUFBSTFRLEdBQzVCLEdBQWUsT0FBWE0sRUFBaUIsTUFFckIsR0FEQXVRLEVBQVE1RixLQUFLM0ssSUFDUkMsRUFBUSxNQUVJLEtBREZkLE9BQU9hLEVBQU8sTUFDUm9RLEVBQUc3RyxVQUFZbUcsRUFBbUJoUSxFQUFHcUssRUFBU3FHLEVBQUc3RyxXQUFZK0csSUFJcEYsSUFGQSxJQXhDd0J6USxFQXdDcEIyUSxFQUFvQixHQUNwQkMsRUFBcUIsRUFDaEI5VCxFQUFJLEVBQUdBLEVBQUk0VCxFQUFRblIsT0FBUXpDLElBQUssQ0FDdkNxRCxFQUFTdVEsRUFBUTVULEdBU2pCLElBUkEsSUFBSStULEVBQVV2UixPQUFPYSxFQUFPLElBQ3hCMlEsRUFBV3RRLEVBQUlFLEVBQUkzQixFQUFVb0IsRUFBT0wsT0FBUUQsRUFBRU4sUUFBUyxHQUN2RHdSLEVBQVcsR0FNTnRDLEVBQUksRUFBR0EsRUFBSXRPLEVBQU9aLE9BQVFrUCxJQUFLc0MsRUFBU2pHLFVBbkR6Q3RMLEtBRGNRLEVBb0Q4Q0csRUFBT3NPLElBbkR2RHpPLEVBQUtWLE9BQU9VLElBb0RoQyxJQUFJZ1IsRUFBZ0I3USxFQUFPdUMsT0FDM0IsR0FBSThOLEVBQW1CLENBQ3JCLElBQUlTLEVBQWUsQ0FBQ0osR0FBU2hFLE9BQU9rRSxFQUFVRCxFQUFValIsUUFDbENMLElBQWxCd1IsR0FBNkJDLEVBQWFuRyxLQUFLa0csR0FDbkQsSUFBSUUsRUFBYzVSLE9BQU8rUSxFQUFhdk4sV0FBTXRELEVBQVd5UixTQUV2REMsRUFBY0MsRUFBZ0JOLEVBQVNoUixFQUFHaVIsRUFBVUMsRUFBVUMsRUFBZVgsR0FFM0VTLEdBQVlGLElBQ2RELEdBQXFCOVEsRUFBRUYsTUFBTWlSLEVBQW9CRSxHQUFZSSxFQUM3RE4sRUFBcUJFLEVBQVdELEVBQVF0UixRQUc1QyxPQUFPb1IsRUFBb0I5USxFQUFFRixNQUFNaVIsS0FLdkMsU0FBU08sRUFBZ0JOLEVBQVNuTixFQUFLb04sRUFBVUMsRUFBVUMsRUFBZUUsR0FDeEUsSUFBSUUsRUFBVU4sRUFBV0QsRUFBUXRSLE9BQzdCckMsRUFBSTZULEVBQVN4UixPQUNiOFIsRUFBVXJCLEVBS2QsWUFKc0J4USxJQUFsQndSLElBQ0ZBLEVBQWdCdkosRUFBU3VKLEdBQ3pCSyxFQUFVdEIsR0FFTEcsRUFBU2pULEtBQUtpVSxFQUFhRyxHQUFTLFNBQVV6SCxFQUFPMEgsR0FDMUQsSUFBSUMsRUFDSixPQUFRRCxFQUFHNVIsT0FBTyxJQUNoQixJQUFLLElBQUssTUFBTyxJQUNqQixJQUFLLElBQUssT0FBT21SLEVBQ2pCLElBQUssSUFBSyxPQUFPbk4sRUFBSS9ELE1BQU0sRUFBR21SLEdBQzlCLElBQUssSUFBSyxPQUFPcE4sRUFBSS9ELE1BQU15UixHQUMzQixJQUFLLElBQ0hHLEVBQVVQLEVBQWNNLEVBQUczUixNQUFNLEdBQUksSUFDckMsTUFDRixRQUNFLElBQUlwQixHQUFLK1MsRUFDVCxHQUFVLElBQU4vUyxFQUFTLE9BQU9xTCxFQUNwQixHQUFJckwsRUFBSXJCLEVBQUcsQ0FDVCxJQUFJOEUsRUFBSWtHLEVBQU0zSixFQUFJLElBQ2xCLE9BQVUsSUFBTnlELEVBQWdCNEgsRUFDaEI1SCxHQUFLOUUsT0FBOEJzQyxJQUFwQnVSLEVBQVMvTyxFQUFJLEdBQW1Cc1AsRUFBRzVSLE9BQU8sR0FBS3FSLEVBQVMvTyxFQUFJLEdBQUtzUCxFQUFHNVIsT0FBTyxHQUN2RmtLLEVBRVQySCxFQUFVUixFQUFTeFMsRUFBSSxHQUUzQixZQUFtQmlCLElBQVorUixFQUF3QixHQUFLQSxVQVFwQyxLQUNBLFNBQVUxVSxFQUFRRCxFQUFTRixHQUVqQ0csRUFBT0QsUUFBVUYsRUFBb0IsU0FJL0IsS0FDQSxTQUFVRyxFQUFRRCxFQUFTRixHQUVqQ0csRUFBT0QsUUFBVUYsRUFBb0IsU0FJL0IsS0FDQSxTQUFVRyxFQUFRRCxFQUFTRixHQUdqQyxJQUFJMkUsRUFBVzNFLEVBQW9CLFFBQy9Cd0gsRUFBTXhILEVBQW9CLFFBQzFCc00sRUFBUXRNLEVBQW9CLE9BQXBCQSxDQUE0QixTQUN4Q0csRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsSUFBSXdSLEVBQ0osT0FBT25RLEVBQVNyQixVQUFtQ1IsS0FBMUJnUyxFQUFXeFIsRUFBR2dKLE1BQTBCd0ksRUFBc0IsVUFBWHROLEVBQUlsRSxNQU01RSxLQUNBLFNBQVVuRCxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxTQUFVNEwsRUFBUXpLLEdBQ2pDLE1BQU8sQ0FDTEwsYUFBdUIsRUFBVDhLLEdBQ2RELGVBQXlCLEVBQVRDLEdBQ2hCQyxXQUFxQixFQUFURCxHQUNaekssTUFBT0EsS0FPTCxLQUNBLFNBQVVsQixFQUFRRCxFQUFTRixHQUVqQyxhQUVBLElBQUkyRixFQUFhM0YsRUFBb0IsUUFDckNBLEVBQW9CLE9BQXBCQSxDQUE0QixDQUMxQnlQLE9BQVEsU0FDUm5GLE9BQU8sRUFDUHlLLE9BQVFwUCxJQUFlLElBQUlJLE1BQzFCLENBQ0RBLEtBQU1KLEtBTUYsS0FDQSxTQUFVeEYsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXVELEVBQVd2RCxFQUFvQixRQUNuQ0csRUFBT0QsUUFBVSxTQUFVMk4sRUFBVWpKLEVBQUl2RCxFQUFPd0osR0FDOUMsSUFDRSxPQUFPQSxFQUFVakcsRUFBR3JCLEVBQVNsQyxHQUFPLEdBQUlBLEVBQU0sSUFBTXVELEVBQUd2RCxHQUV2RCxNQUFPd0csR0FDUCxJQUFJbU4sRUFBTW5ILEVBQWlCLE9BRTNCLFdBRFkvSyxJQUFSa1MsR0FBbUJ6UixFQUFTeVIsRUFBSXpVLEtBQUtzTixJQUNuQ2hHLEtBT0osS0FDQSxTQUFVMUgsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXFDLEVBQVlyQyxFQUFvQixRQUNoQ2dFLEVBQU1ELEtBQUtDLElBQ2Y3RCxFQUFPRCxRQUFVLFNBQVVvRCxHQUN6QixPQUFPQSxFQUFLLEVBQUlVLEVBQUkzQixFQUFVaUIsR0FBSyxrQkFBb0IsSUFNbkQsS0FDQSxTQUFVbkQsRUFBUUQsR0FFeEJDLEVBQU9ELFNBQVUsR0FLWCxLQUNBLFNBQVVDLEVBQVFELEdBR3hCQyxFQUFPRCxRQUFVLFNBQVVvRCxHQUN6QixHQUFVUixNQUFOUSxFQUFpQixNQUFNMEIsVUFBVSx5QkFBMkIxQixHQUNoRSxPQUFPQSxJQU1ILEtBQ0EsU0FBVW5ELEVBQVFELEVBQVNGLEdBSWpDLElBQUl5TyxFQUFZek8sRUFBb0IsUUFDaEN3TixFQUFXeE4sRUFBb0IsUUFDL0IwTyxFQUFrQjFPLEVBQW9CLFFBQzFDRyxFQUFPRCxRQUFVLFNBQVV5TyxHQUN6QixPQUFPLFNBQVVDLEVBQU9DLEVBQUlDLEdBQzFCLElBR0l6TixFQUhBaUQsRUFBSW1LLEVBQVVHLEdBQ2QvTCxFQUFTMkssRUFBU2xKLEVBQUV6QixRQUNwQk8sRUFBUXNMLEVBQWdCSSxFQUFXak0sR0FJdkMsR0FBSThMLEdBQWVFLEdBQU1BLEdBQUksS0FBT2hNLEVBQVNPLEdBRzNDLElBRkEvQixFQUFRaUQsRUFBRWxCLE9BRUcvQixFQUFPLE9BQU8sT0FFdEIsS0FBTXdCLEVBQVNPLEVBQU9BLElBQVMsSUFBSXVMLEdBQWV2TCxLQUFTa0IsSUFDNURBLEVBQUVsQixLQUFXeUwsRUFBSSxPQUFPRixHQUFldkwsR0FBUyxFQUNwRCxPQUFRdUwsSUFBZ0IsS0FPeEIsS0FDQSxTQUFVeE8sRUFBUUQsRUFBU0YsR0FFakMsYUFFQSxJQUFJaVYsRUFBbUJqVixFQUFvQixRQUN2QzROLEVBQU81TixFQUFvQixRQUMzQm1KLEVBQVluSixFQUFvQixRQUNoQ3lPLEVBQVl6TyxFQUFvQixRQU1wQ0csRUFBT0QsUUFBVUYsRUFBb0IsT0FBcEJBLENBQTRCc0wsTUFBTyxTQUFTLFNBQVVwSCxFQUFVbUcsR0FDL0U3RyxLQUFLVyxHQUFLc0ssRUFBVXZLLEdBQ3BCVixLQUFLWSxHQUFLLEVBQ1ZaLEtBQUswUixHQUFLN0ssS0FFVCxXQUNELElBQUkvRixFQUFJZCxLQUFLVyxHQUNUa0csRUFBTzdHLEtBQUswUixHQUNaOVIsRUFBUUksS0FBS1ksS0FDakIsT0FBS0UsR0FBS2xCLEdBQVNrQixFQUFFekIsUUFDbkJXLEtBQUtXLFFBQUtyQixFQUNIOEssRUFBSyxJQUVhQSxFQUFLLEVBQXBCLFFBQVJ2RCxFQUErQmpILEVBQ3ZCLFVBQVJpSCxFQUFpQy9GLEVBQUVsQixHQUN4QixDQUFDQSxFQUFPa0IsRUFBRWxCLE9BQ3hCLFVBR0grRixFQUFVZ00sVUFBWWhNLEVBQVVtQyxNQUVoQzJKLEVBQWlCLFFBQ2pCQSxFQUFpQixVQUNqQkEsRUFBaUIsWUFLWCxLQUNBLFNBQVU5VSxFQUFRRCxFQUFTRixHQUdqQyxJQUFJZ0wsRUFBUWhMLEVBQW9CLFFBQzVCcVMsRUFBY3JTLEVBQW9CLFFBRXRDRyxFQUFPRCxRQUFVWSxPQUFPMkksTUFBUSxTQUFjbkYsR0FDNUMsT0FBTzBHLEVBQU0xRyxFQUFHK04sS0FNWixLQUNBLFNBQVVsUyxFQUFRaVYsRUFBcUJwVixHQUU3QyxjQUM0QixTQUFTMEQsR0FBd0MxRCxFQUFvQlUsRUFBRTBVLEVBQXFCLEtBQUssV0FBYSxPQUFPQyxLQUNsSHJWLEVBQW9CVSxFQUFFMFUsRUFBcUIsS0FBSyxXQUFhLE9BQU9FLEtBQ3BFdFYsRUFBb0JVLEVBQUUwVSxFQUFxQixLQUFLLFdBQWEsT0FBT0csS0FDcEV2VixFQUFvQlUsRUFBRTBVLEVBQXFCLEtBQUssV0FBYSxPQUFPSSxLQUNSeFYsRUFBb0IsUUFBMUYsSUFFSXlWLEVBQStHelYsRUFBb0IsUUFDbkkwVixFQUFvSTFWLEVBQW9CNkIsRUFBRTRULEdBWW5MLElBQUlGLEVBUG9CLG9CQUFYN0UsT0FDRkEsT0FBTzZFLFFBR1Q3UixFQUFPNlIsUUFjaEIsSUFUZ0IzUSxFQUNWK1EsRUFRRkMsRUFBUSxTQUNSTixHQVZZMVEsRUFVTSxTQUFVb0MsR0FDOUIsT0FBT0EsRUFBSWYsUUFBUTJQLEdBQU8sU0FBVUMsRUFBR3BWLEdBQ3JDLE9BQU9BLEVBQUlBLEVBQUVxVixjQUFnQixPQVgzQkgsRUFBUUQsSUFBdUgsTUFFNUgsU0FBa0IxTyxHQUV2QixPQURVMk8sRUFBTTNPLEtBQ0QyTyxFQUFNM08sR0FBT3BDLEVBQUdvQyxNQVduQyxTQUFTd08sRUFBV08sR0FDUyxPQUF2QkEsRUFBS0MsZUFDUEQsRUFBS0MsY0FBY0MsWUFBWUYsR0FJbkMsU0FBU1YsRUFBYWEsRUFBWUgsRUFBTTNCLEdBQ3RDLElBQUkrQixFQUF1QixJQUFiL0IsRUFBaUI4QixFQUFXRSxTQUFTLEdBQUtGLEVBQVdFLFNBQVNoQyxFQUFXLEdBQUdpQyxZQUMxRkgsRUFBV0ksYUFBYVAsRUFBTUksTUFJSDVWLEtBQUtpRCxLQUFNeEQsRUFBb0IsVUFJdEQsS0FDQSxTQUFVRyxFQUFRRCxFQUFTRixHQUVqQ0csRUFBT0QsU0FBV0YsRUFBb0IsVUFBWUEsRUFBb0IsT0FBcEJBLEVBQTRCLFdBQzVFLE9BQStHLEdBQXhHYyxPQUFPQyxlQUFlZixFQUFvQixPQUFwQkEsQ0FBNEIsT0FBUSxJQUFLLENBQUVpQixJQUFLLFdBQWMsT0FBTyxLQUFReUIsTUFNdEcsS0FDQSxTQUFVdkMsRUFBUUQsR0FFeEIsSUFBSXFXLEVBR0pBLEVBQUksV0FDSCxPQUFPL1MsS0FESixHQUlKLElBRUMrUyxFQUFJQSxHQUFLLElBQUkvTixTQUFTLGNBQWIsR0FDUixNQUFPWCxHQUVjLGlCQUFYNkksU0FBcUI2RixFQUFJN0YsUUFPckN2USxFQUFPRCxRQUFVcVcsR0FLWCxLQUNBLFNBQVVwVyxFQUFRRCxFQUFTRixHQUVqQ0csRUFBT0QsUUFBVUYsRUFBb0IsU0FJL0IsS0FDQSxTQUFVRyxFQUFRRCxHQUV4QixJQUFJOFAsRUFBSyxFQUNMQyxFQUFLbE0sS0FBS21NLFNBQ2QvUCxFQUFPRCxRQUFVLFNBQVV5QixHQUN6QixNQUFPLFVBQVV3TyxZQUFlck4sSUFBUm5CLEVBQW9CLEdBQUtBLEVBQUssUUFBU3FPLEVBQUtDLEdBQUluTCxTQUFTLE9BTTdFLEtBQ0EsU0FBVTNFLEVBQVFELEVBQVNGLEdBRWpDLElBQUkyRSxFQUFXM0UsRUFBb0IsUUFDbkNHLEVBQU9ELFFBQVUsU0FBVW9ELEdBQ3pCLElBQUtxQixFQUFTckIsR0FBSyxNQUFNMEIsVUFBVTFCLEVBQUssc0JBQ3hDLE9BQU9BLElBTUgsS0FDQSxTQUFVbkQsRUFBUUQsRUFBU0YsR0FHakMsSUFBSXlFLEVBQVV6RSxFQUFvQixRQUM5Qm1PLEVBQU9uTyxFQUFvQixRQUMzQnlGLEVBQVF6RixFQUFvQixRQUNoQ0csRUFBT0QsUUFBVSxTQUFVb0csRUFBS1AsR0FDOUIsSUFBSW5CLEdBQU11SixFQUFLck4sUUFBVSxJQUFJd0YsSUFBUXhGLE9BQU93RixHQUN4QzRJLEVBQU0sR0FDVkEsRUFBSTVJLEdBQU9QLEVBQUtuQixHQUNoQkgsRUFBUUEsRUFBUXRCLEVBQUlzQixFQUFRcUUsRUFBSXJELEdBQU0sV0FBY2IsRUFBRyxNQUFRLFNBQVVzSyxLQU1yRSxLQUNBLFNBQVUvTyxFQUFRRCxFQUFTRixHQUdqQyxJQUFJOFUsRUFBVzlVLEVBQW9CLFFBQy9Cc0MsRUFBVXRDLEVBQW9CLFFBRWxDRyxFQUFPRCxRQUFVLFNBQVVzQyxFQUFNd0csRUFBY1ksR0FDN0MsR0FBSWtMLEVBQVM5TCxHQUFlLE1BQU1oRSxVQUFVLFVBQVk0RSxFQUFPLDBCQUMvRCxPQUFPaEgsT0FBT04sRUFBUUUsTUFNbEIsS0FDQSxTQUFVckMsRUFBUUQsRUFBU0YsR0FFakNBLEVBQW9CLFFBQ3BCQSxFQUFvQixRQUNwQkcsRUFBT0QsUUFBVUYsRUFBb0IsUUFBUXNMLE1BQU1ZLE1BSzdDLEtBQ0EsU0FBVS9MLEVBQVFELEdBRXhCQyxFQUFPRCxRQUFVLFNBQVVvRCxHQUN6QixNQUFxQixpQkFBUEEsRUFBeUIsT0FBUEEsRUFBNEIsbUJBQVBBLElBTWpELEtBQ0EsU0FBVW5ELEVBQVFELEVBQVNGLEdBR2pDLElBQUlrUyxFQUFZbFMsRUFBb0IsUUFDcENHLEVBQU9ELFFBQVUsU0FBVTBFLEVBQUlwQyxFQUFNSyxHQUVuQyxHQURBcVAsRUFBVXROLFFBQ0c5QixJQUFUTixFQUFvQixPQUFPb0MsRUFDL0IsT0FBUS9CLEdBQ04sS0FBSyxFQUFHLE9BQU8sU0FBVUgsR0FDdkIsT0FBT2tDLEVBQUdyRSxLQUFLaUMsRUFBTUUsSUFFdkIsS0FBSyxFQUFHLE9BQU8sU0FBVUEsRUFBR0MsR0FDMUIsT0FBT2lDLEVBQUdyRSxLQUFLaUMsRUFBTUUsRUFBR0MsSUFFMUIsS0FBSyxFQUFHLE9BQU8sU0FBVUQsRUFBR0MsRUFBR2xDLEdBQzdCLE9BQU9tRSxFQUFHckUsS0FBS2lDLEVBQU1FLEVBQUdDLEVBQUdsQyxJQUcvQixPQUFPLFdBQ0wsT0FBT21FLEVBQUd3QixNQUFNNUQsRUFBTTZELGNBT3BCLEtBQ0EsU0FBVWxHLEVBQVFELEdBRXhCQyxFQUFPRCxRQUFVLFNBQVVvRCxHQUN6QixHQUFpQixtQkFBTkEsRUFBa0IsTUFBTTBCLFVBQVUxQixFQUFLLHVCQUNsRCxPQUFPQSxJQU1ILEtBQ0EsU0FBVW5ELEVBQVFELEVBQVNGLEdBRWpDLElBQUl1RCxFQUFXdkQsRUFBb0IsUUFDL0JrUixFQUFpQmxSLEVBQW9CLFFBQ3JDbVIsRUFBY25SLEVBQW9CLFFBQ2xDaUwsRUFBS25LLE9BQU9DLGVBRWhCYixFQUFRb0YsRUFBSXRGLEVBQW9CLFFBQVVjLE9BQU9DLGVBQWlCLFNBQXdCdUQsRUFBR3VFLEVBQUd1SSxHQUk5RixHQUhBN04sRUFBU2UsR0FDVHVFLEVBQUlzSSxFQUFZdEksR0FBRyxHQUNuQnRGLEVBQVM2TixHQUNMRixFQUFnQixJQUNsQixPQUFPakcsRUFBRzNHLEVBQUd1RSxFQUFHdUksR0FDaEIsTUFBT3ZKLElBQ1QsR0FBSSxRQUFTdUosR0FBYyxRQUFTQSxFQUFZLE1BQU1wTSxVQUFVLDRCQUVoRSxNQURJLFVBQVdvTSxJQUFZOU0sRUFBRXVFLEdBQUt1SSxFQUFXL1AsT0FDdENpRCxJQU1ILEtBQ0EsU0FBVW5FLEVBQVFELEVBQVNGLEdBRWpDLElBQUltTyxFQUFPbk8sRUFBb0IsUUFDM0IwRCxFQUFTMUQsRUFBb0IsUUFFN0J5SSxFQUFRL0UsRUFEQyx3QkFDa0JBLEVBRGxCLHNCQUNtQyxLQUUvQ3ZELEVBQU9ELFFBQVUsU0FBVXlCLEVBQUtOLEdBQy9CLE9BQU9vSCxFQUFNOUcsS0FBUzhHLEVBQU05RyxRQUFpQm1CLElBQVZ6QixFQUFzQkEsRUFBUSxNQUNoRSxXQUFZLElBQUkrTSxLQUFLLENBQ3RCQyxRQUFTRixFQUFLRSxRQUNkOU0sS0FBTXZCLEVBQW9CLFFBQVUsT0FBUyxTQUM3Q3NPLFVBQVcsMENBTVAsS0FDQSxTQUFVbk8sRUFBUUQsRUFBU0YsR0FFakNBLEVBQW9CLFFBQ3BCLElBQUl3VyxFQUFVeFcsRUFBb0IsUUFBUWMsT0FDMUNYLEVBQU9ELFFBQVUsU0FBZ0IySSxFQUFHNE4sR0FDbEMsT0FBT0QsRUFBUTlVLE9BQU9tSCxFQUFHNE4sS0FNckIsS0FDQSxTQUFVdFcsRUFBUUQsRUFBU0YsR0FFakMsSUFBSTJFLEVBQVczRSxFQUFvQixRQUNuQ0csRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsSUFBS3FCLEVBQVNyQixHQUFLLE1BQU0wQixVQUFVMUIsRUFBSyxzQkFDeEMsT0FBT0EsSUFNSCxLQUNBLFNBQVVuRCxFQUFRRCxHQUd4QixJQUFJd0QsRUFBU3ZELEVBQU9ELFFBQTJCLG9CQUFWd1EsUUFBeUJBLE9BQU8zTSxNQUFRQSxLQUN6RTJNLE9BQXdCLG9CQUFSQyxNQUF1QkEsS0FBSzVNLE1BQVFBLEtBQU80TSxLQUUzRG5JLFNBQVMsY0FBVEEsR0FDYyxpQkFBUG9JLE1BQWlCQSxJQUFNbE4sSUFLNUIsS0FDQSxTQUFVdkQsRUFBUUQsRUFBU0YsR0FFakMsSUFBSWdJLEVBQU1oSSxFQUFvQixRQUMxQnlPLEVBQVl6TyxFQUFvQixRQUNoQzBXLEVBQWUxVyxFQUFvQixPQUFwQkEsRUFBNEIsR0FDM0NvTixFQUFXcE4sRUFBb0IsT0FBcEJBLENBQTRCLFlBRTNDRyxFQUFPRCxRQUFVLFNBQVU0QixFQUFRNlUsR0FDakMsSUFHSWhWLEVBSEEyQyxFQUFJbUssRUFBVTNNLEdBQ2QxQixFQUFJLEVBQ0pxRCxFQUFTLEdBRWIsSUFBSzlCLEtBQU8yQyxFQUFPM0MsR0FBT3lMLEdBQVVwRixFQUFJMUQsRUFBRzNDLElBQVE4QixFQUFPMkssS0FBS3pNLEdBRS9ELEtBQU9nVixFQUFNOVQsT0FBU3pDLEdBQU80SCxFQUFJMUQsRUFBRzNDLEVBQU1nVixFQUFNdlcsU0FDN0NzVyxFQUFhalQsRUFBUTlCLElBQVE4QixFQUFPMkssS0FBS3pNLElBRTVDLE9BQU84QixJQU1ILEtBQ0EsU0FBVXRELEVBQVFELEVBQVNGLEdBRWpDQSxFQUFvQixRQUNwQkcsRUFBT0QsUUFBVUYsRUFBb0IsUUFBUXNMLE1BQU01RyxTQUs3QyxLQUNBLFNBQVV2RSxFQUFRRCxFQUFTRixHQUVqQyxhQUdBLElBQUl5RSxFQUFVekUsRUFBb0IsUUFDOUJ3TixFQUFXeE4sRUFBb0IsUUFDL0I0SSxFQUFVNUksRUFBb0IsUUFFOUI0VyxFQUFjLEdBQWMsV0FFaENuUyxFQUFRQSxFQUFRb0UsRUFBSXBFLEVBQVFxRSxFQUFJOUksRUFBb0IsT0FBcEJBLENBSGQsY0FHd0QsU0FBVSxDQUNsRjZXLFdBQVksU0FBb0I3TixHQUM5QixJQUFJeEcsRUFBT29HLEVBQVFwRixLQUFNd0YsRUFMWCxjQU1WNUYsRUFBUW9LLEVBQVN6SixLQUFLQyxJQUFJcUMsVUFBVXhELE9BQVMsRUFBSXdELFVBQVUsUUFBS3ZELEVBQVdOLEVBQUtLLFNBQ2hGaVUsRUFBU2xVLE9BQU9vRyxHQUNwQixPQUFPNE4sRUFDSEEsRUFBWXJXLEtBQUtpQyxFQUFNc1UsRUFBUTFULEdBQy9CWixFQUFLUyxNQUFNRyxFQUFPQSxFQUFRMFQsRUFBT2pVLFVBQVlpVSxNQU8vQyxLQUNBLFNBQVUzVyxFQUFRRCxHQUV4QkMsRUFBT0QsUUFBVSxTQUFVb0QsR0FDekIsTUFBcUIsaUJBQVBBLEVBQXlCLE9BQVBBLEVBQTRCLG1CQUFQQSxJQU1qRCxLQUNBLFNBQVVuRCxFQUFRRCxFQUFTRixHQUVqQ0csRUFBT0QsUUFBVUYsRUFBb0IsT0FBcEJBLENBQTRCLDRCQUE2QndJLFNBQVMxRCxXQUs3RSxLQUNBLFNBQVUzRSxFQUFRaVYsRUFBcUJwVixHQUU3QyxhQU9FLElBQUkrVyxHQU5OL1csRUFBb0JrQixFQUFFa1UsR0FLQSxvQkFBWDFFLFdBRUpxRyxFQUFrQnJHLE9BQU96TCxTQUFTK1IsaUJBQW1CRCxFQUFrQkEsRUFBZ0JsRSxJQUFJM0YsTUFBTSw4QkFDcEdsTixFQUFvQmtDLEVBQUk2VSxFQUFnQixLQUtmLElBR3pCRSxFQUFnQmpYLEVBQW9CLFFBQ3BDa1gsRUFBOEJsWCxFQUFvQjZCLEVBQUVvVixHQU1wRHhOLEdBSHlCekosRUFBb0IsUUFHdENBLEVBQW9CLFNBQzNCbVgsRUFBNEJuWCxFQUFvQjZCLEVBQUU0SCxHQUdsRDJOLEVBQVdwWCxFQUFvQixRQUMvQnFYLEVBQWdDclgsRUFBb0I2QixFQUFFdVYsR0FRMUQsSUFBSUUsRUFBZXRYLEVBQW9CLFFBQ25DdVgsRUFBb0N2WCxFQUFvQjZCLEVBQUV5VixHQXFDOUQsU0FBU0UsRUFBZXBMLEVBQUtoTSxHQUMzQixPQTNDRixTQUF5QmdNLEdBQ3ZCLEdBQUlpTCxJQUFtQmpMLEdBQU0sT0FBT0EsRUEwQzdCcUwsQ0FBZ0JyTCxJQWxDekIsU0FBK0JBLEVBQUtoTSxHQUNsQyxJQUFJc1gsRUFBTyxHQUNQQyxHQUFLLEVBQ0xDLEdBQUssRUFDTEMsT0FBSy9VLEVBRVQsSUFDRSxJQUFLLElBQXNDZ1YsRUFBbEMxVCxFQUFLbVQsSUFBdUJuTCxLQUFZdUwsR0FBTUcsRUFBSzFULEVBQUcwRixRQUFRdkYsUUFDckVtVCxFQUFLdEosS0FBSzBKLEVBQUd6VyxRQUVUakIsR0FBS3NYLEVBQUs3VSxTQUFXekMsR0FIbUR1WCxHQUFLLElBS25GLE1BQU9JLEdBQ1BILEdBQUssRUFDTEMsRUFBS0UsRUFDTCxRQUNBLElBQ09KLEdBQXNCLE1BQWhCdlQsRUFBVyxRQUFXQSxFQUFXLFNBQzVDLFFBQ0EsR0FBSXdULEVBQUksTUFBTUMsR0FJbEIsT0FBT0gsRUFXd0JNLENBQXNCNUwsRUFBS2hNLElBUjVELFdBQ0UsTUFBTSxJQUFJNEUsVUFBVSx3REFPNENpVCxHQUd6Q2pZLEVBQW9CLFFBR25CQSxFQUFvQixRQWM5QyxJQUFJa00sRUFBT2xNLEVBQW9CLFFBQzNCa1ksRUFBNEJsWSxFQUFvQjZCLEVBQUVxSyxHQUdsRGlNLEVBQWNuWSxFQUFvQixRQUNsQ29ZLEVBQW1DcFksRUFBb0I2QixFQUFFc1csR0FnQjdELFNBQVNFLEVBQW1Cak0sR0FDMUIsT0FoQ0YsU0FBNEJBLEdBQzFCLEdBQUlpTCxJQUFtQmpMLEdBQU0sQ0FDM0IsSUFBSyxJQUFJaE0sRUFBSSxFQUFHa1ksRUFBTyxJQUFJaE4sTUFBTWMsRUFBSXZKLFFBQVN6QyxFQUFJZ00sRUFBSXZKLE9BQVF6QyxJQUM1RGtZLEVBQUtsWSxHQUFLZ00sRUFBSWhNLEdBR2hCLE9BQU9rWSxHQTBCRkMsQ0FBbUJuTSxJQVo1QixTQUEwQkMsR0FDeEIsR0FBSStMLElBQXNCdFgsT0FBT3VMLEtBQW1ELHVCQUF6Q3ZMLE9BQU9rQixVQUFVOEMsU0FBU3ZFLEtBQUs4TCxHQUFnQyxPQUFPNkwsSUFBZTdMLEdBVzlGbU0sQ0FBaUJwTSxJQVJyRCxXQUNFLE1BQU0sSUFBSXBILFVBQVUsbURBT3VDeVQsR0FHN0QsSUFBSUMsRUFBa0YxWSxFQUFvQixRQUN0RzJZLEVBQXNHM1ksRUFBb0I2QixFQUFFNlcsR0FHNUhFLEVBQVM1WSxFQUFvQixRQWdEakMsU0FBUzZZLEVBQUtDLEVBQVNDLEdBQ3JCLElBQUlDLEVBQVF4VixLQUVaQSxLQUFLeVYsV0FBVSxXQUNiLE9BQU9ELEVBQU1FLE1BQU1KLEVBQVFLLGNBQWVKLE1BSTlDLFNBQVNLLEVBQWdCTixHQUN2QixJQUFJTyxFQUFTN1YsS0FFYixPQUFPLFNBQVV1VixHQUNTLE9BQXBCTSxFQUFPQyxVQUNURCxFQUFPLFNBQVdQLEdBQVNDLEdBRzdCRixFQUFLdFksS0FBSzhZLEVBQVFQLEVBQVNDLElBSS9CLFNBQVNRLEVBQWlCNVksR0FDeEIsTUFBTyxDQUFDLG1CQUFvQixtQkFBbUJvSSxTQUFTcEksR0FrQjFELFNBQVM2WSxFQUFRQyxFQUFNQyxFQUFZL1gsR0FDakMsT0FBTzhYLEVBQUs5WCxLQUFTK1gsRUFBVy9YLEdBQU8rWCxFQUFXL1gsVUFBU21CLEdBMEQ3RCxJQUFJNlcsRUFBaUIsQ0FBQyxRQUFTLE1BQU8sU0FBVSxTQUFVLE9BQ3REQyxFQUFlLENBQUMsU0FBVSxXQUFZLE9BQVEsU0FBVSxTQUN4REMsRUFBcUIsQ0FBQyxRQUFRMUosT0FBT3dKLEVBQWdCQyxHQUFjRSxLQUFJLFNBQVVDLEdBQ25GLE1BQU8sS0FBT0EsS0FFWkMsRUFBa0IsS0F5Q2xCQyxFQUFxQixDQUN2QnRaLEtBQU0sWUFDTnVaLGNBQWMsRUFDZEMsTUEzQ3VCLENBQ3ZCQyxRQUFTdFosT0FDVHVaLEtBQU0sQ0FDSnRMLEtBQU16RCxNQUNOZ1AsVUFBVSxFQUNWQyxRQUFTLE1BRVhsWixNQUFPLENBQ0wwTixLQUFNekQsTUFDTmdQLFVBQVUsRUFDVkMsUUFBUyxNQUVYQyxtQkFBb0IsQ0FDbEJ6TCxLQUFNMEwsUUFDTkYsU0FBUyxHQUVYRyxNQUFPLENBQ0wzTCxLQUFNdkcsU0FDTitSLFFBQVMsU0FBa0JJLEdBQ3pCLE9BQU9BLElBR1hDLFFBQVMsQ0FDUDdMLEtBQU1uTSxPQUNOMlgsUUFBUyxPQUVYNU8sSUFBSyxDQUNIb0QsS0FBTW5NLE9BQ04yWCxRQUFTLE1BRVhNLEtBQU0sQ0FDSjlMLEtBQU12RyxTQUNOK1IsUUFBUyxNQUVYTyxjQUFlLENBQ2IvTCxLQUFNak8sT0FDTndaLFVBQVUsRUFDVkMsUUFBUyxPQU9YUSxLQUFNLFdBQ0osTUFBTyxDQUNMQyxnQkFBZ0IsRUFDaEJDLDZCQUE2QixJQUdqQ0MsT0FBUSxTQUFnQkMsR0FDdEIsSUFBSUMsRUFBUTVYLEtBQUs2WCxPQUFPZCxRQUN4Qi9XLEtBQUt3WCxlQXBJVCxTQUFtQ0ksR0FDakMsSUFBS0EsR0FBMEIsSUFBakJBLEVBQU12WSxPQUNsQixPQUFPLEVBR1QsSUFDSXlZLEVBRFM5RCxFQUFlNEQsRUFBTyxHQUNMLEdBQUdFLGlCQUVqQyxRQUFLQSxHQUlFL0IsRUFBaUIrQixFQUFpQjNQLEtBd0hqQjRQLENBQTBCSCxHQUVoRCxJQUFJSSxFQW5IUixTQUFtQ3BGLEVBQVVxRCxFQUFNQyxHQUNqRCxJQUFJK0IsRUFBZSxFQUNmQyxFQUFlLEVBQ2ZDLEVBQVNuQyxFQUFRQyxFQUFNQyxFQUFZLFVBRW5DaUMsSUFDRkYsRUFBZUUsRUFBTzlZLE9BQ3RCdVQsRUFBV0EsRUFBVyxHQUFHakcsT0FBT2tJLEVBQW1Cc0QsR0FBU3RELEVBQW1CakMsSUFBYWlDLEVBQW1Cc0QsSUFHakgsSUFBSUMsRUFBU3BDLEVBQVFDLEVBQU1DLEVBQVksVUFPdkMsT0FMSWtDLElBQ0ZGLEVBQWVFLEVBQU8vWSxPQUN0QnVULEVBQVdBLEVBQVcsR0FBR2pHLE9BQU9rSSxFQUFtQmpDLEdBQVdpQyxFQUFtQnVELElBQVd2RCxFQUFtQnVELElBRzFHLENBQ0x4RixTQUFVQSxFQUNWcUYsYUFBY0EsRUFDZEMsYUFBY0EsR0ErRmNHLENBQTBCVCxFQUFPNVgsS0FBSzZYLE9BQVE3WCxLQUFLc1ksY0FDM0UxRixFQUFXb0YsRUFBc0JwRixTQUNqQ3FGLEVBQWVELEVBQXNCQyxhQUNyQ0MsRUFBZUYsRUFBc0JFLGFBRXpDbFksS0FBS2lZLGFBQWVBLEVBQ3BCalksS0FBS2tZLGFBQWVBLEVBQ3BCLElBQUlLLEVBbEdSLFNBQWdDQyxFQUFRbEIsR0FDdEMsSUFBSWlCLEVBQWEsS0FFYkUsRUFBUyxTQUFnQnRiLEVBQU1VLEdBQ2pDMGEsRUExR0osU0FBd0JqYSxFQUFRb2EsRUFBVTdhLEdBQ3hDLFlBQWN5QixJQUFWekIsS0FJSlMsRUFBU0EsR0FBVSxJQUNab2EsR0FBWTdhLEdBSlZTLEVBd0dNcWEsQ0FBZUosRUFBWXBiLEVBQU1VLElBWWhELEdBRkE0YSxFQUFPLFFBUEs5RSxJQUFlNkUsR0FBUUksUUFBTyxTQUFVemEsR0FDbEQsTUFBZSxPQUFSQSxHQUFnQkEsRUFBSWtWLFdBQVcsWUFDckN3RixRQUFPLFNBQVV6SSxFQUFLalMsR0FFdkIsT0FEQWlTLEVBQUlqUyxHQUFPcWEsRUFBT3JhLEdBQ1hpUyxJQUNOLE1BSUVrSCxFQUNILE9BQU9pQixFQUdULElBQUlPLEVBQUt4QixFQUFjd0IsR0FDbkJuQyxFQUFRVyxFQUFjWCxNQUN0Qm9DLEVBQXFCekIsRUFBYzBCLE1BTXZDLE9BTEFQLEVBQU8sS0FBTUssR0FDYkwsRUFBTyxRQUFTOUIsR0FFaEJqRCxJQUFpQjZFLEVBQVdTLE1BQU9ELEdBRTVCUixFQXNFWVUsQ0FBdUJqWixLQUFLd1ksT0FBUXhZLEtBQUtzWCxlQUMxRCxPQUFPSyxFQUFFM1gsS0FBS2taLFNBQVVYLEVBQVkzRixJQUV0Q3VHLFFBQVMsV0FDVyxPQUFkblosS0FBSzZXLE1BQWdDLE9BQWY3VyxLQUFLbkMsT0FDN0J1WCxFQUF3QixFQUFFZ0UsTUFBTSwyRUFHYixRQUFqQnBaLEtBQUtvWCxTQUNQaEMsRUFBd0IsRUFBRWlFLEtBQUsscUtBR1ovWixJQUFqQlUsS0FBSzRXLFNBQ1B4QixFQUF3QixFQUFFaUUsS0FBSyx3TUFHbkNDLFFBQVMsV0FDUCxJQUFJQyxFQUFTdlosS0FJYixHQUZBQSxLQUFLeVgsNEJBQThCelgsS0FBS2taLFNBQVN2RCxnQkFBa0IzVixLQUFLd1osSUFBSUMsU0FBUzlELGdCQUFrQjNWLEtBQUswWixrQkFFeEcxWixLQUFLeVgsNkJBQStCelgsS0FBS3dYLGVBQzNDLE1BQU0sSUFBSW1DLE1BQU0sNkhBQTZIaE4sT0FBTzNNLEtBQUtrWixXQUczSixJQUFJVSxFQUFlLEdBQ25CekQsRUFBZWhJLFNBQVEsU0FBVTBMLEdBQy9CRCxFQUFhLEtBQU9DLEdBQU9qRSxFQUFnQjdZLEtBQUt3YyxFQUFRTSxNQUUxRHpELEVBQWFqSSxTQUFRLFNBQVUwTCxHQUM3QkQsRUFBYSxLQUFPQyxHQUFPeEUsRUFBS2pYLEtBQUttYixFQUFRTSxNQUcvQyxJQUFJdEIsRUFBYTVFLElBQWUzVCxLQUFLd1ksUUFBUUssUUFBTyxTQUFVekksRUFBS2pTLEdBRWpFLE9BREFpUyxFQUFJOVMsT0FBTzhYLEVBQXlCLEVBQWhDOVgsQ0FBbUNhLElBQVFvYixFQUFPZixPQUFPcmEsR0FDdERpUyxJQUNOLElBRUN3RyxFQUFVbEQsSUFBaUIsR0FBSTFULEtBQUs0VyxRQUFTMkIsRUFBWXFCLEVBQWMsQ0FDekVFLE9BQVEsU0FBZ0J2RCxFQUFLd0QsR0FDM0IsT0FBT1IsRUFBT1MsV0FBV3pELEVBQUt3RCxRQUloQyxjQUFlbkQsS0FBYUEsRUFBUXFELFVBQVksTUFDbERqYSxLQUFLa2EsVUFBWSxJQUFJL0UsRUFBdUZqVyxFQUFFYyxLQUFLbWEsY0FBZXZELEdBQ2xJNVcsS0FBS29hLGtCQUVQQyxjQUFlLGdCQUNVL2EsSUFBbkJVLEtBQUtrYSxXQUF5QmxhLEtBQUtrYSxVQUFVSSxXQUVuREMsU0FBVSxDQUNSSixjQUFlLFdBQ2IsT0FBT25hLEtBQUt3WCxlQUFpQnhYLEtBQUt3WixJQUFJNUcsU0FBUyxHQUFLNVMsS0FBS3daLEtBRTNEMUQsU0FBVSxXQUNSLE9BQU85VixLQUFLNlcsS0FBTzdXLEtBQUs2VyxLQUFPN1csS0FBS25DLFFBR3hDMmMsTUFBTyxDQUNMNUQsUUFBUyxDQUNQNkQsUUFBUyxTQUFpQkMsR0FDeEIxYSxLQUFLMmEsY0FBY0QsSUFFckJFLE1BQU0sR0FFUnBDLE9BQVEsQ0FDTmlDLFFBQVMsU0FBaUJDLEdBQ3hCMWEsS0FBSzJhLGNBQWNELElBRXJCRSxNQUFNLEdBRVI5RSxTQUFVLFdBQ1I5VixLQUFLb2EsbUJBR1QxVCxRQUFTLENBQ1BnVCxnQkFBaUIsV0FDZixJQUFJbUIsRUFBWTdhLEtBQUs4YSxPQUFPRCxVQUM1QixPQUFPQSxHQUFhQSxFQUFVRSxZQUVoQzdCLE9BQVEsV0FDTixPQUFPbFosS0FBS21JLEtBQU9uSSxLQUFLb1gsU0FFMUJ1RCxjQUFlLFNBQXVCRCxHQUNwQyxJQUFLLElBQUluYyxLQUFZbWMsRUFBZ0IsQ0FDbkMsSUFBSTdjLEVBQVFQLE9BQU84WCxFQUF5QixFQUFoQzlYLENBQW1DaUIsSUFFSixJQUF2QzhYLEVBQW1CNVEsUUFBUTVILElBQzdCbUMsS0FBS2thLFVBQVVjLE9BQU9uZCxFQUFPNmMsRUFBZW5jLE1BSWxEMGMsaUJBQWtCLFdBQ2hCLEdBQUlqYixLQUFLeVgsNEJBQ1AsT0FBT3pYLEtBQUtrYixVQUFVLEdBQUdyRCxPQUFPZCxRQUdsQyxJQUFJb0UsRUFBV25iLEtBQUs2WCxPQUFPZCxRQUMzQixPQUFPL1csS0FBS3dYLGVBQWlCMkQsRUFBUyxHQUFHQyxNQUFNdkQsT0FBT2QsUUFBVW9FLEdBRWxFZixlQUFnQixXQUNkLElBQUlpQixFQUFTcmIsS0FFYkEsS0FBS3lWLFdBQVUsV0FDYjRGLEVBQU9DLGVBalNmLFNBQXlCMUQsRUFBT2hGLEVBQVUySSxFQUFjckQsR0FDdEQsSUFBS04sRUFDSCxNQUFPLEdBR1QsSUFBSTRELEVBQWU1RCxFQUFNdEIsS0FBSSxTQUFVdUQsR0FDckMsT0FBT0EsRUFBSTRCLE9BRVRDLEVBQWM5SSxFQUFTdlQsT0FBUzZZLEVBRWhDeUQsRUFBYTlHLEVBQW1CakMsR0FBVTBELEtBQUksU0FBVXVELEVBQUsrQixHQUMvRCxPQUFPQSxHQUFPRixFQUFjRixFQUFhbmMsT0FBU21jLEVBQWEvVixRQUFRb1UsTUFHekUsT0FBTzBCLEVBQWVJLEVBQVcvQyxRQUFPLFNBQVVpRCxHQUNoRCxPQUFnQixJQUFUQSxLQUNKRixFQWlSeUJHLENBQWdCVCxFQUFPSixtQkFBb0JJLEVBQU9sQixjQUFjdkgsU0FBVXlJLEVBQU83RCxlQUFnQjZELEVBQU9uRCxrQkFHcEk2RCxnQkFBaUIsU0FBeUJDLEdBQ3hDLElBQUlwYyxFQTNTVixTQUF3QnFjLEVBQVE3RSxHQUM5QixPQUFPNkUsRUFBTzNGLEtBQUksU0FBVXVELEdBQzFCLE9BQU9BLEVBQUk0QixPQUNWaFcsUUFBUTJSLEdBd1NLOEUsQ0FBZWxjLEtBQUtpYixvQkFBc0IsR0FBSWUsR0FFMUQsT0FBZSxJQUFYcGMsRUFHSyxLQUlGLENBQ0xBLE1BQU9BLEVBQ1B3WCxRQUhZcFgsS0FBSzhWLFNBQVNsVyxLQU05QnVjLHlDQUEwQyxTQUFrREMsR0FDMUYsSUFBSUMsRUFBTUQsRUFBS0UsUUFFZixPQUFLRCxHQUFRQSxFQUFJRSxVQUFheEcsRUFBaUJzRyxFQUFJRSxTQUFTQyxlQUtyREgsRUFBSUksVUFKSCxhQUFjSixJQUFpQyxJQUF6QkEsRUFBSW5CLFVBQVU3YixRQUFnQixhQUFjZ2QsRUFBSW5CLFVBQVUsR0FBV21CLEVBQUluQixVQUFVLEdBQ3hHbUIsR0FLWEssWUFBYSxTQUFxQm5HLEdBQ2hDLElBQUlvRyxFQUFTM2MsS0FFYkEsS0FBS3lWLFdBQVUsV0FDYmtILEVBQU9qSCxNQUFNLFNBQVVhLE9BRzNCcUcsVUFBVyxTQUFtQkMsR0FDNUIsR0FBSTdjLEtBQUs2VyxLQUNQZ0csRUFBTzdjLEtBQUs2VyxVQURkLENBS0EsSUFBSWlHLEVBQVVqSSxFQUFtQjdVLEtBQUtuQyxPQUV0Q2dmLEVBQU9DLEdBQ1A5YyxLQUFLMFYsTUFBTSxRQUFTb0gsS0FFdEJDLFdBQVksV0FDVixJQUFJQyxFQUFhbmEsVUFFYmthLEVBQWEsU0FBb0JsRyxHQUNuQyxPQUFPQSxFQUFLb0csT0FBT3JhLE1BQU1pVSxFQUFNaEMsRUFBbUJtSSxLQUdwRGhkLEtBQUs0YyxVQUFVRyxJQUVqQkcsZUFBZ0IsU0FBd0JDLEVBQVVDLEdBQ2hELElBQUlGLEVBQWlCLFNBQXdCckcsR0FDM0MsT0FBT0EsRUFBS29HLE9BQU9HLEVBQVUsRUFBR3ZHLEVBQUtvRyxPQUFPRSxFQUFVLEdBQUcsS0FHM0RuZCxLQUFLNGMsVUFBVU0sSUFFakJHLCtCQUFnQyxTQUF3Q0MsR0FDdEUsSUFBSUMsRUFBS0QsRUFBTUMsR0FDWEMsRUFBVUYsRUFBTUUsUUFDaEJDLEVBQVl6ZCxLQUFLbWMseUNBQXlDb0IsR0FFOUQsSUFBS0UsRUFDSCxNQUFPLENBQ0xBLFVBQVdBLEdBSWYsSUFBSTVHLEVBQU80RyxFQUFVM0gsU0FDakIxUSxFQUFVLENBQ1p5UixLQUFNQSxFQUNONEcsVUFBV0EsR0FHYixHQUFJRixJQUFPQyxHQUFXM0csR0FBUTRHLEVBQVUxQixnQkFBaUIsQ0FDdkQsSUFBSTJCLEVBQWNELEVBQVUxQixnQkFBZ0J5QixHQUU1QyxHQUFJRSxFQUNGLE9BQU9oSyxJQUFpQmdLLEVBQWF0WSxHQUl6QyxPQUFPQSxHQUVUdVksV0FBWSxTQUFvQkMsR0FDOUIsSUFBSUMsRUFBVTdkLEtBQUtzYixlQUNmd0MsRUFBZ0JELEVBQVF4ZSxPQUM1QixPQUFPdWUsRUFBV0UsRUFBZ0IsRUFBSUEsRUFBZ0JELEVBQVFELElBRWhFRyxhQUFjLFdBQ1osT0FBTy9kLEtBQUs2WCxPQUFPZCxRQUFRLEdBQUdpSCxtQkFFaENDLG9CQUFxQixTQUE2QnJlLEdBQ2hELEdBQUtJLEtBQUtnWCxvQkFBdUJoWCxLQUFLd1gsZUFBdEMsQ0FJWXhYLEtBQUtpYixtQkFDWHJiLEdBQU8yWCxLQUFPLEtBQ3BCLElBQUkyRyxFQUFzQmxlLEtBQUsrZCxlQUMvQkcsRUFBb0J0TCxTQUFXLEdBQy9Cc0wsRUFBb0JDLFVBQU83ZSxJQUU3QjhlLFlBQWEsU0FBcUI3SCxHQUNoQ3ZXLEtBQUtvRixRQUFVcEYsS0FBSytiLGdCQUFnQnhGLEVBQUk4SCxNQUN4QzlILEVBQUk4SCxLQUFLQyxnQkFBa0J0ZSxLQUFLa1gsTUFBTWxYLEtBQUtvRixRQUFRZ1MsU0FDbkRaLEVBQWtCRCxFQUFJOEgsTUFFeEJFLFVBQVcsU0FBbUJoSSxHQUM1QixJQUFJYSxFQUFVYixFQUFJOEgsS0FBS0MsZ0JBRXZCLFFBQWdCaGYsSUFBWjhYLEVBQUosQ0FJQTlaLE9BQU84WCxFQUEyQixFQUFsQzlYLENBQXFDaVosRUFBSThILE1BQ3pDLElBQUlqQixFQUFXcGQsS0FBSzJkLFdBQVdwSCxFQUFJNkcsVUFDbkNwZCxLQUFLK2MsV0FBV0ssRUFBVSxFQUFHaEcsR0FDN0JwWCxLQUFLb2EsaUJBQ0wsSUFBSW9FLEVBQVEsQ0FDVnBILFFBQVNBLEVBQ1RnRyxTQUFVQSxHQUVacGQsS0FBSzBjLFlBQVksQ0FDZjhCLE1BQU9BLE1BR1hDLGFBQWMsU0FBc0JsSSxHQUdsQyxHQUZBalosT0FBTzhYLEVBQTZCLEVBQXBDOVgsQ0FBdUMwQyxLQUFLbWEsY0FBZTVELEVBQUk4SCxLQUFNOUgsRUFBSTRHLFVBRXBELFVBQWpCNUcsRUFBSW1JLFNBQVIsQ0FLQSxJQUFJdkIsRUFBV25kLEtBQUtvRixRQUFReEYsTUFDNUJJLEtBQUsrYyxXQUFXSSxFQUFVLEdBQzFCLElBQUl3QixFQUFVLENBQ1p2SCxRQUFTcFgsS0FBS29GLFFBQVFnUyxRQUN0QitGLFNBQVVBLEdBRVpuZCxLQUFLaWUsb0JBQW9CZCxHQUN6Qm5kLEtBQUswYyxZQUFZLENBQ2ZpQyxRQUFTQSxTQVpUcmhCLE9BQU84WCxFQUEyQixFQUFsQzlYLENBQXFDaVosRUFBSVcsUUFlN0MwSCxhQUFjLFNBQXNCckksR0FDbENqWixPQUFPOFgsRUFBMkIsRUFBbEM5WCxDQUFxQ2laLEVBQUk4SCxNQUN6Qy9nQixPQUFPOFgsRUFBNkIsRUFBcEM5WCxDQUF1Q2laLEVBQUk3TixLQUFNNk4sRUFBSThILEtBQU05SCxFQUFJNEcsVUFDL0QsSUFBSUEsRUFBV25kLEtBQUtvRixRQUFReEYsTUFDeEJ3ZCxFQUFXcGQsS0FBSzJkLFdBQVdwSCxFQUFJNkcsVUFDbkNwZCxLQUFLa2QsZUFBZUMsRUFBVUMsR0FDOUIsSUFBSXlCLEVBQVEsQ0FDVnpILFFBQVNwWCxLQUFLb0YsUUFBUWdTLFFBQ3RCK0YsU0FBVUEsRUFDVkMsU0FBVUEsR0FFWnBkLEtBQUswYyxZQUFZLENBQ2ZtQyxNQUFPQSxLQUdYQyxlQUFnQixTQUF3QnZJLEVBQUt3SSxHQUMzQ3hJLEVBQUk5WCxlQUFlc2dCLEtBQWtCeEksRUFBSXdJLElBQWlCL2UsS0FBS2lZLGVBRWpFK0csbUJBQW9CLFNBQTRCQyxFQUFnQjFJLEdBQzlELElBQUswSSxFQUFlN0gsUUFDbEIsT0FBTyxFQUdULElBQUk4SCxFQUFjckssRUFBbUIwQixFQUFJZ0gsR0FBRzNLLFVBQVVnRyxRQUFPLFNBQVV2TixHQUNyRSxNQUErQixTQUF4QkEsRUFBRzZELE1BQWUsV0FHdkJpUSxFQUFrQkQsRUFBWXpaLFFBQVE4USxFQUFJaUgsU0FDMUM0QixFQUFlSCxFQUFleEIsVUFBVUUsV0FBV3dCLEdBRXZELE9BRDhELElBQTFDRCxFQUFZelosUUFBUStRLEtBQ2ZELEVBQUk4SSxnQkFBa0JELEVBQWVBLEVBQWUsR0FFL0VwRixXQUFZLFNBQW9CekQsRUFBS3dELEdBQ25DLElBQUlELEVBQVM5WixLQUFLcVgsS0FFbEIsSUFBS3lDLElBQVc5WixLQUFLOFYsU0FDbkIsT0FBTyxFQUdULElBQUltSixFQUFpQmpmLEtBQUtxZCwrQkFBK0I5RyxHQUNyRCtJLEVBQWlCdGYsS0FBS29GLFFBQ3RCbWEsRUFBY3ZmLEtBQUtnZixtQkFBbUJDLEVBQWdCMUksR0FXMUQsT0FUQTdDLElBQWlCNEwsRUFBZ0IsQ0FDL0JDLFlBQWFBLElBUVJ6RixFQUxPcEcsSUFBaUIsR0FBSTZDLEVBQUssQ0FDdEMwSSxlQUFnQkEsRUFDaEJLLGVBQWdCQSxJQUdLdkYsSUFFekJ5RixVQUFXLFdBQ1R4ZixLQUFLb2EsaUJBQ0w1RCxFQUFrQixRQUtGLG9CQUFYdEosUUFBMEIsUUFBU0EsUUFDNUNBLE9BQU90TyxJQUFJNmUsVUFBVSxZQUFhaEgsR0FHUCxJQUFJZ0osRUFBZSxFQUlIN04sRUFBNkIsUUFBSSxLQU16RCxTOzs7Ozs7O0FDcnJHckIsU0FBUzhOLEVBQVFDLEdBV2YsT0FURUQsRUFEb0IsbUJBQVgvaEIsUUFBb0QsaUJBQXBCQSxPQUFPME0sU0FDdEMsU0FBVXNWLEdBQ2xCLGNBQWNBLEdBR04sU0FBVUEsR0FDbEIsT0FBT0EsR0FBeUIsbUJBQVhoaUIsUUFBeUJnaUIsRUFBSXhjLGNBQWdCeEYsUUFBVWdpQixJQUFRaGlCLE9BQU9hLFVBQVksZ0JBQWtCbWhCLElBSTlHQSxHQUdqQixTQUFTQyxFQUFnQkQsRUFBS3hoQixFQUFLTixHQVlqQyxPQVhJTSxLQUFPd2hCLEVBQ1RyaUIsT0FBT0MsZUFBZW9pQixFQUFLeGhCLEVBQUssQ0FDOUJOLE1BQU9BLEVBQ1BMLFlBQVksRUFDWjZLLGNBQWMsRUFDZEUsVUFBVSxJQUdab1gsRUFBSXhoQixHQUFPTixFQUdOOGhCLEVBR1QsU0FBU0UsSUFlUCxPQWRBQSxFQUFXdmlCLE9BQU95TCxRQUFVLFNBQVVrRCxHQUNwQyxJQUFLLElBQUlyUCxFQUFJLEVBQUdBLEVBQUlpRyxVQUFVeEQsT0FBUXpDLElBQUssQ0FDekMsSUFBSStNLEVBQVM5RyxVQUFVakcsR0FFdkIsSUFBSyxJQUFJdUIsS0FBT3dMLEVBQ1ZyTSxPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUs0TSxFQUFReEwsS0FDL0M4TixFQUFPOU4sR0FBT3dMLEVBQU94TCxJQUszQixPQUFPOE4sSUFHT3JKLE1BQU01QyxLQUFNNkMsV0FHOUIsU0FBU2lkLEVBQWM3VCxHQUNyQixJQUFLLElBQUlyUCxFQUFJLEVBQUdBLEVBQUlpRyxVQUFVeEQsT0FBUXpDLElBQUssQ0FDekMsSUFBSStNLEVBQXlCLE1BQWhCOUcsVUFBVWpHLEdBQWFpRyxVQUFVakcsR0FBSyxHQUMvQ21qQixFQUFVemlCLE9BQU8ySSxLQUFLMEQsR0FFa0IsbUJBQWpDck0sT0FBT21SLHdCQUNoQnNSLEVBQVVBLEVBQVFwVCxPQUFPclAsT0FBT21SLHNCQUFzQjlFLEdBQVFpUCxRQUFPLFNBQVVvSCxHQUM3RSxPQUFPMWlCLE9BQU8yaUIseUJBQXlCdFcsRUFBUXFXLEdBQUt4aUIsZ0JBSXhEdWlCLEVBQVE1UixTQUFRLFNBQVVoUSxHQUN4QnloQixFQUFnQjNULEVBQVE5TixFQUFLd0wsRUFBT3hMLE9BSXhDLE9BQU84TixFQWtCVCxTQUFTaVUsRUFBeUJ2VyxFQUFRd1csR0FDeEMsR0FBYyxNQUFWeFcsRUFBZ0IsTUFBTyxHQUUzQixJQUVJeEwsRUFBS3ZCLEVBRkxxUCxFQWxCTixTQUF1Q3RDLEVBQVF3VyxHQUM3QyxHQUFjLE1BQVZ4VyxFQUFnQixNQUFPLEdBQzNCLElBRUl4TCxFQUFLdkIsRUFGTHFQLEVBQVMsR0FDVG1VLEVBQWE5aUIsT0FBTzJJLEtBQUswRCxHQUc3QixJQUFLL00sRUFBSSxFQUFHQSxFQUFJd2pCLEVBQVcvZ0IsT0FBUXpDLElBQ2pDdUIsRUFBTWlpQixFQUFXeGpCLEdBQ2J1akIsRUFBUzFhLFFBQVF0SCxJQUFRLElBQzdCOE4sRUFBTzlOLEdBQU93TCxFQUFPeEwsSUFHdkIsT0FBTzhOLEVBTU1vVSxDQUE4QjFXLEVBQVF3VyxHQUluRCxHQUFJN2lCLE9BQU9tUixzQkFBdUIsQ0FDaEMsSUFBSTZSLEVBQW1CaGpCLE9BQU9tUixzQkFBc0I5RSxHQUVwRCxJQUFLL00sRUFBSSxFQUFHQSxFQUFJMGpCLEVBQWlCamhCLE9BQVF6QyxJQUN2Q3VCLEVBQU1taUIsRUFBaUIxakIsR0FDbkJ1akIsRUFBUzFhLFFBQVF0SCxJQUFRLEdBQ3hCYixPQUFPa0IsVUFBVW1KLHFCQUFxQjVLLEtBQUs0TSxFQUFReEwsS0FDeEQ4TixFQUFPOU4sR0FBT3dMLEVBQU94TCxJQUl6QixPQUFPOE4sRUFHVCxTQUFTNEksRUFBbUJqTSxHQUMxQixPQUdGLFNBQTRCQSxHQUMxQixHQUFJZCxNQUFNNUcsUUFBUTBILEdBQU0sQ0FDdEIsSUFBSyxJQUFJaE0sRUFBSSxFQUFHa1ksRUFBTyxJQUFJaE4sTUFBTWMsRUFBSXZKLFFBQVN6QyxFQUFJZ00sRUFBSXZKLE9BQVF6QyxJQUFLa1ksRUFBS2xZLEdBQUtnTSxFQUFJaE0sR0FFakYsT0FBT2tZLEdBUEZDLENBQW1Cbk0sSUFXNUIsU0FBMEJDLEdBQ3hCLEdBQUlsTCxPQUFPME0sWUFBWS9NLE9BQU91TCxJQUFrRCx1QkFBekN2TCxPQUFPa0IsVUFBVThDLFNBQVN2RSxLQUFLOEwsR0FBZ0MsT0FBT2YsTUFBTVksS0FBS0csR0FadEZtTSxDQUFpQnBNLElBZXJELFdBQ0UsTUFBTSxJQUFJcEgsVUFBVSxtREFoQnVDeVQsR0E3RzdELGtJQWtJQSxTQUFTc0wsRUFBVUMsR0FDakIsR0FBc0Isb0JBQVh0VCxRQUEwQkEsT0FBT3VULFVBQzFDLFFBRUFBLFVBQVVGLFVBQVU3VyxNQUFNOFcsR0FJOUIsSUFBSUUsRUFBYUgsRUFBVSx5REFDdkJJLEVBQU9KLEVBQVUsU0FDakJLLEVBQVVMLEVBQVUsWUFDcEJNLEVBQVNOLEVBQVUsYUFBZUEsRUFBVSxhQUFlQSxFQUFVLFlBQ3JFTyxFQUFNUCxFQUFVLG1CQUNoQlEsRUFBbUJSLEVBQVUsWUFBY0EsRUFBVSxZQUVyRFMsRUFBYyxDQUNoQjNQLFNBQVMsRUFDVDRQLFNBQVMsR0FHWCxTQUFTbkksRUFBR3pOLEVBQUk2VixFQUFPOWYsR0FDckJpSyxFQUFHOFYsaUJBQWlCRCxFQUFPOWYsR0FBS3NmLEdBQWNNLEdBR2hELFNBQVNJLEVBQUkvVixFQUFJNlYsRUFBTzlmLEdBQ3RCaUssRUFBR2dXLG9CQUFvQkgsRUFBTzlmLEdBQUtzZixHQUFjTSxHQUduRCxTQUFTTSxFQUVUalcsRUFFQWtXLEdBQ0UsR0FBS0EsRUFBTCxDQUdBLEdBRmdCLE1BQWhCQSxFQUFTLEtBQWVBLEVBQVdBLEVBQVNDLFVBQVUsSUFFbERuVyxFQUNGLElBQ0UsR0FBSUEsRUFBR2lXLFFBQ0wsT0FBT2pXLEVBQUdpVyxRQUFRQyxHQUNiLEdBQUlsVyxFQUFHb1csa0JBQ1osT0FBT3BXLEVBQUdvVyxrQkFBa0JGLEdBQ3ZCLEdBQUlsVyxFQUFHcVcsc0JBQ1osT0FBT3JXLEVBQUdxVyxzQkFBc0JILEdBRWxDLE1BQU9sUCxHQUNQLE9BQU8sRUFJWCxPQUFPLEdBR1QsU0FBU3NQLEVBQWdCdFcsR0FDdkIsT0FBT0EsRUFBR3VXLE1BQVF2VyxJQUFPNUosVUFBWTRKLEVBQUd1VyxLQUFLQyxTQUFXeFcsRUFBR3VXLEtBQU92VyxFQUFHeVcsV0FHdkUsU0FBU0MsRUFFVDFXLEVBRUFrVyxFQUVBelgsRUFBS2tZLEdBQ0gsR0FBSTNXLEVBQUksQ0FDTnZCLEVBQU1BLEdBQU9ySSxTQUViLEVBQUcsQ0FDRCxHQUFnQixNQUFaOGYsSUFBcUMsTUFBaEJBLEVBQVMsR0FBYWxXLEVBQUd5VyxhQUFlaFksR0FBT3dYLEVBQVFqVyxFQUFJa1csR0FBWUQsRUFBUWpXLEVBQUlrVyxLQUFjUyxHQUFjM1csSUFBT3ZCLEVBQzdJLE9BQU91QixFQUdULEdBQUlBLElBQU92QixFQUFLLFlBRVR1QixFQUFLc1csRUFBZ0J0VyxJQUdoQyxPQUFPLEtBR1QsSUFnV0k0VyxFQWhXQUMsRUFBVSxPQUVkLFNBQVNDLEVBQVk5VyxFQUFJbE8sRUFBTWlsQixHQUM3QixHQUFJL1csR0FBTWxPLEVBQ1IsR0FBSWtPLEVBQUdnWCxVQUNMaFgsRUFBR2dYLFVBQVVELEVBQVEsTUFBUSxVQUFVamxCLE9BQ2xDLENBQ0wsSUFBSW1sQixHQUFhLElBQU1qWCxFQUFHaVgsVUFBWSxLQUFLN2YsUUFBUXlmLEVBQVMsS0FBS3pmLFFBQVEsSUFBTXRGLEVBQU8sSUFBSyxLQUMzRmtPLEVBQUdpWCxXQUFhQSxHQUFhRixFQUFRLElBQU1qbEIsRUFBTyxLQUFLc0YsUUFBUXlmLEVBQVMsTUFLOUUsU0FBU0ssRUFBSWxYLEVBQUltWCxFQUFNbmhCLEdBQ3JCLElBQUk2TixFQUFRN0QsR0FBTUEsRUFBRzZELE1BRXJCLEdBQUlBLEVBQU8sQ0FDVCxRQUFZLElBQVI3TixFQU9GLE9BTklJLFNBQVNnaEIsYUFBZWhoQixTQUFTZ2hCLFlBQVlDLGlCQUMvQ3JoQixFQUFNSSxTQUFTZ2hCLFlBQVlDLGlCQUFpQnJYLEVBQUksSUFDdkNBLEVBQUdzWCxlQUNadGhCLEVBQU1nSyxFQUFHc1gsbUJBR0ssSUFBVEgsRUFBa0JuaEIsRUFBTUEsRUFBSW1oQixHQUU3QkEsS0FBUXRULElBQXNDLElBQTVCc1QsRUFBSy9jLFFBQVEsWUFDbkMrYyxFQUFPLFdBQWFBLEdBR3RCdFQsRUFBTXNULEdBQVFuaEIsR0FBc0IsaUJBQVJBLEVBQW1CLEdBQUssT0FLMUQsU0FBU3VoQixFQUFPdlgsRUFBSXdYLEdBQ2xCLElBQUlDLEVBQW9CLEdBRXhCLEdBQWtCLGlCQUFQelgsRUFDVHlYLEVBQW9CelgsT0FFcEIsRUFBRyxDQUNELElBQUkwWCxFQUFZUixFQUFJbFgsRUFBSSxhQUVwQjBYLEdBQTJCLFNBQWRBLElBQ2ZELEVBQW9CQyxFQUFZLElBQU1ELFVBSWhDRCxJQUFheFgsRUFBS0EsRUFBR3lXLGFBR2pDLElBQUlrQixFQUFXOVYsT0FBTytWLFdBQWEvVixPQUFPZ1csaUJBQW1CaFcsT0FBT2lXLFdBQWFqVyxPQUFPa1csWUFHeEYsT0FBT0osR0FBWSxJQUFJQSxFQUFTRixHQUdsQyxTQUFTTyxFQUFLdlosRUFBS3daLEVBQVNqWixHQUMxQixHQUFJUCxFQUFLLENBQ1AsSUFBSStNLEVBQU8vTSxFQUFJeVoscUJBQXFCRCxHQUNoQzFtQixFQUFJLEVBQ0p5QixFQUFJd1ksRUFBS3hYLE9BRWIsR0FBSWdMLEVBQ0YsS0FBT3pOLEVBQUl5QixFQUFHekIsSUFDWnlOLEVBQVN3TSxFQUFLamEsR0FBSUEsR0FJdEIsT0FBT2lhLEVBR1QsTUFBTyxHQUdULFNBQVMyTSxJQUNQLElBQUlDLEVBQW1CaGlCLFNBQVNnaUIsaUJBRWhDLE9BQUlBLEdBR0toaUIsU0FBU2lHLGdCQWNwQixTQUFTZ2MsRUFBUXJZLEVBQUlzWSxFQUEyQkMsRUFBMkJDLEVBQVdDLEdBQ3BGLEdBQUt6WSxFQUFHMFksdUJBQXlCMVksSUFBTzZCLE9BQXhDLENBQ0EsSUFBSThXLEVBQVFDLEVBQUtDLEVBQU1DLEVBQVFDLEVBQU9DLEVBQVFDLEVBbUI5QyxHQWpCSWpaLElBQU82QixRQUFVN0IsSUFBT21ZLEtBRTFCUyxHQURBRCxFQUFTM1ksRUFBRzBZLHlCQUNDRSxJQUNiQyxFQUFPRixFQUFPRSxLQUNkQyxFQUFTSCxFQUFPRyxPQUNoQkMsRUFBUUosRUFBT0ksTUFDZkMsRUFBU0wsRUFBT0ssT0FDaEJDLEVBQVFOLEVBQU9NLFFBRWZMLEVBQU0sRUFDTkMsRUFBTyxFQUNQQyxFQUFTalgsT0FBT3FYLFlBQ2hCSCxFQUFRbFgsT0FBT3NYLFdBQ2ZILEVBQVNuWCxPQUFPcVgsWUFDaEJELEVBQVFwWCxPQUFPc1gsYUFHWmIsR0FBNkJDLElBQThCdlksSUFBTzZCLFNBRXJFNFcsRUFBWUEsR0FBYXpZLEVBQUd5VyxZQUd2QnBCLEdBQ0gsR0FDRSxHQUFJb0QsR0FBYUEsRUFBVUMsd0JBQTBELFNBQWhDeEIsRUFBSXVCLEVBQVcsY0FBMkJGLEdBQTRELFdBQS9CckIsRUFBSXVCLEVBQVcsYUFBMkIsQ0FDcEssSUFBSVcsRUFBZ0JYLEVBQVVDLHdCQUU5QkUsR0FBT1EsRUFBY1IsSUFBTVMsU0FBU25DLEVBQUl1QixFQUFXLHFCQUNuREksR0FBUU8sRUFBY1AsS0FBT1EsU0FBU25DLEVBQUl1QixFQUFXLHNCQUNyREssRUFBU0YsRUFBTUQsRUFBT0ssT0FDdEJELEVBQVFGLEVBQU9GLEVBQU9NLE1BQ3RCLGFBSUtSLEVBQVlBLEVBQVVoQyxZQUluQyxHQUFJK0IsR0FBYXhZLElBQU82QixPQUFRLENBRTlCLElBQUl5WCxFQUFXL0IsRUFBT2tCLEdBQWF6WSxHQUMvQnVaLEVBQVNELEdBQVlBLEVBQVN6bEIsRUFDOUIybEIsRUFBU0YsR0FBWUEsRUFBU3puQixFQUU5QnluQixJQUtGUixHQUpBRixHQUFPWSxJQUdQUixHQUFVUSxHQUVWVCxHQUpBRixHQUFRVSxJQUNSTixHQUFTTSxJQU9iLE1BQU8sQ0FDTFgsSUFBS0EsRUFDTEMsS0FBTUEsRUFDTkMsT0FBUUEsRUFDUkMsTUFBT0EsRUFDUEUsTUFBT0EsRUFDUEQsT0FBUUEsSUFZWixTQUFTUyxFQUFlelosRUFBSTBaLEVBQVFDLEdBS2xDLElBSkEsSUFBSUMsRUFBU0MsRUFBMkI3WixHQUFJLEdBQ3hDOFosRUFBWXpCLEVBQVFyWSxHQUFJMFosR0FHckJFLEdBQVEsQ0FDYixJQUFJRyxFQUFnQjFCLEVBQVF1QixHQUFRRCxHQVNwQyxLQU5tQixRQUFmQSxHQUF1QyxTQUFmQSxFQUNoQkcsR0FBYUMsRUFFYkQsR0FBYUMsR0FHWCxPQUFPSCxFQUNyQixHQUFJQSxJQUFXekIsSUFBNkIsTUFDNUN5QixFQUFTQyxFQUEyQkQsR0FBUSxHQUc5QyxPQUFPLEVBWVQsU0FBU0ksRUFBU2hhLEVBQUlpYSxFQUFVMU8sR0FLOUIsSUFKQSxJQUFJMk8sRUFBZSxFQUNmM29CLEVBQUksRUFDSmdXLEVBQVd2SCxFQUFHdUgsU0FFWGhXLEVBQUlnVyxFQUFTdlQsUUFBUSxDQUMxQixHQUFrQyxTQUE5QnVULEVBQVNoVyxHQUFHc1MsTUFBTUMsU0FBc0J5RCxFQUFTaFcsS0FBTzRvQixHQUFTQyxPQUFTN1MsRUFBU2hXLEtBQU80b0IsR0FBU0UsU0FBVzNELEVBQVFuUCxFQUFTaFcsR0FBSWdhLEVBQVFxRCxVQUFXNU8sR0FBSSxHQUFRLENBQ3BLLEdBQUlrYSxJQUFpQkQsRUFDbkIsT0FBTzFTLEVBQVNoVyxHQUdsQjJvQixJQUdGM29CLElBR0YsT0FBTyxLQVVULFNBQVMrb0IsRUFBVXRhLEVBQUlrVyxHQUdyQixJQUZBLElBQUlxRSxFQUFPdmEsRUFBR3dhLGlCQUVQRCxJQUFTQSxJQUFTSixHQUFTQyxPQUFrQyxTQUF6QmxELEVBQUlxRCxFQUFNLFlBQXlCckUsSUFBYUQsRUFBUXNFLEVBQU1yRSxLQUN2R3FFLEVBQU9BLEVBQUtFLHVCQUdkLE9BQU9GLEdBQVEsS0FXakIsU0FBU2htQixFQUFNeUwsRUFBSWtXLEdBQ2pCLElBQUkzaEIsRUFBUSxFQUVaLElBQUt5TCxJQUFPQSxFQUFHeVcsV0FDYixPQUFRLEVBS1YsS0FBT3pXLEVBQUtBLEVBQUd5YSx3QkFDcUIsYUFBOUJ6YSxFQUFHb08sU0FBU25ILGVBQWdDakgsSUFBT21hLEdBQVN0TyxPQUFXcUssSUFBWUQsRUFBUWpXLEVBQUlrVyxJQUNqRzNoQixJQUlKLE9BQU9BLEVBVVQsU0FBU21tQixFQUF3QjFhLEdBQy9CLElBQUkyYSxFQUFhLEVBQ2JDLEVBQVksRUFDWkMsRUFBYzFDLElBRWxCLEdBQUluWSxFQUNGLEVBQUcsQ0FDRCxJQUFJc1osRUFBVy9CLEVBQU92WCxHQUNsQnVaLEVBQVNELEVBQVN6bEIsRUFDbEIybEIsRUFBU0YsRUFBU3puQixFQUN0QjhvQixHQUFjM2EsRUFBRzhhLFdBQWF2QixFQUM5QnFCLEdBQWE1YSxFQUFHK2EsVUFBWXZCLFFBQ3JCeFosSUFBTzZhLElBQWdCN2EsRUFBS0EsRUFBR3lXLGFBRzFDLE1BQU8sQ0FBQ2tFLEVBQVlDLEdBc0J0QixTQUFTZixFQUEyQjdaLEVBQUlnYixHQUV0QyxJQUFLaGIsSUFBT0EsRUFBRzBZLHNCQUF1QixPQUFPUCxJQUM3QyxJQUFJOEMsRUFBT2piLEVBQ1BrYixHQUFVLEVBRWQsR0FFRSxHQUFJRCxFQUFLRSxZQUFjRixFQUFLRyxhQUFlSCxFQUFLSSxhQUFlSixFQUFLSyxhQUFjLENBQ2hGLElBQUlDLEVBQVVyRSxFQUFJK0QsR0FFbEIsR0FBSUEsRUFBS0UsWUFBY0YsRUFBS0csY0FBcUMsUUFBckJHLEVBQVFDLFdBQTRDLFVBQXJCRCxFQUFRQyxZQUEwQlAsRUFBS0ksYUFBZUosRUFBS0ssZUFBc0MsUUFBckJDLEVBQVFFLFdBQTRDLFVBQXJCRixFQUFRRSxXQUF3QixDQUNwTixJQUFLUixFQUFLdkMsdUJBQXlCdUMsSUFBUzdrQixTQUFTc2xCLEtBQU0sT0FBT3ZELElBQ2xFLEdBQUkrQyxHQUFXRixFQUFhLE9BQU9DLEVBQ25DQyxHQUFVLFVBS1BELEVBQU9BLEVBQUt4RSxZQUVyQixPQUFPMEIsSUFlVCxTQUFTd0QsRUFBWUMsRUFBT0MsR0FDMUIsT0FBTzNtQixLQUFLNG1CLE1BQU1GLEVBQU1oRCxPQUFTMWpCLEtBQUs0bUIsTUFBTUQsRUFBTWpELE1BQVExakIsS0FBSzRtQixNQUFNRixFQUFNL0MsUUFBVTNqQixLQUFLNG1CLE1BQU1ELEVBQU1oRCxPQUFTM2pCLEtBQUs0bUIsTUFBTUYsRUFBTTVDLFVBQVk5akIsS0FBSzRtQixNQUFNRCxFQUFNN0MsU0FBVzlqQixLQUFLNG1CLE1BQU1GLEVBQU0zQyxTQUFXL2pCLEtBQUs0bUIsTUFBTUQsRUFBTTVDLE9BS3ZOLFNBQVM4QyxFQUFTQyxFQUFVQyxHQUMxQixPQUFPLFdBQ0wsSUFBS3JGLEVBQWtCLENBQ3JCLElBQUlzRixFQUFPMWtCLFVBQ1AyUyxFQUFReFYsS0FFUSxJQUFoQnVuQixFQUFLbG9CLE9BQ1Bnb0IsRUFBU3RxQixLQUFLeVksRUFBTytSLEVBQUssSUFFMUJGLEVBQVN6a0IsTUFBTTRTLEVBQU8rUixHQUd4QnRGLEVBQW1CdUYsWUFBVyxXQUM1QnZGLE9BQW1CLElBQ2xCcUYsS0FVVCxTQUFTRyxFQUFTcGMsRUFBSXFjLEVBQUdDLEdBQ3ZCdGMsRUFBRzhhLFlBQWN1QixFQUNqQnJjLEVBQUcrYSxXQUFhdUIsRUFHbEIsU0FBU3pRLEVBQU03TCxHQUNiLElBQUl1YyxFQUFVMWEsT0FBTzBhLFFBQ2pCQyxFQUFJM2EsT0FBTzRhLFFBQVU1YSxPQUFPNmEsTUFFaEMsT0FBSUgsR0FBV0EsRUFBUUksSUFDZEosRUFBUUksSUFBSTNjLEdBQUk0YyxXQUFVLEdBQ3hCSixFQUNGQSxFQUFFeGMsR0FBSTZMLE9BQU0sR0FBTSxHQUVsQjdMLEVBQUc0YyxXQUFVLEdBSXhCLFNBQVNDLEVBQVE3YyxFQUFJOGMsR0FDbkI1RixFQUFJbFgsRUFBSSxXQUFZLFlBQ3BCa1gsRUFBSWxYLEVBQUksTUFBTzhjLEVBQUtsRSxLQUNwQjFCLEVBQUlsWCxFQUFJLE9BQVE4YyxFQUFLakUsTUFDckIzQixFQUFJbFgsRUFBSSxRQUFTOGMsRUFBSzdELE9BQ3RCL0IsRUFBSWxYLEVBQUksU0FBVThjLEVBQUs5RCxRQUd6QixTQUFTK0QsRUFBVS9jLEdBQ2pCa1gsRUFBSWxYLEVBQUksV0FBWSxJQUNwQmtYLEVBQUlsWCxFQUFJLE1BQU8sSUFDZmtYLEVBQUlsWCxFQUFJLE9BQVEsSUFDaEJrWCxFQUFJbFgsRUFBSSxRQUFTLElBQ2pCa1gsRUFBSWxYLEVBQUksU0FBVSxJQUdwQixJQUFJZ2QsRUFBVSxZQUFhLElBQUlDLE1BQU9DLFVBRXRDLFNBQVNDLElBQ1AsSUFDSUMsRUFEQUMsRUFBa0IsR0FFdEIsTUFBTyxDQUNMQyxzQkFBdUIsWUFDckJELEVBQWtCLEdBQ2Ixb0IsS0FBSzRXLFFBQVFnUyxZQUNILEdBQUducEIsTUFBTTFDLEtBQUtpRCxLQUFLcUwsR0FBR3VILFVBQzVCekUsU0FBUSxTQUFVaU4sR0FDekIsR0FBOEIsU0FBMUJtSCxFQUFJbkgsRUFBTyxZQUF5QkEsSUFBVW9LLEdBQVNDLE1BQTNELENBQ0FpRCxFQUFnQjlkLEtBQUssQ0FDbkJxQixPQUFRbVAsRUFDUitNLEtBQU16RSxFQUFRdEksS0FHaEIsSUFBSXlOLEVBQVcvSSxFQUFjLEdBQUk0SSxFQUFnQkEsRUFBZ0JycEIsT0FBUyxHQUFHOG9CLE1BRzdFLEdBQUkvTSxFQUFNME4sc0JBQXVCLENBQy9CLElBQUlDLEVBQWNuRyxFQUFPeEgsR0FBTyxHQUU1QjJOLElBQ0ZGLEVBQVM1RSxLQUFPOEUsRUFBWWpuQixFQUM1QittQixFQUFTM0UsTUFBUTZFLEVBQVkxa0IsR0FJakMrVyxFQUFNeU4sU0FBV0EsT0FHckJHLGtCQUFtQixTQUEyQjVHLEdBQzVDc0csRUFBZ0I5ZCxLQUFLd1gsSUFFdkI2RyxxQkFBc0IsU0FBOEJoZCxHQUNsRHljLEVBQWdCekwsT0FwSnRCLFNBQXVCclUsRUFBSytXLEdBQzFCLElBQUssSUFBSS9pQixLQUFLZ00sRUFDWixHQUFLQSxFQUFJbkssZUFBZTdCLEdBRXhCLElBQUssSUFBSXVCLEtBQU93aEIsRUFDZCxHQUFJQSxFQUFJbGhCLGVBQWVOLElBQVF3aEIsRUFBSXhoQixLQUFTeUssRUFBSWhNLEdBQUd1QixHQUFNLE9BQU8rcUIsT0FBT3RzQixHQUkzRSxPQUFRLEVBMkltQnVzQixDQUFjVCxFQUFpQixDQUNwRHpjLE9BQVFBLElBQ04sSUFFTm1kLFdBQVksU0FBb0IvQixHQUM5QixJQUFJN1IsRUFBUXhWLEtBRVosSUFBS0EsS0FBSzRXLFFBQVFnUyxVQUdoQixPQUZBUyxhQUFhWixRQUNXLG1CQUFicEIsR0FBeUJBLEtBSXRDLElBQUlpQyxHQUFZLEVBQ1pDLEVBQWdCLEVBQ3BCYixFQUFnQnZhLFNBQVEsU0FBVWlVLEdBQ2hDLElBQUlvSCxFQUFPLEVBQ1B2ZCxFQUFTbVcsRUFBTW5XLE9BQ2Y0YyxFQUFXNWMsRUFBTzRjLFNBQ2xCWSxFQUFTL0YsRUFBUXpYLEdBQ2pCeWQsRUFBZXpkLEVBQU95ZCxhQUN0QkMsRUFBYTFkLEVBQU8wZCxXQUNwQkMsRUFBZ0J4SCxFQUFNK0YsS0FDdEIwQixFQUFlakgsRUFBTzNXLEdBQVEsR0FFOUI0ZCxJQUVGSixFQUFPeEYsS0FBTzRGLEVBQWEvbkIsRUFDM0IybkIsRUFBT3ZGLE1BQVEyRixFQUFheGxCLEdBRzlCNEgsRUFBT3dkLE9BQVNBLEVBRVp4ZCxFQUFPNmMsdUJBRUw5QixFQUFZMEMsRUFBY0QsS0FBWXpDLEVBQVk2QixFQUFVWSxLQUMvREcsRUFBYzNGLElBQU13RixFQUFPeEYsTUFBUTJGLEVBQWMxRixLQUFPdUYsRUFBT3ZGLFFBQVcyRSxFQUFTNUUsSUFBTXdGLEVBQU94RixNQUFRNEUsRUFBUzNFLEtBQU91RixFQUFPdkYsUUFFOUhzRixFQTJFWixTQUEyQkksRUFBZWYsRUFBVVksRUFBUTdTLEdBQzFELE9BQU9yVyxLQUFLdXBCLEtBQUt2cEIsS0FBS3dwQixJQUFJbEIsRUFBUzVFLElBQU0yRixFQUFjM0YsSUFBSyxHQUFLMWpCLEtBQUt3cEIsSUFBSWxCLEVBQVMzRSxLQUFPMEYsRUFBYzFGLEtBQU0sSUFBTTNqQixLQUFLdXBCLEtBQUt2cEIsS0FBS3dwQixJQUFJbEIsRUFBUzVFLElBQU13RixFQUFPeEYsSUFBSyxHQUFLMWpCLEtBQUt3cEIsSUFBSWxCLEVBQVMzRSxLQUFPdUYsRUFBT3ZGLEtBQU0sSUFBTXROLEVBQVFnUyxVQTVFMU1vQixDQUFrQkosRUFBZUYsRUFBY0MsRUFBWW5VLEVBQU1vQixVQUt2RW9RLEVBQVl5QyxFQUFRWixLQUN2QjVjLEVBQU95ZCxhQUFlYixFQUN0QjVjLEVBQU8wZCxXQUFhRixFQUVmRCxJQUNIQSxFQUFPaFUsRUFBTW9CLFFBQVFnUyxXQUd2QnBULEVBQU15VSxRQUFRaGUsRUFBUTJkLEVBQWVILEVBQVFELElBRzNDQSxJQUNGRixHQUFZLEVBQ1pDLEVBQWdCaHBCLEtBQUtELElBQUlpcEIsRUFBZUMsR0FDeENILGFBQWFwZCxFQUFPaWUscUJBQ3BCamUsRUFBT2llLG9CQUFzQjFDLFlBQVcsV0FDdEN2YixFQUFPc2QsY0FBZ0IsRUFDdkJ0ZCxFQUFPeWQsYUFBZSxLQUN0QnpkLEVBQU80YyxTQUFXLEtBQ2xCNWMsRUFBTzBkLFdBQWEsS0FDcEIxZCxFQUFPNmMsc0JBQXdCLE9BQzlCVSxHQUNIdmQsRUFBTzZjLHNCQUF3QlUsTUFHbkNILGFBQWFaLEdBRVJhLEVBR0hiLEVBQXNCakIsWUFBVyxXQUNQLG1CQUFiSCxHQUF5QkEsTUFDbkNrQyxHQUpxQixtQkFBYmxDLEdBQXlCQSxJQU90Q3FCLEVBQWtCLElBRXBCdUIsUUFBUyxTQUFpQmhlLEVBQVFrZSxFQUFhVixFQUFRVyxHQUNyRCxHQUFJQSxFQUFVLENBQ1o3SCxFQUFJdFcsRUFBUSxhQUFjLElBQzFCc1csRUFBSXRXLEVBQVEsWUFBYSxJQUN6QixJQUFJMFksRUFBVy9CLEVBQU81aUIsS0FBS3FMLElBQ3ZCdVosRUFBU0QsR0FBWUEsRUFBU3psQixFQUM5QjJsQixFQUFTRixHQUFZQSxFQUFTem5CLEVBQzlCbXRCLEdBQWNGLEVBQVlqRyxLQUFPdUYsRUFBT3ZGLE9BQVNVLEdBQVUsR0FDM0QwRixHQUFjSCxFQUFZbEcsSUFBTXdGLEVBQU94RixNQUFRWSxHQUFVLEdBQzdENVksRUFBT3NlLGFBQWVGLEVBQ3RCcGUsRUFBT3VlLGFBQWVGLEVBQ3RCL0gsRUFBSXRXLEVBQVEsWUFBYSxlQUFpQm9lLEVBQWEsTUFBUUMsRUFBYSxTQWtCcEYsU0FBaUJyZSxHQUNSQSxFQUFPd2UsWUFsQlJDLENBQVF6ZSxHQUVSc1csRUFBSXRXLEVBQVEsYUFBYyxhQUFlbWUsRUFBVyxNQUFRcHFCLEtBQUs0VyxRQUFRK1QsT0FBUyxJQUFNM3FCLEtBQUs0VyxRQUFRK1QsT0FBUyxLQUM5R3BJLEVBQUl0VyxFQUFRLFlBQWEsc0JBQ0UsaUJBQXBCQSxFQUFPMmUsVUFBeUJ2QixhQUFhcGQsRUFBTzJlLFVBQzNEM2UsRUFBTzJlLFNBQVdwRCxZQUFXLFdBQzNCakYsRUFBSXRXLEVBQVEsYUFBYyxJQUMxQnNXLEVBQUl0VyxFQUFRLFlBQWEsSUFDekJBLEVBQU8yZSxVQUFXLEVBQ2xCM2UsRUFBT3NlLFlBQWEsRUFDcEJ0ZSxFQUFPdWUsWUFBYSxJQUNuQkosTUFjWCxJQUFJUyxFQUFVLEdBQ1ZDLEVBQVcsQ0FDYkMscUJBQXFCLEdBRW5CQyxFQUFnQixDQUNsQkMsTUFBTyxTQUFlQyxHQUVwQixJQUFLLElBQUlsUSxLQUFVOFAsRUFDYkEsRUFBU3JzQixlQUFldWMsTUFBYUEsS0FBVWtRLEtBQ2pEQSxFQUFPbFEsR0FBVThQLEVBQVM5UCxJQUk5QjZQLEVBQVFqZ0IsS0FBS3NnQixJQUVmQyxZQUFhLFNBQXFCQyxFQUFXQyxFQUFVOVUsR0FDckQsSUFBSWYsRUFBUXhWLEtBRVpBLEtBQUtzckIsZUFBZ0IsRUFFckIvVSxFQUFJZ1YsT0FBUyxXQUNYL1YsRUFBTThWLGVBQWdCLEdBR3hCLElBQUlFLEVBQWtCSixFQUFZLFNBQ2xDUCxFQUFRMWMsU0FBUSxTQUFVK2MsR0FDbkJHLEVBQVNILEVBQU9PLGNBRWpCSixFQUFTSCxFQUFPTyxZQUFZRCxJQUM5QkgsRUFBU0gsRUFBT08sWUFBWUQsR0FBaUIxTCxFQUFjLENBQ3pEdUwsU0FBVUEsR0FDVDlVLElBS0Q4VSxFQUFTelUsUUFBUXNVLEVBQU9PLGFBQWVKLEVBQVNILEVBQU9PLFlBQVlMLElBQ3JFQyxFQUFTSCxFQUFPTyxZQUFZTCxHQUFXdEwsRUFBYyxDQUNuRHVMLFNBQVVBLEdBQ1Q5VSxTQUlUbVYsa0JBQW1CLFNBQTJCTCxFQUFVaGdCLEVBQUl5ZixFQUFVbFUsR0FZcEUsSUFBSyxJQUFJb0UsS0FYVDZQLEVBQVExYyxTQUFRLFNBQVUrYyxHQUN4QixJQUFJTyxFQUFhUCxFQUFPTyxXQUN4QixHQUFLSixFQUFTelUsUUFBUTZVLElBQWdCUCxFQUFPSCxvQkFBN0MsQ0FDQSxJQUFJWSxFQUFjLElBQUlULEVBQU9HLEVBQVVoZ0IsRUFBSWdnQixFQUFTelUsU0FDcEQrVSxFQUFZTixTQUFXQSxFQUN2Qk0sRUFBWS9VLFFBQVV5VSxFQUFTelUsUUFDL0J5VSxFQUFTSSxHQUFjRSxFQUV2QjlMLEVBQVNpTCxFQUFVYSxFQUFZYixjQUdkTyxFQUFTelUsUUFDMUIsR0FBS3lVLEVBQVN6VSxRQUFRblksZUFBZXVjLEdBQXJDLENBQ0EsSUFBSTRRLEVBQVc1ckIsS0FBSzZyQixhQUFhUixFQUFVclEsRUFBUXFRLEVBQVN6VSxRQUFRb0UsU0FFNUMsSUFBYjRRLElBQ1RQLEVBQVN6VSxRQUFRb0UsR0FBVTRRLEtBSWpDRSxtQkFBb0IsU0FBNEIzdUIsRUFBTWt1QixHQUNwRCxJQUFJVSxFQUFrQixHQU10QixPQUxBbEIsRUFBUTFjLFNBQVEsU0FBVStjLEdBQ2MsbUJBQTNCQSxFQUFPYSxpQkFFbEJsTSxFQUFTa00sRUFBaUJiLEVBQU9hLGdCQUFnQmh2QixLQUFLc3VCLEVBQVNILEVBQU9PLFlBQWF0dUIsT0FFOUU0dUIsR0FFVEYsYUFBYyxTQUFzQlIsRUFBVWx1QixFQUFNVSxHQUNsRCxJQUFJbXVCLEVBU0osT0FSQW5CLEVBQVExYyxTQUFRLFNBQVUrYyxHQUVuQkcsRUFBU0gsRUFBT08sYUFFakJQLEVBQU9lLGlCQUEyRCxtQkFBakNmLEVBQU9lLGdCQUFnQjl1QixLQUMxRDZ1QixFQUFnQmQsRUFBT2UsZ0JBQWdCOXVCLEdBQU1KLEtBQUtzdUIsRUFBU0gsRUFBT08sWUFBYTV0QixPQUc1RW11QixJQUlYLFNBQVNFLEVBQWM5UCxHQUNyQixJQUFJaVAsRUFBV2pQLEVBQUtpUCxTQUNoQmMsRUFBUy9QLEVBQUsrUCxPQUNkaHZCLEVBQU9pZixFQUFLamYsS0FDWml2QixFQUFXaFEsRUFBS2dRLFNBQ2hCQyxFQUFValEsRUFBS2lRLFFBQ2ZDLEVBQU9sUSxFQUFLa1EsS0FDWkMsRUFBU25RLEVBQUttUSxPQUNkcFAsRUFBV2YsRUFBS2UsU0FDaEJDLEVBQVdoQixFQUFLZ0IsU0FDaEJvUCxFQUFvQnBRLEVBQUtvUSxrQkFDekJDLEVBQW9CclEsRUFBS3FRLGtCQUN6QjFTLEVBQWdCcUMsRUFBS3JDLGNBQ3JCMlMsRUFBY3RRLEVBQUtzUSxZQUNuQkMsRUFBdUJ2USxFQUFLdVEscUJBRWhDLEdBREF0QixFQUFXQSxHQUFZYyxHQUFVQSxFQUFPOUQsR0FDeEMsQ0FDQSxJQUFJOVIsRUFDQUssRUFBVXlVLEVBQVN6VSxRQUNuQmdXLEVBQVMsS0FBT3p2QixFQUFLcUMsT0FBTyxHQUFHOFMsY0FBZ0JuVixFQUFLMHZCLE9BQU8sSUFFM0QzZixPQUFPNGYsYUFBZ0JwTSxHQUFlQyxHQU14Q3BLLEVBQU05VSxTQUFTc3JCLFlBQVksVUFDdkJDLFVBQVU3dkIsR0FBTSxHQUFNLEdBTjFCb1osRUFBTSxJQUFJdVcsWUFBWTN2QixFQUFNLENBQzFCOHZCLFNBQVMsRUFDVEMsWUFBWSxJQU9oQjNXLEVBQUlnSCxHQUFLK08sR0FBUUgsRUFDakI1VixFQUFJN04sS0FBTzZqQixHQUFVSixFQUNyQjVWLEVBQUk4SCxLQUFPK04sR0FBWUQsRUFDdkI1VixFQUFJVyxNQUFRbVYsRUFDWjlWLEVBQUk0RyxTQUFXQSxFQUNmNUcsRUFBSTZHLFNBQVdBLEVBQ2Y3RyxFQUFJaVcsa0JBQW9CQSxFQUN4QmpXLEVBQUlrVyxrQkFBb0JBLEVBQ3hCbFcsRUFBSXdELGNBQWdCQSxFQUNwQnhELEVBQUltSSxTQUFXZ08sRUFBY0EsRUFBWVMsaUJBQWM3dEIsRUFFdkQsSUFBSTh0QixFQUFxQnROLEVBQWMsR0FBSTZNLEVBQXNCM0IsRUFBY2MsbUJBQW1CM3VCLEVBQU1rdUIsSUFFeEcsSUFBSyxJQUFJclEsS0FBVW9TLEVBQ2pCN1csRUFBSXlFLEdBQVVvUyxFQUFtQnBTLEdBRy9CbVIsR0FDRkEsRUFBT0QsY0FBYzNWLEdBR25CSyxFQUFRZ1csSUFDVmhXLEVBQVFnVyxHQUFRN3ZCLEtBQUtzdUIsRUFBVTlVLElBSW5DLElBQUk0VSxFQUFjLFNBQXFCQyxFQUFXQyxHQUNoRCxJQUFJalAsRUFBT3ZaLFVBQVV4RCxPQUFTLFFBQXNCQyxJQUFqQnVELFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUMzRWtYLEVBQWdCcUMsRUFBSzdGLElBQ3JCZ0IsRUFBTzJJLEVBQXlCOUQsRUFBTSxDQUFDLFFBRTNDNE8sRUFBY0csWUFBWS9zQixLQUFLb25CLEdBQS9Cd0YsQ0FBeUNJLEVBQVdDLEVBQVV2TCxFQUFjLENBQzFFdU4sT0FBUUEsRUFDUkMsU0FBVUEsRUFDVkMsUUFBU0EsRUFDVHBCLE9BQVFBLEVBQ1JxQixPQUFRQSxHQUNSQyxXQUFZQSxHQUNacEIsUUFBU0EsR0FDVHFCLFlBQWFBLEdBQ2JDLFlBQWE5TyxHQUNiNk4sWUFBYUEsR0FDYmtCLGVBQWdCcEksR0FBU3FJLE9BQ3pCOVQsY0FBZUEsRUFDZm9ELFNBQVVBLEdBQ1ZxUCxrQkFBbUJBLEdBQ25CcFAsU0FBVUEsR0FDVnFQLGtCQUFtQkEsR0FDbkJxQixtQkFBb0JDLEdBQ3BCQyxxQkFBc0JDLEdBQ3RCQyxlQUFnQixXQUNkUixJQUFjLEdBRWhCUyxjQUFlLFdBQ2JULElBQWMsR0FFaEJVLHNCQUF1QixTQUErQmp4QixHQUNwRGt4QixFQUFlLENBQ2JoRCxTQUFVQSxFQUNWbHVCLEtBQU1BLEVBQ040YyxjQUFlQSxNQUdsQnhDLEtBR0wsU0FBUzhXLEVBQWVDLEdBQ3RCcEMsRUFBY3BNLEVBQWMsQ0FDMUI0TSxZQUFhQSxHQUNiTCxRQUFTQSxHQUNURCxTQUFVaUIsRUFDVmxCLE9BQVFBLEVBQ1JoUCxTQUFVQSxHQUNWcVAsa0JBQW1CQSxHQUNuQnBQLFNBQVVBLEdBQ1ZxUCxrQkFBbUJBLElBQ2xCNkIsSUFHTCxJQUFJakIsRUFDQUMsRUFDQUMsRUFDQXBCLEVBQ0FxQixHQUNBQyxHQUNBcEIsR0FDQXFCLEdBQ0F2USxHQUNBQyxHQUNBb1AsR0FDQUMsR0FDQThCLEdBQ0E3QixHQUlBOEIsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQWhRLEdBQ0FpUSxHQUNBQyxHQUdBQyxHQUVKQyxHQWhCSUMsSUFBc0IsRUFDdEJDLElBQWtCLEVBQ2xCQyxHQUFZLEdBVVpDLElBQXdCLEVBQ3hCQyxJQUF5QixFQUl6QkMsR0FBbUMsR0FFdkNDLElBQVUsRUFDTkMsR0FBb0IsR0FHcEJDLEdBQXFDLG9CQUFianVCLFNBQ3hCa3VCLEdBQTBCN08sRUFDMUI4TyxHQUFtQmpQLEdBQVFELEVBQWEsV0FBYSxRQUV6RG1QLEdBQW1CSCxLQUFtQjNPLElBQXFCRCxHQUFPLGNBQWVyZixTQUFTRSxjQUFjLE9BQ3BHbXVCLEdBQTBCLFdBQzVCLEdBQUtKLEdBQUwsQ0FFQSxHQUFJaFAsRUFDRixPQUFPLEVBR1QsSUFBSXJWLEVBQUs1SixTQUFTRSxjQUFjLEtBRWhDLE9BREEwSixFQUFHNkQsTUFBTTZnQixRQUFVLHNCQUNlLFNBQTNCMWtCLEVBQUc2RCxNQUFNOGdCLGVBVFksR0FXMUJDLEdBQW1CLFNBQTBCNWtCLEVBQUl1TCxHQUNuRCxJQUFJc1osRUFBUTNOLEVBQUlsWCxHQUNaOGtCLEVBQVV6TCxTQUFTd0wsRUFBTTVMLE9BQVNJLFNBQVN3TCxFQUFNRSxhQUFlMUwsU0FBU3dMLEVBQU1HLGNBQWdCM0wsU0FBU3dMLEVBQU1JLGlCQUFtQjVMLFNBQVN3TCxFQUFNSyxrQkFDaEpDLEVBQVNuTCxFQUFTaGEsRUFBSSxFQUFHdUwsR0FDekI2WixFQUFTcEwsRUFBU2hhLEVBQUksRUFBR3VMLEdBQ3pCOFosRUFBZ0JGLEdBQVVqTyxFQUFJaU8sR0FDOUJHLEVBQWlCRixHQUFVbE8sRUFBSWtPLEdBQy9CRyxFQUFrQkYsR0FBaUJoTSxTQUFTZ00sRUFBY0csWUFBY25NLFNBQVNnTSxFQUFjSSxhQUFlcE4sRUFBUThNLEdBQVFsTSxNQUM5SHlNLEVBQW1CSixHQUFrQmpNLFNBQVNpTSxFQUFlRSxZQUFjbk0sU0FBU2lNLEVBQWVHLGFBQWVwTixFQUFRK00sR0FBUW5NLE1BRXRJLEdBQXNCLFNBQWxCNEwsRUFBTS9nQixRQUNSLE1BQStCLFdBQXhCK2dCLEVBQU1jLGVBQXNELG1CQUF4QmQsRUFBTWMsY0FBcUMsV0FBYSxhQUdyRyxHQUFzQixTQUFsQmQsRUFBTS9nQixRQUNSLE9BQU8rZ0IsRUFBTWUsb0JBQW9CandCLE1BQU0sS0FBSzNCLFFBQVUsRUFBSSxXQUFhLGFBR3pFLEdBQUlteEIsR0FBVUUsRUFBcUIsT0FBZ0MsU0FBM0JBLEVBQXFCLE1BQWMsQ0FDekUsSUFBSVEsRUFBZ0QsU0FBM0JSLEVBQXFCLE1BQWUsT0FBUyxRQUN0RSxPQUFPRCxHQUFvQyxTQUF6QkUsRUFBZVEsT0FBb0JSLEVBQWVRLFFBQVVELEVBQW1DLGFBQWIsV0FHdEcsT0FBT1YsSUFBcUMsVUFBMUJFLEVBQWN2aEIsU0FBaUQsU0FBMUJ1aEIsRUFBY3ZoQixTQUFnRCxVQUExQnVoQixFQUFjdmhCLFNBQWlELFNBQTFCdWhCLEVBQWN2aEIsU0FBc0J5aEIsR0FBbUJULEdBQXVDLFNBQTVCRCxFQUFNTixLQUFnQ2EsR0FBc0MsU0FBNUJQLEVBQU1OLEtBQWdDZ0IsRUFBa0JHLEVBQW1CWixHQUFXLFdBQWEsY0FpQ25WaUIsR0FBZ0IsU0FBdUJ4YSxHQUN6QyxTQUFTeWEsRUFBS3h6QixFQUFPeXpCLEdBQ25CLE9BQU8sU0FBVS9ULEVBQUk3VSxFQUFNMmtCLEVBQVE5VyxHQUNqQyxJQUFJZ2IsRUFBWWhVLEVBQUczRyxRQUFRNGEsTUFBTXIwQixNQUFRdUwsRUFBS2tPLFFBQVE0YSxNQUFNcjBCLE1BQVFvZ0IsRUFBRzNHLFFBQVE0YSxNQUFNcjBCLE9BQVN1TCxFQUFLa08sUUFBUTRhLE1BQU1yMEIsS0FFakgsR0FBYSxNQUFUVSxJQUFrQnl6QixHQUFRQyxHQUc1QixPQUFPLEVBQ0YsR0FBYSxNQUFUMXpCLElBQTJCLElBQVZBLEVBQzFCLE9BQU8sRUFDRixHQUFJeXpCLEdBQWtCLFVBQVZ6ekIsRUFDakIsT0FBT0EsRUFDRixHQUFxQixtQkFBVkEsRUFDaEIsT0FBT3d6QixFQUFLeHpCLEVBQU0wZixFQUFJN1UsRUFBTTJrQixFQUFROVcsR0FBTSthLEVBQW5DRCxDQUF5QzlULEVBQUk3VSxFQUFNMmtCLEVBQVE5VyxHQUVsRSxJQUFJa2IsR0FBY0gsRUFBTy9ULEVBQUs3VSxHQUFNa08sUUFBUTRhLE1BQU1yMEIsS0FDbEQsT0FBaUIsSUFBVlUsR0FBbUMsaUJBQVZBLEdBQXNCQSxJQUFVNHpCLEdBQWM1ekIsRUFBTWtILE1BQVFsSCxFQUFNNEgsUUFBUWdzQixJQUFlLEdBSy9ILElBQUlELEVBQVEsR0FDUkUsRUFBZ0I5YSxFQUFRNGEsTUFFdkJFLEdBQTJDLFVBQTFCaFMsRUFBUWdTLEtBQzVCQSxFQUFnQixDQUNkdjBCLEtBQU11MEIsSUFJVkYsRUFBTXIwQixLQUFPdTBCLEVBQWN2MEIsS0FDM0JxMEIsRUFBTUcsVUFBWU4sRUFBS0ssRUFBY0osTUFBTSxHQUMzQ0UsRUFBTUksU0FBV1AsRUFBS0ssRUFBY0csS0FDcENMLEVBQU1NLFlBQWNKLEVBQWNJLFlBQ2xDbGIsRUFBUTRhLE1BQVFBLEdBRWR6RCxHQUFzQixZQUNuQitCLElBQTJCdkMsR0FDOUJoTCxFQUFJZ0wsRUFBUyxVQUFXLFNBR3hCVSxHQUF3QixZQUNyQjZCLElBQTJCdkMsR0FDOUJoTCxFQUFJZ0wsRUFBUyxVQUFXLEtBS3hCbUMsSUFDRmp1QixTQUFTMGYsaUJBQWlCLFNBQVMsU0FBVTVLLEdBQzNDLEdBQUk0WSxHQUtGLE9BSkE1WSxFQUFJd2IsaUJBQ0p4YixFQUFJeWIsaUJBQW1CemIsRUFBSXliLGtCQUMzQnpiLEVBQUkwYiwwQkFBNEIxYixFQUFJMGIsMkJBQ3BDOUMsSUFBa0IsR0FDWCxLQUVSLEdBR0wsSUFBSStDLEdBQWdDLFNBQXVDM2IsR0FDekUsR0FBSThXLEVBQVEsQ0FDVjlXLEVBQU1BLEVBQUk0YixRQUFVNWIsRUFBSTRiLFFBQVEsR0FBSzViLEVBRXJDLElBQUk2YixHQWhGMkQxSyxFQWdGckJuUixFQUFJOGIsUUFoRm9CMUssRUFnRlhwUixFQUFJK2IsUUE5RTdEbEQsR0FBVW1ELE1BQUssU0FBVWxILEdBQ3ZCLElBQUkxRixFQUFVMEYsR0FBZCxDQUNBLElBQUlsRCxFQUFPekUsRUFBUTJILEdBQ2ZtSCxFQUFZbkgsRUFBU2hELEdBQVN6UixRQUFRNmIscUJBQ3RDQyxFQUFxQmhMLEdBQUtTLEVBQUtqRSxLQUFPc08sR0FBYTlLLEdBQUtTLEVBQUsvRCxNQUFRb08sRUFDckVHLEVBQW1CaEwsR0FBS1EsRUFBS2xFLElBQU11TyxHQUFhN0ssR0FBS1EsRUFBS2hFLE9BQVNxTyxFQUV2RSxPQUFJQSxHQUFhRSxHQUFzQkMsRUFDOUJuaEIsRUFBTTZaLE9BRGYsTUFJSzdaLEdBcUVMLEdBQUk0Z0IsRUFBUyxDQUVYLElBQUlsUixFQUFRLEdBRVosSUFBSyxJQUFJdGtCLEtBQUsyWixFQUNSQSxFQUFJOVgsZUFBZTdCLEtBQ3JCc2tCLEVBQU10a0IsR0FBSzJaLEVBQUkzWixJQUluQnNrQixFQUFNalYsT0FBU2lWLEVBQU1pTCxPQUFTaUcsRUFDOUJsUixFQUFNNlEsb0JBQWlCLEVBQ3ZCN1EsRUFBTThRLHFCQUFrQixFQUV4QkksRUFBUS9KLEdBQVN1SyxZQUFZMVIsSUFoR0wsSUFBcUN3RyxFQUFHQyxFQUNoRW5XLEdBb0dGcWhCLEdBQXdCLFNBQStCdGMsR0FDckQ4VyxHQUNGQSxFQUFPdkwsV0FBV3VHLEdBQVN5SyxpQkFBaUJ2YyxFQUFJdEssU0FVcEQsU0FBU3VaLEdBQVNuYSxFQUFJdUwsR0FDcEIsSUFBTXZMLElBQU1BLEVBQUd3VyxVQUE0QixJQUFoQnhXLEVBQUd3VyxTQUM1QixLQUFNLDhDQUE4Q2xWLE9BQU8sR0FBR3JMLFNBQVN2RSxLQUFLc08sSUFHOUVyTCxLQUFLcUwsR0FBS0EsRUFFVnJMLEtBQUs0VyxRQUFVQSxFQUFVaUosRUFBUyxHQUFJakosR0FFdEN2TCxFQUFHZ2QsR0FBV3JvQixLQUNkLElBQUk4cUIsRUFBVyxDQUNiMEcsTUFBTyxLQUNQdUIsTUFBTSxFQUNOQyxVQUFVLEVBQ1YvdEIsTUFBTyxLQUNQZ3VCLE9BQVEsS0FDUmhaLFVBQVcsV0FBV2laLEtBQUs3bkIsRUFBR29PLFVBQVksTUFBUSxLQUNsRDBaLGNBQWUsRUFFZkMsWUFBWSxFQUVaQyxzQkFBdUIsS0FFdkJDLG1CQUFtQixFQUNuQkMsVUFBVyxXQUNULE9BQU90RCxHQUFpQjVrQixFQUFJckwsS0FBSzRXLFVBRW5DNGMsV0FBWSxpQkFDWkMsWUFBYSxrQkFDYkMsVUFBVyxnQkFDWEMsT0FBUSxTQUNSL2EsT0FBUSxLQUNSZ2IsaUJBQWlCLEVBQ2pCaEwsVUFBVyxFQUNYK0IsT0FBUSxLQUNSa0osUUFBUyxTQUFpQkMsRUFBY3pHLEdBQ3RDeUcsRUFBYUQsUUFBUSxPQUFReEcsRUFBTzBHLGNBRXRDQyxZQUFZLEVBQ1pDLGdCQUFnQixFQUNoQkMsV0FBWSxVQUNaQyxNQUFPLEVBQ1BDLGtCQUFrQixFQUNsQkMscUJBQXNCbkwsT0FBT3hFLFNBQVd3RSxPQUFTaGMsUUFBUXdYLFNBQVN4WCxPQUFPb25CLGlCQUFrQixLQUFPLEVBQ2xHQyxlQUFlLEVBQ2ZDLGNBQWUsb0JBQ2ZDLGdCQUFnQixFQUNoQkMsa0JBQW1CLEVBQ25CQyxlQUFnQixDQUNkak4sRUFBRyxFQUNIQyxFQUFHLEdBRUxpTixnQkFBNEMsSUFBNUJwUCxHQUFTb1AsZ0JBQTRCLGlCQUFrQjFuQixPQUN2RXVsQixxQkFBc0IsR0FJeEIsSUFBSyxJQUFJdDFCLEtBRlQ2dEIsRUFBY1Usa0JBQWtCMXJCLEtBQU1xTCxFQUFJeWYsR0FFekJBLElBQ2IzdEIsS0FBUXlaLEtBQWFBLEVBQVF6WixHQUFRMnRCLEVBQVMzdEIsSUFNbEQsSUFBSyxJQUFJaUUsS0FIVGd3QixHQUFjeGEsR0FHQzVXLEtBQ1EsTUFBakJvQixFQUFHNUIsT0FBTyxJQUFrQyxtQkFBYlEsS0FBS29CLEtBQ3RDcEIsS0FBS29CLEdBQU1wQixLQUFLb0IsR0FBSWhELEtBQUs0QixPQUs3QkEsS0FBSzYwQixpQkFBa0JqZSxFQUFRMmQsZUFBd0IxRSxHQUVuRDd2QixLQUFLNjBCLGtCQUVQNzBCLEtBQUs0VyxRQUFReWQsb0JBQXNCLEdBSWpDemQsRUFBUWdlLGVBQ1Y5YixFQUFHek4sRUFBSSxjQUFlckwsS0FBSzgwQixjQUUzQmhjLEVBQUd6TixFQUFJLFlBQWFyTCxLQUFLODBCLGFBQ3pCaGMsRUFBR3pOLEVBQUksYUFBY3JMLEtBQUs4MEIsY0FHeEI5MEIsS0FBSzYwQixrQkFDUC9iLEVBQUd6TixFQUFJLFdBQVlyTCxNQUNuQjhZLEVBQUd6TixFQUFJLFlBQWFyTCxPQUd0Qm92QixHQUFVeGtCLEtBQUs1SyxLQUFLcUwsSUFFcEJ1TCxFQUFRM1IsT0FBUzJSLEVBQVEzUixNQUFNeEgsS0FBT3VDLEtBQUsreUIsS0FBS25jLEVBQVEzUixNQUFNeEgsSUFBSXVDLE9BQVMsSUFFM0U2ZixFQUFTN2YsS0FBTXdvQixLQStwQ2pCLFNBQVN1TSxHQUFReEksRUFBUUQsRUFBTWUsRUFBUTJILEVBQVU1SSxFQUFVNkksRUFBWWxiLEVBQWVzRixHQUNwRixJQUFJOUksRUFHQTJlLEVBRkE3SixFQUFXa0IsRUFBT2xFLEdBQ2xCOE0sRUFBVzlKLEVBQVN6VSxRQUFRa0QsT0EyQmhDLE9BeEJJNU0sT0FBTzRmLGFBQWdCcE0sR0FBZUMsR0FNeENwSyxFQUFNOVUsU0FBU3NyQixZQUFZLFVBQ3ZCQyxVQUFVLFFBQVEsR0FBTSxHQU41QnpXLEVBQU0sSUFBSXVXLFlBQVksT0FBUSxDQUM1QkcsU0FBUyxFQUNUQyxZQUFZLElBT2hCM1csRUFBSWdILEdBQUsrTyxFQUNUL1YsRUFBSTdOLEtBQU82akIsRUFDWGhXLEVBQUltUCxRQUFVMkgsRUFDZDlXLEVBQUk2ZSxZQUFjSixFQUNsQnplLEVBQUlpSCxRQUFVNE8sR0FBWUUsRUFDMUIvVixFQUFJOGUsWUFBY0osR0FBY3ZSLEVBQVE0SSxHQUN4Qy9WLEVBQUk4SSxnQkFBa0JBLEVBQ3RCOUksRUFBSXdELGNBQWdCQSxFQUNwQndTLEVBQU9MLGNBQWMzVixHQUVqQjRlLElBQ0ZELEVBQVNDLEVBQVNwNEIsS0FBS3N1QixFQUFVOVUsRUFBS3dELElBR2pDbWIsRUFHVCxTQUFTSSxHQUFrQmpxQixHQUN6QkEsRUFBRzRPLFdBQVksRUFHakIsU0FBU3NiLEtBQ1AvRixJQUFVLEVBNkVaLFNBQVNnRyxHQUFZbnFCLEdBS25CLElBSkEsSUFBSTdILEVBQU02SCxFQUFHaVksUUFBVWpZLEVBQUdpWCxVQUFZalgsRUFBR2dFLElBQU1oRSxFQUFHb3FCLEtBQU9wcUIsRUFBRzBvQixZQUN4RG4zQixFQUFJNEcsRUFBSW5FLE9BQ1JxMkIsRUFBTSxFQUVIOTRCLEtBQ0w4NEIsR0FBT2x5QixFQUFJakUsV0FBVzNDLEdBR3hCLE9BQU84NEIsRUFBSXAwQixTQUFTLElBY3RCLFNBQVNxMEIsR0FBVXYwQixHQUNqQixPQUFPb21CLFdBQVdwbUIsRUFBSSxHQUd4QixTQUFTdzBCLEdBQWdCcHBCLEdBQ3ZCLE9BQU82YyxhQUFhN2MsR0EzeUN0QmdaLEdBQVNobkIsVUFFVCxDQUNFMkUsWUFBYXFpQixHQUNic04saUJBQWtCLFNBQTBCN21CLEdBQ3JDak0sS0FBS3FMLEdBQUd3cUIsU0FBUzVwQixJQUFXQSxJQUFXak0sS0FBS3FMLEtBQy9DeWpCLEdBQWEsT0FHakJnSCxjQUFlLFNBQXVCdmYsRUFBS3RLLEdBQ3pDLE1BQXlDLG1CQUEzQmpNLEtBQUs0VyxRQUFRMmMsVUFBMkJ2ekIsS0FBSzRXLFFBQVEyYyxVQUFVeDJCLEtBQUtpRCxLQUFNdVcsRUFBS3RLLEVBQVFvaEIsR0FBVXJ0QixLQUFLNFcsUUFBUTJjLFdBRTlIdUIsWUFBYSxTQUVidmUsR0FDRSxHQUFLQSxFQUFJMlcsV0FBVCxDQUVBLElBQUkxWCxFQUFReFYsS0FDUnFMLEVBQUtyTCxLQUFLcUwsR0FDVnVMLEVBQVU1VyxLQUFLNFcsUUFDZmdkLEVBQWtCaGQsRUFBUWdkLGdCQUMxQnJvQixFQUFPZ0wsRUFBSWhMLEtBQ1h3cUIsRUFBUXhmLEVBQUk0YixTQUFXNWIsRUFBSTRiLFFBQVEsSUFBTTViLEVBQUl5ZixhQUFtQyxVQUFwQnpmLEVBQUl5ZixhQUEyQnpmLEVBQzNGdEssR0FBVThwQixHQUFTeGYsR0FBS3RLLE9BQ3hCZ3FCLEVBQWlCMWYsRUFBSXRLLE9BQU9pcUIsYUFBZTNmLEVBQUk0ZixNQUFRNWYsRUFBSTRmLEtBQUssSUFBTTVmLEVBQUk2ZixjQUFnQjdmLEVBQUk2ZixlQUFlLEtBQU9ucUIsRUFDcEgyTSxFQUFTaEMsRUFBUWdDLE9BS3JCLEdBNnZDSixTQUFnQ3lkLEdBQzlCNUcsR0FBa0Jwd0IsT0FBUyxFQUMzQixJQUFJaTNCLEVBQVNELEVBQUs5UyxxQkFBcUIsU0FDbkMzSCxFQUFNMGEsRUFBT2ozQixPQUVqQixLQUFPdWMsS0FBTyxDQUNaLElBQUl2USxFQUFLaXJCLEVBQU8xYSxHQUNoQnZRLEVBQUdrckIsU0FBVzlHLEdBQWtCN2tCLEtBQUtTLElBdndDckNtckIsQ0FBdUJuckIsSUFHbkJnaUIsS0FJQSx3QkFBd0I2RixLQUFLM25CLElBQXdCLElBQWZnTCxFQUFJa2dCLFFBQWdCN2YsRUFBUW9jLFVBS2xFaUQsRUFBZVMsb0JBSW5CenFCLEVBQVM4VixFQUFROVYsRUFBUTJLLEVBQVFxRCxVQUFXNU8sR0FBSSxLQUVsQ1ksRUFBTzJlLFVBSWpCNkMsS0FBZXhoQixHQUFuQixDQVNBLEdBSEFrUixHQUFXdmQsRUFBTXFNLEdBQ2pCdWdCLEdBQW9CNXNCLEVBQU1xTSxFQUFRMkssRUFBUXFELFdBRXBCLG1CQUFYckIsR0FDVCxHQUFJQSxFQUFPN2IsS0FBS2lELEtBQU11VyxFQUFLdEssRUFBUWpNLE1BY2pDLE9BYkFxdUIsRUFBZSxDQUNiaEQsU0FBVTdWLEVBQ1YyVyxPQUFROEosRUFDUjk0QixLQUFNLFNBQ05pdkIsU0FBVW5nQixFQUNWcWdCLEtBQU1qaEIsRUFDTmtoQixPQUFRbGhCLElBR1Y4ZixFQUFZLFNBQVUzVixFQUFPLENBQzNCZSxJQUFLQSxTQUVQcWQsR0FBbUJyZCxFQUFJMlcsWUFBYzNXLEVBQUl3Yix1QkFHdEMsR0FBSW5aLElBQ1RBLEVBQVNBLEVBQU81WCxNQUFNLEtBQUt1eEIsTUFBSyxTQUFVb0UsR0FHeEMsR0FGQUEsRUFBVzVVLEVBQVFrVSxFQUFnQlUsRUFBU0MsT0FBUXZyQixHQUFJLEdBZXRELE9BWkFnakIsRUFBZSxDQUNiaEQsU0FBVTdWLEVBQ1YyVyxPQUFRd0ssRUFDUng1QixLQUFNLFNBQ05pdkIsU0FBVW5nQixFQUNWc2dCLE9BQVFsaEIsRUFDUmloQixLQUFNamhCLElBR1I4ZixFQUFZLFNBQVUzVixFQUFPLENBQzNCZSxJQUFLQSxLQUVBLE1BTVQsWUFEQXFkLEdBQW1CcmQsRUFBSTJXLFlBQWMzVyxFQUFJd2Isa0JBS3pDbmIsRUFBUXFjLFNBQVdsUixFQUFRa1UsRUFBZ0JyZixFQUFRcWMsT0FBUTVuQixHQUFJLElBS25FckwsS0FBSzYyQixrQkFBa0J0Z0IsRUFBS3dmLEVBQU85cEIsTUFFckM0cUIsa0JBQW1CLFNBRW5CdGdCLEVBRUF3ZixFQUVBOXBCLEdBQ0UsSUFJSTZxQixFQUpBdGhCLEVBQVF4VixLQUNScUwsRUFBS21LLEVBQU1uSyxHQUNYdUwsRUFBVXBCLEVBQU1vQixRQUNoQm1nQixFQUFnQjFyQixFQUFHMHJCLGNBR3ZCLEdBQUk5cUIsSUFBV29oQixHQUFVcGhCLEVBQU82VixhQUFlelcsRUFBSSxDQUNqRCxJQUFJMnBCLEVBQVd0UixFQUFRelgsR0F3RXZCLEdBdkVBa2dCLEVBQVM5Z0IsRUFFVGlpQixHQURBRCxFQUFTcGhCLEdBQ1M2VixXQUNsQjBMLEdBQVNILEVBQU94YSxZQUNoQjRhLEdBQWF4aEIsRUFDYnNpQixHQUFjM1gsRUFBUTRhLE1BQ3RCaE0sR0FBU0UsUUFBVTJILEVBQ25CbUIsR0FBUyxDQUNQdmlCLE9BQVFvaEIsRUFDUmdGLFNBQVUwRCxHQUFTeGYsR0FBSzhiLFFBQ3hCQyxTQUFVeUQsR0FBU3hmLEdBQUsrYixTQUUxQjFELEdBQWtCSixHQUFPNkQsUUFBVTJDLEVBQVM5USxLQUM1QzJLLEdBQWlCTCxHQUFPOEQsUUFBVTBDLEVBQVMvUSxJQUMzQ2prQixLQUFLZzNCLFFBQVVqQixHQUFTeGYsR0FBSzhiLFFBQzdCcnlCLEtBQUtpM0IsUUFBVWxCLEdBQVN4ZixHQUFLK2IsUUFDN0JqRixFQUFPbmUsTUFBTSxlQUFpQixNQUU5QjRuQixFQUFjLFdBQ1ozTCxFQUFZLGFBQWMzVixFQUFPLENBQy9CZSxJQUFLQSxJQUdIaVAsR0FBUzhGLGNBQ1g5VixFQUFNMGhCLFdBT1IxaEIsRUFBTTJoQiw2QkFFRHZXLEdBQVdwTCxFQUFNcWYsa0JBQ3BCeEgsRUFBT3BULFdBQVksR0FJckJ6RSxFQUFNNGhCLGtCQUFrQjdnQixFQUFLd2YsR0FHN0IxSCxFQUFlLENBQ2JoRCxTQUFVN1YsRUFDVnJZLEtBQU0sU0FDTjRjLGNBQWV4RCxJQUlqQjRMLEVBQVlrTCxFQUFRelcsRUFBUTZjLGFBQWEsS0FJM0M3YyxFQUFRK2MsT0FBTzN5QixNQUFNLEtBQUttTixTQUFRLFNBQVV3b0IsR0FDMUN0VCxFQUFLZ0ssRUFBUXNKLEVBQVNDLE9BQVF0QixPQUVoQ3hjLEVBQUdpZSxFQUFlLFdBQVk3RSxJQUM5QnBaLEVBQUdpZSxFQUFlLFlBQWE3RSxJQUMvQnBaLEVBQUdpZSxFQUFlLFlBQWE3RSxJQUMvQnBaLEVBQUdpZSxFQUFlLFVBQVd2aEIsRUFBTTBoQixTQUNuQ3BlLEVBQUdpZSxFQUFlLFdBQVl2aEIsRUFBTTBoQixTQUNwQ3BlLEVBQUdpZSxFQUFlLGNBQWV2aEIsRUFBTTBoQixTQUVuQ3RXLEdBQVc1Z0IsS0FBSzYwQixrQkFDbEI3MEIsS0FBSzRXLFFBQVF5ZCxvQkFBc0IsRUFDbkNoSCxFQUFPcFQsV0FBWSxHQUdyQmtSLEVBQVksYUFBY25yQixLQUFNLENBQzlCdVcsSUFBS0EsS0FHSEssRUFBUXVkLE9BQVd2ZCxFQUFRd2QsbUJBQW9CMkIsR0FBWS8xQixLQUFLNjBCLGtCQUFxQmxVLEdBQVFELEdBa0IvRm9XLFFBbEI2RyxDQUM3RyxHQUFJdFIsR0FBUzhGLGNBR1gsWUFGQXRyQixLQUFLazNCLFVBUVBwZSxFQUFHaWUsRUFBZSxVQUFXdmhCLEVBQU02aEIscUJBQ25DdmUsRUFBR2llLEVBQWUsV0FBWXZoQixFQUFNNmhCLHFCQUNwQ3ZlLEVBQUdpZSxFQUFlLGNBQWV2aEIsRUFBTTZoQixxQkFDdkN2ZSxFQUFHaWUsRUFBZSxZQUFhdmhCLEVBQU04aEIsOEJBQ3JDeGUsRUFBR2llLEVBQWUsWUFBYXZoQixFQUFNOGhCLDhCQUNyQzFnQixFQUFRZ2UsZ0JBQWtCOWIsRUFBR2llLEVBQWUsY0FBZXZoQixFQUFNOGhCLDhCQUNqRTloQixFQUFNK2hCLGdCQUFrQi9QLFdBQVdzUCxFQUFhbGdCLEVBQVF1ZCxVQU05RG1ELDZCQUE4QixTQUU5Qmp6QixHQUNFLElBQUkweEIsRUFBUTF4QixFQUFFOHRCLFFBQVU5dEIsRUFBRTh0QixRQUFRLEdBQUs5dEIsRUFFbkM5RCxLQUFLRCxJQUFJQyxLQUFLaTNCLElBQUl6QixFQUFNMUQsUUFBVXJ5QixLQUFLZzNCLFFBQVN6MkIsS0FBS2kzQixJQUFJekIsRUFBTXpELFFBQVV0eUIsS0FBS2kzQixVQUFZMTJCLEtBQUt5SCxNQUFNaEksS0FBSzRXLFFBQVF5ZCxxQkFBdUJyMEIsS0FBSzYwQixpQkFBbUIzbkIsT0FBT29uQixrQkFBb0IsS0FDOUx0MEIsS0FBS3EzQix1QkFHVEEsb0JBQXFCLFdBQ25CaEssR0FBVWlJLEdBQWtCakksR0FDNUJoRSxhQUFhcnBCLEtBQUt1M0IsaUJBRWxCdjNCLEtBQUttM0IsNkJBRVBBLDBCQUEyQixXQUN6QixJQUFJSixFQUFnQi8yQixLQUFLcUwsR0FBRzByQixjQUM1QjNWLEVBQUkyVixFQUFlLFVBQVcvMkIsS0FBS3EzQixxQkFDbkNqVyxFQUFJMlYsRUFBZSxXQUFZLzJCLEtBQUtxM0IscUJBQ3BDalcsRUFBSTJWLEVBQWUsY0FBZS8yQixLQUFLcTNCLHFCQUN2Q2pXLEVBQUkyVixFQUFlLFlBQWEvMkIsS0FBS3MzQiw4QkFDckNsVyxFQUFJMlYsRUFBZSxZQUFhLzJCLEtBQUtzM0IsOEJBQ3JDbFcsRUFBSTJWLEVBQWUsY0FBZS8yQixLQUFLczNCLCtCQUV6Q0Ysa0JBQW1CLFNBRW5CN2dCLEVBRUF3ZixHQUNFQSxFQUFRQSxHQUE0QixTQUFuQnhmLEVBQUl5ZixhQUEwQnpmLEdBRTFDdlcsS0FBSzYwQixpQkFBbUJrQixFQUN2Qi8xQixLQUFLNFcsUUFBUWdlLGVBQ2Y5YixFQUFHclgsU0FBVSxjQUFlekIsS0FBS3kzQixjQUVqQzNlLEVBQUdyWCxTQURNczBCLEVBQ0ksWUFFQSxZQUZhLzFCLEtBQUt5M0IsZUFLakMzZSxFQUFHdVUsRUFBUSxVQUFXcnRCLE1BQ3RCOFksRUFBR3FULEVBQVEsWUFBYW5zQixLQUFLMDNCLGVBRy9CLElBQ01qMkIsU0FBU2syQixVQUVYaEMsSUFBVSxXQUNSbDBCLFNBQVNrMkIsVUFBVUMsV0FHckIxcUIsT0FBTzJxQixlQUFlQyxrQkFFeEIsTUFBT3ZqQixNQUVYd2pCLGFBQWMsU0FBc0JDLEVBQVV6aEIsR0FJNUMsR0FGQTJZLElBQXNCLEVBRWxCL0MsR0FBVWtCLEVBQVEsQ0FDcEJsQyxFQUFZLGNBQWVuckIsS0FBTSxDQUMvQnVXLElBQUtBLElBR0h2VyxLQUFLNjBCLGlCQUNQL2IsRUFBR3JYLFNBQVUsV0FBWW94QixJQUczQixJQUFJamMsRUFBVTVXLEtBQUs0VyxTQUVsQm9oQixHQUFZN1YsRUFBWWtMLEVBQVF6VyxFQUFROGMsV0FBVyxHQUNwRHZSLEVBQVlrTCxFQUFRelcsRUFBUTRjLFlBQVksR0FDeENoTyxHQUFTcUksT0FBUzd0QixLQUNsQmc0QixHQUFZaDRCLEtBQUtpNEIsZUFFakI1SixFQUFlLENBQ2JoRCxTQUFVcnJCLEtBQ1Y3QyxLQUFNLFFBQ040YyxjQUFleEQsU0FHakJ2VyxLQUFLazRCLFlBR1RDLGlCQUFrQixXQUNoQixHQUFJMUosR0FBVSxDQUNaenVCLEtBQUtnM0IsT0FBU3ZJLEdBQVM0RCxRQUN2QnJ5QixLQUFLaTNCLE9BQVN4SSxHQUFTNkQsUUFFdkJ2RSxLQUtBLElBSEEsSUFBSTloQixFQUFTeEssU0FBUzIyQixpQkFBaUIzSixHQUFTNEQsUUFBUzVELEdBQVM2RCxTQUM5RHJOLEVBQVNoWixFQUVOQSxHQUFVQSxFQUFPaXFCLGFBQ3RCanFCLEVBQVNBLEVBQU9pcUIsV0FBV2tDLGlCQUFpQjNKLEdBQVM0RCxRQUFTNUQsR0FBUzZELFlBQ3hEck4sR0FDZkEsRUFBU2haLEVBS1gsR0FGQW9oQixFQUFPdkwsV0FBV3VHLEdBQVN5SyxpQkFBaUI3bUIsR0FFeENnWixFQUNGLEVBQUcsQ0FDRCxHQUFJQSxFQUFPb0QsR0FBVSxDQVNuQixHQVBXcEQsRUFBT29ELEdBQVN1SyxZQUFZLENBQ3JDUCxRQUFTNUQsR0FBUzRELFFBQ2xCQyxRQUFTN0QsR0FBUzZELFFBQ2xCcm1CLE9BQVFBLEVBQ1JrZ0IsT0FBUWxILE1BR09qbEIsS0FBSzRXLFFBQVFxZCxlQUM1QixNQUlKaG9CLEVBQVNnWixRQUdKQSxFQUFTQSxFQUFPbkQsWUFHekJtTSxPQUdKd0osYUFBYyxTQUVkbGhCLEdBQ0UsR0FBSWlZLEdBQVEsQ0FDVixJQUFJNVgsRUFBVTVXLEtBQUs0VyxRQUNmOGQsRUFBb0I5ZCxFQUFROGQsa0JBQzVCQyxFQUFpQi9kLEVBQVErZCxlQUN6Qm9CLEVBQVF4ZixFQUFJNGIsUUFBVTViLEVBQUk0YixRQUFRLEdBQUs1YixFQUN2QzhoQixFQUFjOUssR0FBVzNLLEVBQU8ySyxHQUFTLEdBQ3pDM0ksRUFBUzJJLEdBQVc4SyxHQUFlQSxFQUFZbjVCLEVBQy9DMmxCLEVBQVMwSSxHQUFXOEssR0FBZUEsRUFBWW43QixFQUMvQ283QixFQUF1QjNJLElBQTJCVixJQUF1QmxKLEVBQXdCa0osSUFDakdzSixHQUFNeEMsRUFBTTFELFFBQVU3RCxHQUFPNkQsUUFBVXNDLEVBQWVqTixJQUFNOUMsR0FBVSxJQUFNMFQsRUFBdUJBLEVBQXFCLEdBQUsvSSxHQUFpQyxHQUFLLElBQU0zSyxHQUFVLEdBQ25MNFQsR0FBTXpDLEVBQU16RCxRQUFVOUQsR0FBTzhELFFBQVVxQyxFQUFlaE4sSUFBTTlDLEdBQVUsSUFBTXlULEVBQXVCQSxFQUFxQixHQUFLL0ksR0FBaUMsR0FBSyxJQUFNMUssR0FBVSxHQUV2TCxJQUFLVyxHQUFTcUksU0FBV3FCLEdBQXFCLENBQzVDLEdBQUl3RixHQUFxQm4wQixLQUFLRCxJQUFJQyxLQUFLaTNCLElBQUl6QixFQUFNMUQsUUFBVXJ5QixLQUFLZzNCLFFBQVN6MkIsS0FBS2kzQixJQUFJekIsRUFBTXpELFFBQVV0eUIsS0FBS2kzQixTQUFXdkMsRUFDaEgsT0FHRjEwQixLQUFLMDNCLGFBQWFuaEIsR0FBSyxHQUd6QixHQUFJZ1gsRUFBUyxDQUNQOEssR0FDRkEsRUFBWWgwQixHQUFLazBCLEdBQU03SixJQUFVLEdBQ2pDMkosRUFBWXYyQixHQUFLMDJCLEdBQU03SixJQUFVLElBRWpDMEosRUFBYyxDQUNabjVCLEVBQUcsRUFDSEMsRUFBRyxFQUNIbEMsRUFBRyxFQUNIQyxFQUFHLEVBQ0htSCxFQUFHazBCLEVBQ0h6MkIsRUFBRzAyQixHQUlQLElBQUlDLEVBQVksVUFBVTlyQixPQUFPMHJCLEVBQVluNUIsRUFBRyxLQUFLeU4sT0FBTzByQixFQUFZbDVCLEVBQUcsS0FBS3dOLE9BQU8wckIsRUFBWXA3QixFQUFHLEtBQUswUCxPQUFPMHJCLEVBQVluN0IsRUFBRyxLQUFLeVAsT0FBTzByQixFQUFZaDBCLEVBQUcsS0FBS3NJLE9BQU8wckIsRUFBWXYyQixFQUFHLEtBQ3ZMeWdCLEVBQUlnTCxFQUFTLGtCQUFtQmtMLEdBQ2hDbFcsRUFBSWdMLEVBQVMsZUFBZ0JrTCxHQUM3QmxXLEVBQUlnTCxFQUFTLGNBQWVrTCxHQUM1QmxXLEVBQUlnTCxFQUFTLFlBQWFrTCxHQUMxQi9KLEdBQVM2SixFQUNUNUosR0FBUzZKLEVBQ1QvSixHQUFXc0gsRUFHYnhmLEVBQUkyVyxZQUFjM1csRUFBSXdiLG1CQUcxQmtHLGFBQWMsV0FHWixJQUFLMUssRUFBUyxDQUNaLElBQUl6SixFQUFZOWpCLEtBQUs0VyxRQUFRNmQsZUFBaUJoekIsU0FBU3NsQixLQUFPb0YsRUFDMURoRSxFQUFPekUsRUFBUTJKLEdBQVEsRUFBTXNDLElBQXlCLEVBQU03TCxHQUM1RGxOLEVBQVU1VyxLQUFLNFcsUUFFbkIsR0FBSStZLEdBQXlCLENBSTNCLElBRkFWLEdBQXNCbkwsRUFFMEIsV0FBekN2QixFQUFJME0sR0FBcUIsYUFBc0UsU0FBMUMxTSxFQUFJME0sR0FBcUIsY0FBMkJBLEtBQXdCeHRCLFVBQ3RJd3RCLEdBQXNCQSxHQUFvQm5OLFdBR3hDbU4sS0FBd0J4dEIsU0FBU3NsQixNQUFRa0ksS0FBd0J4dEIsU0FBU2lHLGlCQUN4RXVuQixLQUF3Qnh0QixXQUFVd3RCLEdBQXNCekwsS0FDNUQyRSxFQUFLbEUsS0FBT2dMLEdBQW9CN0ksVUFDaEMrQixFQUFLakUsTUFBUStLLEdBQW9COUksWUFFakM4SSxHQUFzQnpMLElBR3hCK0wsR0FBbUN4SixFQUF3QmtKLElBSTdEOU0sRUFEQW9MLEVBQVVGLEVBQU9wRixXQUFVLEdBQ05yUixFQUFRNGMsWUFBWSxHQUN6Q3JSLEVBQVlvTCxFQUFTM1csRUFBUTRkLGVBQWUsR0FDNUNyUyxFQUFZb0wsRUFBUzNXLEVBQVE4YyxXQUFXLEdBQ3hDblIsRUFBSWdMLEVBQVMsYUFBYyxJQUMzQmhMLEVBQUlnTCxFQUFTLFlBQWEsSUFDMUJoTCxFQUFJZ0wsRUFBUyxhQUFjLGNBQzNCaEwsRUFBSWdMLEVBQVMsU0FBVSxHQUN2QmhMLEVBQUlnTCxFQUFTLE1BQU9wRixFQUFLbEUsS0FDekIxQixFQUFJZ0wsRUFBUyxPQUFRcEYsRUFBS2pFLE1BQzFCM0IsRUFBSWdMLEVBQVMsUUFBU3BGLEVBQUs3RCxPQUMzQi9CLEVBQUlnTCxFQUFTLFNBQVVwRixFQUFLOUQsUUFDNUI5QixFQUFJZ0wsRUFBUyxVQUFXLE9BQ3hCaEwsRUFBSWdMLEVBQVMsV0FBWW9DLEdBQTBCLFdBQWEsU0FDaEVwTixFQUFJZ0wsRUFBUyxTQUFVLFVBQ3ZCaEwsRUFBSWdMLEVBQVMsZ0JBQWlCLFFBQzlCL0gsR0FBU0MsTUFBUThILEVBQ2pCekosRUFBVTFVLFlBQVltZSxHQUV0QmhMLEVBQUlnTCxFQUFTLG1CQUFvQnFCLEdBQWtCbEssU0FBUzZJLEVBQVFyZSxNQUFNb1YsT0FBUyxJQUFNLEtBQU91SyxHQUFpQm5LLFNBQVM2SSxFQUFRcmUsTUFBTW1WLFFBQVUsSUFBTSxPQUc1SnFULGFBQWMsU0FFZG5oQixFQUVBeWhCLEdBQ0UsSUFBSXhpQixFQUFReFYsS0FFUjh6QixFQUFldmQsRUFBSXVkLGFBQ25CbGQsRUFBVXBCLEVBQU1vQixRQUNwQnVVLEVBQVksWUFBYW5yQixLQUFNLENBQzdCdVcsSUFBS0EsSUFHSGlQLEdBQVM4RixjQUNYdHJCLEtBQUtrM0IsV0FLUC9MLEVBQVksYUFBY25yQixNQUVyQndsQixHQUFTOEYsaUJBQ1plLEdBQVVuVixFQUFNbVcsSUFDUnBULFdBQVksRUFDcEJvUyxHQUFRbmQsTUFBTSxlQUFpQixHQUUvQmxQLEtBQUswNEIsYUFFTHZXLEVBQVlrSyxHQUFTcnNCLEtBQUs0VyxRQUFRNmMsYUFBYSxHQUMvQ2pPLEdBQVN0TyxNQUFRbVYsSUFJbkI3VyxFQUFNbWpCLFFBQVVoRCxJQUFVLFdBQ3hCeEssRUFBWSxRQUFTM1YsR0FDakJnUSxHQUFTOEYsZ0JBRVI5VixFQUFNb0IsUUFBUTBjLG1CQUNqQm5ILEVBQU9yWixhQUFhdVosR0FBU2dCLEdBRy9CN1gsRUFBTWtqQixhQUVOckssRUFBZSxDQUNiaEQsU0FBVTdWLEVBQ1ZyWSxLQUFNLGVBR1Q2NkIsR0FBWTdWLEVBQVlrTCxFQUFRelcsRUFBUThjLFdBQVcsR0FFaERzRSxHQUNGN0ksSUFBa0IsRUFDbEIzWixFQUFNb2pCLFFBQVVDLFlBQVlyakIsRUFBTTJpQixpQkFBa0IsTUFHcEQvVyxFQUFJM2YsU0FBVSxVQUFXK1QsRUFBTTBoQixTQUMvQjlWLEVBQUkzZixTQUFVLFdBQVkrVCxFQUFNMGhCLFNBQ2hDOVYsRUFBSTNmLFNBQVUsY0FBZStULEVBQU0waEIsU0FFL0JwRCxJQUNGQSxFQUFhZ0YsY0FBZ0IsT0FDN0JsaUIsRUFBUWlkLFNBQVdqZCxFQUFRaWQsUUFBUTkyQixLQUFLeVksRUFBT3NlLEVBQWN6RyxJQUcvRHZVLEVBQUdyWCxTQUFVLE9BQVErVCxHQUVyQitNLEVBQUk4SyxFQUFRLFlBQWEsa0JBRzNCNkIsSUFBc0IsRUFDdEIxWixFQUFNdWpCLGFBQWVwRCxHQUFVbmdCLEVBQU11aUIsYUFBYTM1QixLQUFLb1gsRUFBT3dpQixFQUFVemhCLElBQ3hFdUMsRUFBR3JYLFNBQVUsY0FBZStULEdBQzVCcUosSUFBUSxFQUVKZ0MsR0FDRjBCLEVBQUk5Z0IsU0FBU3NsQixLQUFNLGNBQWUsVUFJdEM2TCxZQUFhLFNBRWJyYyxHQUNFLElBRUl5ZSxFQUNBQyxFQUNBK0QsRUFPQUMsRUFYQTV0QixFQUFLckwsS0FBS3FMLEdBQ1ZZLEVBQVNzSyxFQUFJdEssT0FJYjJLLEVBQVU1VyxLQUFLNFcsUUFDZjRhLEVBQVE1YSxFQUFRNGEsTUFDaEI1RCxFQUFpQnBJLEdBQVNxSSxPQUMxQnFMLEVBQVUzSyxLQUFnQmlELEVBQzFCMkgsRUFBVXZpQixFQUFRbWMsS0FDbEJxRyxFQUFlMU0sSUFBZWtCLEVBRTlCcFksRUFBUXhWLEtBQ1JxNUIsR0FBaUIsRUFFckIsSUFBSTdKLEdBQUosQ0FnSEEsUUFOMkIsSUFBdkJqWixFQUFJd2IsZ0JBQ054YixFQUFJMlcsWUFBYzNXLEVBQUl3YixpQkFHeEI5bEIsRUFBUzhWLEVBQVE5VixFQUFRMkssRUFBUXFELFVBQVc1TyxHQUFJLEdBQ2hEaXVCLEVBQWMsWUFDVjlULEdBQVM4RixjQUFlLE9BQU8rTixFQUVuQyxHQUFJaE0sRUFBT3dJLFNBQVN0ZixFQUFJdEssU0FBV0EsRUFBTzJlLFVBQVkzZSxFQUFPc2UsWUFBY3RlLEVBQU91ZSxZQUFjaFYsRUFBTStqQix3QkFBMEJ0dEIsRUFDOUgsT0FBT3V0QixHQUFVLEdBS25CLEdBRkFySyxJQUFrQixFQUVkdkIsSUFBbUJoWCxFQUFRb2MsV0FBYWtHLEVBQVVDLElBQVlILEdBQVU3TSxFQUFPMEosU0FBU3hJLElBQzFGWCxLQUFnQjFzQixPQUFTQSxLQUFLbXRCLFlBQWNvQixHQUFZb0QsVUFBVTN4QixLQUFNNHRCLEVBQWdCUCxFQUFROVcsS0FBU2liLEVBQU1JLFNBQVM1eEIsS0FBTTR0QixFQUFnQlAsRUFBUTlXLElBQU8sQ0FJN0osR0FIQTBpQixFQUErQyxhQUFwQ2o1QixLQUFLODFCLGNBQWN2ZixFQUFLdEssR0FDbkMrb0IsRUFBV3RSLEVBQVEySixHQUNuQmlNLEVBQWMsaUJBQ1Y5VCxHQUFTOEYsY0FBZSxPQUFPK04sRUFFbkMsR0FBSUwsRUFpQkYsT0FoQkExTCxFQUFXbkIsRUFFWDlhLElBRUFyUixLQUFLMDRCLGFBRUxZLEVBQWMsVUFFVDlULEdBQVM4RixnQkFDUmtDLEdBQ0ZyQixFQUFPclosYUFBYXVhLEVBQVFHLElBRTVCckIsRUFBTy9jLFlBQVlpZSxJQUloQm1NLEdBQVUsR0FHbkIsSUFBSUMsRUFBYzlULEVBQVV0YSxFQUFJdUwsRUFBUXFELFdBRXhDLElBQUt3ZixHQW1oQlgsU0FBc0JsakIsRUFBSzBpQixFQUFVNU4sR0FDbkMsSUFBSWxELEVBQU96RSxFQUFRaUMsRUFBVTBGLEVBQVNoZ0IsR0FBSWdnQixFQUFTelUsUUFBUXFELFlBRTNELE9BQU9nZixFQUFXMWlCLEVBQUk4YixRQUFVbEssRUFBSy9ELE1BRHhCLElBQzBDN04sRUFBSThiLFNBQVdsSyxFQUFLL0QsT0FBUzdOLEVBQUkrYixRQUFVbkssRUFBS2hFLFFBQVU1TixFQUFJOGIsU0FBV2xLLEVBQUtqRSxLQUFPM04sRUFBSThiLFFBQVVsSyxFQUFLL0QsT0FBUzdOLEVBQUkrYixRQUFVbkssRUFBS2xFLEtBQU8xTixFQUFJOGIsU0FBV2xLLEVBQUsvRCxPQUFTN04sRUFBSStiLFFBQVVuSyxFQUFLaEUsT0FEck8sR0FyaEJXdVYsQ0FBYW5qQixFQUFLMGlCLEVBQVVqNUIsUUFBVXk1QixFQUFZN08sU0FBVSxDQUU5RSxHQUFJNk8sSUFBZ0JwTSxFQUNsQixPQUFPbU0sR0FBVSxHQVluQixHQVJJQyxHQUFlcHVCLElBQU9rTCxFQUFJdEssU0FDNUJBLEVBQVN3dEIsR0FHUHh0QixJQUNGZ3BCLEVBQWF2UixFQUFRelgsS0FHMEQsSUFBN0U4b0IsR0FBUTVJLEVBQVE5Z0IsRUFBSWdpQixFQUFRMkgsRUFBVS9vQixFQUFRZ3BCLEVBQVkxZSxJQUFPdEssR0FNbkUsT0FMQW9GLElBQ0FoRyxFQUFHK0QsWUFBWWllLEdBQ2ZDLEVBQVdqaUIsRUFFWHN1QixJQUNPSCxHQUFVLFFBRWQsR0FBSXZ0QixFQUFPNlYsYUFBZXpXLEVBQUksQ0FDbkM0cEIsRUFBYXZSLEVBQVF6WCxHQUNyQixJQUFJc25CLEVBQ0FxRyxFQWNBQyxFQWJBQyxFQUFpQnpNLEVBQU92TCxhQUFlelcsRUFDdkMwdUIsR0FqN0JhLFNBQTRCL0UsRUFBVUMsRUFBWWdFLEdBQ3pFLElBQUllLEVBQWNmLEVBQVdqRSxFQUFTOVEsS0FBTzhRLEVBQVMvUSxJQUNsRGdXLEVBQWNoQixFQUFXakUsRUFBUzVRLE1BQVE0USxFQUFTN1EsT0FDbkQrVixFQUFrQmpCLEVBQVdqRSxFQUFTMVEsTUFBUTBRLEVBQVMzUSxPQUN2RDhWLEVBQWNsQixFQUFXaEUsRUFBVy9RLEtBQU8rUSxFQUFXaFIsSUFDdERtVyxFQUFjbkIsRUFBV2hFLEVBQVc3USxNQUFRNlEsRUFBVzlRLE9BQ3ZEa1csRUFBa0JwQixFQUFXaEUsRUFBVzNRLE1BQVEyUSxFQUFXNVEsT0FDL0QsT0FBTzJWLElBQWdCRyxHQUFlRixJQUFnQkcsR0FBZUosRUFBY0UsRUFBa0IsSUFBTUMsRUFBY0UsRUFBa0IsRUEwNkI5R0MsQ0FBbUJqTixFQUFPekMsVUFBWXlDLEVBQU81RCxRQUFVdUwsRUFBVS9vQixFQUFPMmUsVUFBWTNlLEVBQU93ZCxRQUFVd0wsRUFBWWdFLEdBQ3BJc0IsRUFBUXRCLEVBQVcsTUFBUSxPQUMzQnVCLEVBQWtCMVYsRUFBZTdZLEVBQVEsTUFBTyxRQUFVNlksRUFBZXVJLEVBQVEsTUFBTyxPQUN4Rm9OLEVBQWVELEVBQWtCQSxFQUFnQnBVLGVBQVksRUFXakUsR0FUSTBJLEtBQWU3aUIsSUFDakIydEIsRUFBd0IzRSxFQUFXc0YsR0FDbkNsTCxJQUF3QixFQUN4QkMsSUFBMEJ5SyxHQUFtQm5qQixFQUFRd2MsWUFBYzBHLEdBTW5ELEtBSGxCdkcsRUFrZlIsU0FBMkJoZCxFQUFLdEssRUFBUWdwQixFQUFZZ0UsRUFBVTlGLEVBQWVFLEVBQXVCRCxFQUFZc0gsR0FDOUcsSUFBSUMsRUFBYzFCLEVBQVcxaUIsRUFBSStiLFFBQVUvYixFQUFJOGIsUUFDM0N1SSxFQUFlM0IsRUFBV2hFLEVBQVc1USxPQUFTNFEsRUFBVzNRLE1BQ3pEdVcsRUFBVzVCLEVBQVdoRSxFQUFXaFIsSUFBTWdSLEVBQVcvUSxLQUNsRDRXLEVBQVc3QixFQUFXaEUsRUFBVzlRLE9BQVM4USxFQUFXN1EsTUFDckQyVyxHQUFTLEVBRWIsSUFBSzNILEVBRUgsR0FBSXNILEdBQWdCMUwsR0FBcUI0TCxFQUFlekgsR0FRdEQsSUFMSzlELEtBQTRDLElBQWxCTixHQUFzQjRMLEVBQWNFLEVBQVdELEVBQWV2SCxFQUF3QixFQUFJc0gsRUFBY0csRUFBV0YsRUFBZXZILEVBQXdCLEtBRXZMaEUsSUFBd0IsR0FHckJBLEdBT0gwTCxHQUFTLE9BTFQsR0FBc0IsSUFBbEJoTSxHQUFzQjRMLEVBQWNFLEVBQVc3TCxHQUNqRDJMLEVBQWNHLEVBQVc5TCxHQUN6QixPQUFRRCxRQU9aLEdBQUk0TCxFQUFjRSxFQUFXRCxHQUFnQixFQUFJekgsR0FBaUIsR0FBS3dILEVBQWNHLEVBQVdGLEdBQWdCLEVBQUl6SCxHQUFpQixFQUNuSSxPQXdCUixTQUE2QmxuQixHQUMzQixPQUFJck0sRUFBTXl0QixHQUFVenRCLEVBQU1xTSxHQUNqQixHQUVDLEVBNUJHK3VCLENBQW9CL3VCLEdBT2pDLElBRkE4dUIsRUFBU0EsR0FBVTNILEtBSWJ1SCxFQUFjRSxFQUFXRCxFQUFldkgsRUFBd0IsR0FBS3NILEVBQWNHLEVBQVdGLEVBQWV2SCxFQUF3QixHQUN2SSxPQUFPc0gsRUFBY0UsRUFBV0QsRUFBZSxFQUFJLEdBQUssRUFJNUQsT0FBTyxFQTdoQldLLENBQWtCMWtCLEVBQUt0SyxFQUFRZ3BCLEVBQVlnRSxFQUFVYyxFQUFrQixFQUFJbmpCLEVBQVF1YyxjQUFnRCxNQUFqQ3ZjLEVBQVF5YyxzQkFBZ0N6YyxFQUFRdWMsY0FBZ0J2YyxFQUFReWMsc0JBQXVCL0QsR0FBd0JSLEtBQWU3aUIsSUFHL04sQ0FFbkIsSUFBSWl2QixFQUFZdDdCLEVBQU15dEIsR0FFdEIsR0FDRTZOLEdBQWEzSCxFQUNic0csRUFBVXZNLEVBQVMxYSxTQUFTc29CLFNBQ3JCckIsSUFBd0MsU0FBNUJ0WCxFQUFJc1gsRUFBUyxZQUF5QkEsSUFBWXRNLElBSXpFLEdBQWtCLElBQWRnRyxHQUFtQnNHLElBQVk1dEIsRUFDakMsT0FBT3V0QixHQUFVLEdBR25CMUssR0FBYTdpQixFQUNiOGlCLEdBQWdCd0UsRUFDaEIsSUFBSTFnQixFQUFjNUcsRUFBT2t2QixtQkFDckJDLEdBQVEsRUFHUkMsRUFBYXRHLEdBQVE1SSxFQUFROWdCLEVBQUlnaUIsRUFBUTJILEVBQVUvb0IsRUFBUWdwQixFQUFZMWUsRUFGM0U2a0IsRUFBc0IsSUFBZDdILEdBSVIsSUFBbUIsSUFBZjhILEVBNEJGLE9BM0JtQixJQUFmQSxJQUFvQyxJQUFoQkEsSUFDdEJELEVBQXVCLElBQWZDLEdBR1Y3TCxJQUFVLEVBQ1ZoSSxXQUFXK04sR0FBVyxJQUN0QmxrQixJQUVJK3BCLElBQVV2b0IsRUFDWnhILEVBQUcrRCxZQUFZaWUsR0FFZnBoQixFQUFPNlYsV0FBV2hQLGFBQWF1YSxFQUFRK04sRUFBUXZvQixFQUFjNUcsR0FJM0R1dUIsR0FDRi9TLEVBQVMrUyxFQUFpQixFQUFHQyxFQUFlRCxFQUFnQnBVLFdBRzlEa0gsRUFBV0QsRUFBT3ZMLGdCQUdZeGlCLElBQTFCczZCLEdBQXdDdEssS0FDMUNOLEdBQXFCenVCLEtBQUtpM0IsSUFBSW9DLEVBQXdCbFcsRUFBUXpYLEdBQVFzdUIsS0FHeEVaLElBQ09ILEdBQVUsR0FJckIsR0FBSW51QixFQUFHd3FCLFNBQVN4SSxHQUNkLE9BQU9tTSxHQUFVLEdBSXJCLE9BQU8sRUF6UFAsU0FBU0YsRUFBY244QixFQUFNbStCLEdBQzNCblEsRUFBWWh1QixFQUFNcVksRUFBT3NLLEVBQWMsQ0FDckN2SixJQUFLQSxFQUNMMmlCLFFBQVNBLEVBQ1RxQyxLQUFNdEMsRUFBVyxXQUFhLGFBQzlCRCxPQUFRQSxFQUNSaEUsU0FBVUEsRUFDVkMsV0FBWUEsRUFDWmtFLFFBQVNBLEVBQ1RDLGFBQWNBLEVBQ2RudEIsT0FBUUEsRUFDUnV0QixVQUFXQSxFQUNYMWYsT0FBUSxTQUFnQjdOLEVBQVFtdkIsR0FDOUIsT0FBT3JHLEdBQVE1SSxFQUFROWdCLEVBQUlnaUIsRUFBUTJILEVBQVUvb0IsRUFBUXlYLEVBQVF6WCxHQUFTc0ssRUFBSzZrQixJQUU3RXpCLFFBQVNBLEdBQ1IyQixJQUlMLFNBQVNqcUIsSUFDUGlvQixFQUFjLDRCQUVkOWpCLEVBQU1tVCx3QkFFRm5ULElBQVU0akIsR0FDWkEsRUFBYXpRLHdCQUtqQixTQUFTNlEsRUFBVWdDLEdBdURqQixPQXREQWxDLEVBQWMsb0JBQXFCLENBQ2pDa0MsVUFBV0EsSUFHVEEsSUFFRXRDLEVBQ0Z0TCxFQUFlOEssYUFFZjlLLEVBQWU2TixXQUFXam1CLEdBR3hCQSxJQUFVNGpCLElBRVpqWCxFQUFZa0wsRUFBUVgsR0FBY0EsR0FBWTlWLFFBQVE0YyxXQUFhNUYsRUFBZWhYLFFBQVE0YyxZQUFZLEdBQ3RHclIsRUFBWWtMLEVBQVF6VyxFQUFRNGMsWUFBWSxJQUd0QzlHLEtBQWdCbFgsR0FBU0EsSUFBVWdRLEdBQVNxSSxPQUM5Q25CLEdBQWNsWCxFQUNMQSxJQUFVZ1EsR0FBU3FJLFFBQVVuQixLQUN0Q0EsR0FBYyxNQUlaME0sSUFBaUI1akIsSUFDbkJBLEVBQU0rakIsc0JBQXdCdHRCLEdBR2hDdUosRUFBTTRULFlBQVcsV0FDZmtRLEVBQWMsNkJBQ2Q5akIsRUFBTStqQixzQkFBd0IsUUFHNUIvakIsSUFBVTRqQixJQUNaQSxFQUFhaFEsYUFDYmdRLEVBQWFHLHNCQUF3QixRQUtyQ3R0QixJQUFXb2hCLElBQVdBLEVBQU96QyxVQUFZM2UsSUFBV1osSUFBT1ksRUFBTzJlLFlBQ3BFa0UsR0FBYSxNQUlWbFksRUFBUXFkLGdCQUFtQjFkLEVBQUk0VixRQUFVbGdCLElBQVd4SyxXQUN2RDRyQixFQUFPdkwsV0FBV3VHLEdBQVN5SyxpQkFBaUJ2YyxFQUFJdEssU0FHL0N1dkIsR0FBYXRKLEdBQThCM2IsS0FHN0NLLEVBQVFxZCxnQkFBa0IxZCxFQUFJeWIsaUJBQW1CemIsRUFBSXliLGtCQUMvQ3FILEdBQWlCLEVBSTFCLFNBQVNNLElBQ1B2YyxHQUFXeGQsRUFBTXl0QixHQUNqQlosR0FBb0I3c0IsRUFBTXl0QixFQUFRelcsRUFBUXFELFdBRTFDb1UsRUFBZSxDQUNiaEQsU0FBVTdWLEVBQ1ZyWSxLQUFNLFNBQ05tdkIsS0FBTWpoQixFQUNOK1IsU0FBVUEsR0FDVnFQLGtCQUFtQkEsR0FDbkIxUyxjQUFleEQsTUF1SnJCZ2pCLHNCQUF1QixLQUN2Qm1DLGVBQWdCLFdBQ2R0YSxFQUFJM2YsU0FBVSxZQUFhekIsS0FBS3kzQixjQUNoQ3JXLEVBQUkzZixTQUFVLFlBQWF6QixLQUFLeTNCLGNBQ2hDclcsRUFBSTNmLFNBQVUsY0FBZXpCLEtBQUt5M0IsY0FDbENyVyxFQUFJM2YsU0FBVSxXQUFZeXdCLElBQzFCOVEsRUFBSTNmLFNBQVUsWUFBYXl3QixJQUMzQjlRLEVBQUkzZixTQUFVLFlBQWF5d0IsS0FFN0J5SixhQUFjLFdBQ1osSUFBSTVFLEVBQWdCLzJCLEtBQUtxTCxHQUFHMHJCLGNBQzVCM1YsRUFBSTJWLEVBQWUsVUFBVy8yQixLQUFLazNCLFNBQ25DOVYsRUFBSTJWLEVBQWUsV0FBWS8yQixLQUFLazNCLFNBQ3BDOVYsRUFBSTJWLEVBQWUsWUFBYS8yQixLQUFLazNCLFNBQ3JDOVYsRUFBSTJWLEVBQWUsY0FBZS8yQixLQUFLazNCLFNBQ3ZDOVYsRUFBSTNmLFNBQVUsY0FBZXpCLE9BRS9CazNCLFFBQVMsU0FFVDNnQixHQUNFLElBQUlsTCxFQUFLckwsS0FBS3FMLEdBQ1Z1TCxFQUFVNVcsS0FBSzRXLFFBRW5Cd0csR0FBV3hkLEVBQU15dEIsR0FDakJaLEdBQW9CN3NCLEVBQU15dEIsRUFBUXpXLEVBQVFxRCxXQUMxQ2tSLEVBQVksT0FBUW5yQixLQUFNLENBQ3hCdVcsSUFBS0EsSUFFUCtXLEVBQVdELEdBQVVBLEVBQU92TCxXQUU1QjFFLEdBQVd4ZCxFQUFNeXRCLEdBQ2pCWixHQUFvQjdzQixFQUFNeXRCLEVBQVF6VyxFQUFRcUQsV0FFdEN1TCxHQUFTOEYsZ0JBTWI0RCxJQUFzQixFQUN0QkksSUFBeUIsRUFDekJELElBQXdCLEVBQ3hCdU0sY0FBYzU3QixLQUFLNDRCLFNBQ25CdlAsYUFBYXJwQixLQUFLdTNCLGlCQUVsQjNCLEdBQWdCNTFCLEtBQUsyNEIsU0FFckIvQyxHQUFnQjUxQixLQUFLKzRCLGNBR2pCLzRCLEtBQUs2MEIsa0JBQ1B6VCxFQUFJM2YsU0FBVSxPQUFRekIsTUFDdEJvaEIsRUFBSS9WLEVBQUksWUFBYXJMLEtBQUswM0IsZUFHNUIxM0IsS0FBSzA3QixpQkFFTDE3QixLQUFLMjdCLGVBRUQ5YSxHQUNGMEIsRUFBSTlnQixTQUFTc2xCLEtBQU0sY0FBZSxJQUdwQ3hFLEVBQUk4SyxFQUFRLFlBQWEsSUFFckI5VyxJQUNFc0ksS0FDRnRJLEVBQUkyVyxZQUFjM1csRUFBSXdiLGtCQUNyQm5iLEVBQVFvZCxZQUFjemQsRUFBSXliLG1CQUc3QnpFLEdBQVdBLEVBQVF6TCxZQUFjeUwsRUFBUXpMLFdBQVdyUCxZQUFZOGEsSUFFNURwQixJQUFXbUIsR0FBWVosSUFBMkMsVUFBNUJBLEdBQVlTLGNBRXBEZCxJQUFXQSxHQUFRdkssWUFBY3VLLEdBQVF2SyxXQUFXclAsWUFBWTRaLElBRzlEZ0IsSUFDRXJ0QixLQUFLNjBCLGlCQUNQelQsRUFBSWlNLEVBQVEsVUFBV3J0QixNQUd6QnMxQixHQUFrQmpJLEdBRWxCQSxFQUFPbmUsTUFBTSxlQUFpQixHQUcxQjJQLEtBQVVxUSxJQUNaL00sRUFBWWtMLEVBQVFYLEdBQWNBLEdBQVk5VixRQUFRNGMsV0FBYXh6QixLQUFLNFcsUUFBUTRjLFlBQVksR0FHOUZyUixFQUFZa0wsRUFBUXJ0QixLQUFLNFcsUUFBUTZjLGFBQWEsR0FFOUNwRixFQUFlLENBQ2JoRCxTQUFVcnJCLEtBQ1Y3QyxLQUFNLFdBQ05tdkIsS0FBTWdCLEVBQ05sUSxTQUFVLEtBQ1ZxUCxrQkFBbUIsS0FDbkIxUyxjQUFleEQsSUFHYjRWLElBQVdtQixHQUNUbFEsSUFBWSxJQUVkaVIsRUFBZSxDQUNibEMsT0FBUW1CLEVBQ1Jud0IsS0FBTSxNQUNObXZCLEtBQU1nQixFQUNOZixPQUFRSixFQUNScFMsY0FBZXhELElBSWpCOFgsRUFBZSxDQUNiaEQsU0FBVXJyQixLQUNWN0MsS0FBTSxTQUNObXZCLEtBQU1nQixFQUNOdlQsY0FBZXhELElBSWpCOFgsRUFBZSxDQUNibEMsT0FBUW1CLEVBQ1Jud0IsS0FBTSxPQUNObXZCLEtBQU1nQixFQUNOZixPQUFRSixFQUNScFMsY0FBZXhELElBR2pCOFgsRUFBZSxDQUNiaEQsU0FBVXJyQixLQUNWN0MsS0FBTSxPQUNObXZCLEtBQU1nQixFQUNOdlQsY0FBZXhELEtBSW5CbVcsSUFBZUEsR0FBWW1QLFFBRXZCemUsS0FBYUQsSUFDWEMsSUFBWSxJQUVkaVIsRUFBZSxDQUNiaEQsU0FBVXJyQixLQUNWN0MsS0FBTSxTQUNObXZCLEtBQU1nQixFQUNOdlQsY0FBZXhELElBR2pCOFgsRUFBZSxDQUNiaEQsU0FBVXJyQixLQUNWN0MsS0FBTSxPQUNObXZCLEtBQU1nQixFQUNOdlQsY0FBZXhELEtBTW5CaVAsR0FBU3FJLFNBRUssTUFBWnpRLEtBQWtDLElBQWRBLEtBQ3RCQSxHQUFXRCxHQUNYc1AsR0FBb0JELElBR3RCNkIsRUFBZSxDQUNiaEQsU0FBVXJyQixLQUNWN0MsS0FBTSxNQUNObXZCLEtBQU1nQixFQUNOdlQsY0FBZXhELElBSWpCdlcsS0FBSzY3QixXQTlJVDc3QixLQUFLazRCLFlBcUpUQSxTQUFVLFdBQ1IvTSxFQUFZLFVBQVduckIsTUFDdkJtc0IsRUFBU2tCLEVBQVNDLEVBQVdDLEVBQVVDLEdBQVNuQixHQUFVb0IsR0FBYUMsR0FBY2MsR0FBU0MsR0FBVzVQLEdBQVF6QixHQUFXcVAsR0FBb0J0UCxHQUFXcVAsR0FBb0JzQyxHQUFhQyxHQUFnQnJDLEdBQWM2QixHQUFjL0ksR0FBU0UsUUFBVUYsR0FBU0MsTUFBUUQsR0FBU3RPLE1BQVFzTyxHQUFTcUksT0FBUyxLQUMvUzRCLEdBQWtCdGhCLFNBQVEsU0FBVTlDLEdBQ2xDQSxFQUFHa3JCLFNBQVUsS0FFZjlHLEdBQWtCcHdCLE9BQVNxdkIsR0FBU0MsR0FBUyxHQUUvQ21OLFlBQWEsU0FFYnZsQixHQUNFLE9BQVFBLEVBQUloTCxNQUNWLElBQUssT0FDTCxJQUFLLFVBQ0h2TCxLQUFLazNCLFFBQVEzZ0IsR0FFYixNQUVGLElBQUssWUFDTCxJQUFLLFdBQ0M4VyxJQUNGcnRCLEtBQUs0eUIsWUFBWXJjLEdBNEszQixTQUVBQSxHQUNNQSxFQUFJdWQsZUFDTnZkLEVBQUl1ZCxhQUFhaUksV0FBYSxRQUdoQ3hsQixFQUFJMlcsWUFBYzNXLEVBQUl3YixpQkFqTGRpSyxDQUFnQnpsQixJQUdsQixNQUVGLElBQUssY0FDSEEsRUFBSXdiLG1CQVNWa0ssUUFBUyxXQVFQLElBUEEsSUFDSTV3QixFQURBNndCLEVBQVEsR0FFUnRwQixFQUFXNVMsS0FBS3FMLEdBQUd1SCxTQUNuQmhXLEVBQUksRUFDSnlCLEVBQUl1VSxFQUFTdlQsT0FDYnVYLEVBQVU1VyxLQUFLNFcsUUFFWmhhLEVBQUl5QixFQUFHekIsSUFHUm1sQixFQUZKMVcsRUFBS3VILEVBQVNoVyxHQUVFZ2EsRUFBUXFELFVBQVdqYSxLQUFLcUwsSUFBSSxJQUMxQzZ3QixFQUFNdHhCLEtBQUtTLEVBQUc4d0IsYUFBYXZsQixFQUFRc2QsYUFBZXNCLEdBQVlucUIsSUFJbEUsT0FBTzZ3QixHQU9UbkosS0FBTSxTQUFjbUosR0FDbEIsSUFBSUUsRUFBUSxHQUNSalEsRUFBU25zQixLQUFLcUwsR0FDbEJyTCxLQUFLaThCLFVBQVU5dEIsU0FBUSxTQUFVM0IsRUFBSTVQLEdBQ25DLElBQUl5TyxFQUFLOGdCLEVBQU92WixTQUFTaFcsR0FFckJtbEIsRUFBUTFXLEVBQUlyTCxLQUFLNFcsUUFBUXFELFVBQVdrUyxHQUFRLEtBQzlDaVEsRUFBTTV2QixHQUFNbkIsS0FFYnJMLE1BQ0hrOEIsRUFBTS90QixTQUFRLFNBQVUzQixHQUNsQjR2QixFQUFNNXZCLEtBQ1IyZixFQUFPMVosWUFBWTJwQixFQUFNNXZCLElBQ3pCMmYsRUFBTy9jLFlBQVlndEIsRUFBTTV2QixTQVEvQnF2QixLQUFNLFdBQ0osSUFBSTUyQixFQUFRakYsS0FBSzRXLFFBQVEzUixNQUN6QkEsR0FBU0EsRUFBTW8zQixLQUFPcDNCLEVBQU1vM0IsSUFBSXI4QixPQVNsQytoQixRQUFTLFNBQW1CMVcsRUFBSWtXLEdBQzlCLE9BQU9RLEVBQVExVyxFQUFJa1csR0FBWXZoQixLQUFLNFcsUUFBUXFELFVBQVdqYSxLQUFLcUwsSUFBSSxJQVNsRTJQLE9BQVEsU0FBZ0I3ZCxFQUFNVSxHQUM1QixJQUFJK1ksRUFBVTVXLEtBQUs0VyxRQUVuQixRQUFjLElBQVYvWSxFQUNGLE9BQU8rWSxFQUFRelosR0FFZixJQUFJNnVCLEVBQWdCaEIsRUFBY2EsYUFBYTdyQixLQUFNN0MsRUFBTVUsR0FHekQrWSxFQUFRelosUUFEbUIsSUFBbEI2dUIsRUFDT0EsRUFFQW51QixFQUdMLFVBQVRWLEdBQ0ZpMEIsR0FBY3hhLElBUXBCMEQsUUFBUyxXQUNQNlEsRUFBWSxVQUFXbnJCLE1BQ3ZCLElBQUlxTCxFQUFLckwsS0FBS3FMLEdBQ2RBLEVBQUdnZCxHQUFXLEtBQ2RqSCxFQUFJL1YsRUFBSSxZQUFhckwsS0FBSzgwQixhQUMxQjFULEVBQUkvVixFQUFJLGFBQWNyTCxLQUFLODBCLGFBQzNCMVQsRUFBSS9WLEVBQUksY0FBZXJMLEtBQUs4MEIsYUFFeEI5MEIsS0FBSzYwQixrQkFDUHpULEVBQUkvVixFQUFJLFdBQVlyTCxNQUNwQm9oQixFQUFJL1YsRUFBSSxZQUFhckwsT0FJdkI4SCxNQUFNdEosVUFBVTJQLFFBQVFwUixLQUFLc08sRUFBR2l4QixpQkFBaUIsZ0JBQWdCLFNBQVVqeEIsR0FDekVBLEVBQUdreEIsZ0JBQWdCLGdCQUdyQnY4QixLQUFLazNCLFVBRUxsM0IsS0FBS20zQiw0QkFFTC9ILEdBQVVuUyxPQUFPbVMsR0FBVTNwQixRQUFRekYsS0FBS3FMLElBQUssR0FDN0NyTCxLQUFLcUwsR0FBS0EsRUFBSyxNQUVqQnF0QixXQUFZLFdBQ1YsSUFBS2hMLEdBQWEsQ0FFaEIsR0FEQXZDLEVBQVksWUFBYW5yQixNQUNyQndsQixHQUFTOEYsY0FBZSxPQUM1Qi9JLEVBQUk4SixHQUFTLFVBQVcsUUFFcEJyc0IsS0FBSzRXLFFBQVEwYyxtQkFBcUJqSCxHQUFRdkssWUFDNUN1SyxHQUFRdkssV0FBV3JQLFlBQVk0WixJQUdqQ3FCLElBQWMsSUFHbEIrTixXQUFZLFNBQW9CL08sR0FDOUIsR0FBZ0MsVUFBNUJBLEVBQVlTLGFBTWhCLEdBQUlPLEdBQWEsQ0FFZixHQURBdkMsRUFBWSxZQUFhbnJCLE1BQ3JCd2xCLEdBQVM4RixjQUFlLE9BRXhCYSxFQUFPMEosU0FBU3hJLEtBQVlydEIsS0FBSzRXLFFBQVE0YSxNQUFNTSxZQUNqRDNGLEVBQU9yWixhQUFhdVosR0FBU2dCLEdBQ3BCRyxHQUNUckIsRUFBT3JaLGFBQWF1WixHQUFTbUIsSUFFN0JyQixFQUFPL2MsWUFBWWlkLElBR2pCcnNCLEtBQUs0VyxRQUFRNGEsTUFBTU0sYUFDckI5eEIsS0FBS2lxQixRQUFRb0QsRUFBUWhCLElBR3ZCOUosRUFBSThKLEdBQVMsVUFBVyxJQUN4QnFCLElBQWMsUUF0QmQxdEIsS0FBSzA0QixlQXdMUGhKLElBQ0Y1VyxFQUFHclgsU0FBVSxhQUFhLFNBQVU4VSxJQUM3QmlQLEdBQVNxSSxRQUFVcUIsS0FBd0IzWSxFQUFJMlcsWUFDbEQzVyxFQUFJd2Isb0JBTVZ2TSxHQUFTZ1gsTUFBUSxDQUNmMWpCLEdBQUlBLEVBQ0pzSSxJQUFLQSxFQUNMbUIsSUFBS0EsRUFDTGMsS0FBTUEsRUFDTjNoQixHQUFJLFNBQVkySixFQUFJa1csR0FDbEIsUUFBU1EsRUFBUTFXLEVBQUlrVyxFQUFVbFcsR0FBSSxJQUVyQ294QixPQTNoRUYsU0FBZ0JDLEVBQUtydEIsR0FDbkIsR0FBSXF0QixHQUFPcnRCLEVBQ1QsSUFBSyxJQUFJbFIsS0FBT2tSLEVBQ1ZBLEVBQUk1USxlQUFlTixLQUNyQnUrQixFQUFJditCLEdBQU9rUixFQUFJbFIsSUFLckIsT0FBT3UrQixHQW1oRVB0VixTQUFVQSxFQUNWckYsUUFBU0EsRUFDVEksWUFBYUEsRUFDYmpMLE1BQU9BLEVBQ1B0WCxNQUFPQSxFQUNQKzhCLFNBQVVoSCxHQUNWaUgsZUFBZ0JoSCxHQUNoQmlILGdCQUFpQjVNLEdBQ2pCNUssU0FBVUEsR0FRWkcsR0FBUy9uQixJQUFNLFNBQVUyWixHQUN2QixPQUFPQSxFQUFRaVIsSUFRakI3QyxHQUFTeUYsTUFBUSxXQUNmLElBQUssSUFBSTZSLEVBQU9qNkIsVUFBVXhELE9BQVF3ckIsRUFBVSxJQUFJL2lCLE1BQU1nMUIsR0FBT0MsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUNsRmxTLEVBQVFrUyxHQUFRbDZCLFVBQVVrNkIsR0FHeEJsUyxFQUFRLEdBQUcxbkIsY0FBZ0IyRSxRQUFPK2lCLEVBQVVBLEVBQVEsSUFDeERBLEVBQVExYyxTQUFRLFNBQVUrYyxHQUN4QixJQUFLQSxFQUFPMXNCLFlBQWMwc0IsRUFBTzFzQixVQUFVMkUsWUFDekMsS0FBTSxnRUFBZ0V3SixPQUFPLEdBQUdyTCxTQUFTdkUsS0FBS211QixJQUc1RkEsRUFBT3NSLFFBQU9oWCxHQUFTZ1gsTUFBUTFjLEVBQWMsR0FBSTBGLEdBQVNnWCxNQUFPdFIsRUFBT3NSLFFBQzVFeFIsRUFBY0MsTUFBTUMsT0FVeEIxRixHQUFTdG5CLE9BQVMsU0FBVW1OLEVBQUl1TCxHQUM5QixPQUFPLElBQUk0TyxHQUFTbmEsRUFBSXVMLElBSTFCNE8sR0FBUzNhLFFBbC9FSyxTQW8vRWQsSUFDSW15QixHQUNBQyxHQUVBQyxHQUNBQyxHQUNBQyxHQUNBQyxHQVBBQyxHQUFjLEdBR2RDLElBQVksRUFtSGhCLFNBQVNDLEtBQ1BGLEdBQVludkIsU0FBUSxTQUFVc3ZCLEdBQzVCN0IsY0FBYzZCLEVBQVdDLFFBRTNCSixHQUFjLEdBR2hCLFNBQVNLLEtBQ1AvQixjQUFjeUIsSUFHaEIsSUFvTElPLEdBcExBSCxHQUFhclcsR0FBUyxTQUFVN1EsRUFBS0ssRUFBU3VWLEVBQVEwUixHQUV4RCxHQUFLam5CLEVBQVFrbkIsT0FBYixDQUNBLElBTUlDLEVBTkFyVyxHQUFLblIsRUFBSTRiLFFBQVU1YixFQUFJNGIsUUFBUSxHQUFLNWIsR0FBSzhiLFFBQ3pDMUssR0FBS3BSLEVBQUk0YixRQUFVNWIsRUFBSTRiLFFBQVEsR0FBSzViLEdBQUsrYixRQUN6QzBMLEVBQU9wbkIsRUFBUXFuQixrQkFDZkMsRUFBUXRuQixFQUFRdW5CLFlBQ2hCalksRUFBYzFDLElBQ2Q0YSxHQUFxQixFQUdyQm5CLEtBQWlCOVEsSUFDbkI4USxHQUFlOVEsRUFDZnFSLEtBQ0FSLEdBQVdwbUIsRUFBUWtuQixPQUNuQkMsRUFBaUJubkIsRUFBUXluQixVQUVSLElBQWJyQixLQUNGQSxHQUFXOVgsRUFBMkJpSCxHQUFRLEtBSWxELElBQUltUyxFQUFZLEVBQ1pDLEVBQWdCdkIsR0FFcEIsRUFBRyxDQUNELElBQUkzeEIsRUFBS2t6QixFQUNMcFcsRUFBT3pFLEVBQVFyWSxHQUNmNFksRUFBTWtFLEVBQUtsRSxJQUNYRSxFQUFTZ0UsRUFBS2hFLE9BQ2RELEVBQU9pRSxFQUFLakUsS0FDWkUsRUFBUStELEVBQUsvRCxNQUNiRSxFQUFRNkQsRUFBSzdELE1BQ2JELEVBQVM4RCxFQUFLOUQsT0FDZG1hLE9BQWEsRUFDYkMsT0FBYSxFQUNiaFksRUFBY3BiLEVBQUdvYixZQUNqQkUsRUFBZXRiLEVBQUdzYixhQUNsQnVKLEVBQVEzTixFQUFJbFgsR0FDWnF6QixFQUFhcnpCLEVBQUc4YSxXQUNoQndZLEVBQWF0ekIsRUFBRythLFVBRWhCL2EsSUFBTzZhLEdBQ1RzWSxFQUFhbGEsRUFBUW1DLElBQW9DLFNBQXBCeUosRUFBTXJKLFdBQTRDLFdBQXBCcUosRUFBTXJKLFdBQThDLFlBQXBCcUosRUFBTXJKLFdBQ3pHNFgsRUFBYXBhLEVBQVNzQyxJQUFxQyxTQUFwQnVKLEVBQU1wSixXQUE0QyxXQUFwQm9KLEVBQU1wSixXQUE4QyxZQUFwQm9KLEVBQU1wSixhQUUzRzBYLEVBQWFsYSxFQUFRbUMsSUFBb0MsU0FBcEJ5SixFQUFNckosV0FBNEMsV0FBcEJxSixFQUFNckosV0FDekU0WCxFQUFhcGEsRUFBU3NDLElBQXFDLFNBQXBCdUosRUFBTXBKLFdBQTRDLFdBQXBCb0osRUFBTXBKLFlBRzdFLElBQUk4WCxFQUFLSixJQUFlaitCLEtBQUtpM0IsSUFBSXBULEVBQVFzRCxJQUFNc1csR0FBUVUsRUFBYXBhLEVBQVFtQyxJQUFnQmxtQixLQUFLaTNCLElBQUl0VCxFQUFPd0QsSUFBTXNXLEtBQVVVLEdBQ3hIRyxFQUFLSixJQUFlbCtCLEtBQUtpM0IsSUFBSXJULEVBQVN3RCxJQUFNcVcsR0FBUVcsRUFBYXRhLEVBQVNzQyxJQUFpQnBtQixLQUFLaTNCLElBQUl2VCxFQUFNMEQsSUFBTXFXLEtBQVVXLEdBRTlILElBQUtyQixHQUFZZ0IsR0FDZixJQUFLLElBQUkxaEMsRUFBSSxFQUFHQSxHQUFLMGhDLEVBQVcxaEMsSUFDekIwZ0MsR0FBWTFnQyxLQUNmMGdDLEdBQVkxZ0MsR0FBSyxJQUtuQjBnQyxHQUFZZ0IsR0FBV00sSUFBTUEsR0FBTXRCLEdBQVlnQixHQUFXTyxJQUFNQSxHQUFNdkIsR0FBWWdCLEdBQVdqekIsS0FBT0EsSUFDdEdpeUIsR0FBWWdCLEdBQVdqekIsR0FBS0EsRUFDNUJpeUIsR0FBWWdCLEdBQVdNLEdBQUtBLEVBQzVCdEIsR0FBWWdCLEdBQVdPLEdBQUtBLEVBQzVCakQsY0FBYzBCLEdBQVlnQixHQUFXWixLQUUzQixHQUFOa0IsR0FBaUIsR0FBTkMsSUFDYlQsR0FBcUIsRUFHckJkLEdBQVlnQixHQUFXWixJQUFNN0UsWUFBWSxXQUVuQ2dGLEdBQTZCLElBQWY3OUIsS0FBSzgrQixPQUNyQnRaLEdBQVNxSSxPQUFPNEosYUFBYTJGLElBSS9CLElBQUkyQixFQUFnQnpCLEdBQVl0OUIsS0FBSzgrQixPQUFPRCxHQUFLdkIsR0FBWXQ5QixLQUFLOCtCLE9BQU9ELEdBQUtYLEVBQVEsRUFDbEZjLEVBQWdCMUIsR0FBWXQ5QixLQUFLOCtCLE9BQU9GLEdBQUt0QixHQUFZdDlCLEtBQUs4K0IsT0FBT0YsR0FBS1YsRUFBUSxFQUV4RCxtQkFBbkJILEdBQ29JLGFBQXpJQSxFQUFlaGhDLEtBQUt5b0IsR0FBU0UsUUFBUTVELFdBQVd1RyxHQUFVMlcsRUFBZUQsRUFBZXhvQixFQUFLNm1CLEdBQVlFLEdBQVl0OUIsS0FBSzgrQixPQUFPenpCLEtBS3ZJb2MsRUFBUzZWLEdBQVl0OUIsS0FBSzgrQixPQUFPenpCLEdBQUkyekIsRUFBZUQsSUFDcEQzZ0MsS0FBSyxDQUNMMGdDLE1BQU9SLElBQ0wsTUFJUkEsVUFDTzFuQixFQUFRcW9CLGNBQWdCVixJQUFrQnJZLElBQWdCcVksRUFBZ0JyWixFQUEyQnFaLEdBQWUsS0FFN0hoQixHQUFZYSxLQUNYLElBRUNjLEdBQU8sU0FBYzlpQixHQUN2QixJQUFJckMsRUFBZ0JxQyxFQUFLckMsY0FDckIyUyxFQUFjdFEsRUFBS3NRLFlBQ25CVyxFQUFTalIsRUFBS2lSLE9BQ2RPLEVBQWlCeFIsRUFBS3dSLGVBQ3RCUSxFQUF3QmhTLEVBQUtnUyxzQkFDN0JOLEVBQXFCMVIsRUFBSzBSLG1CQUMxQkUsRUFBdUI1UixFQUFLNFIscUJBQ2hDLEdBQUtqVSxFQUFMLENBQ0EsSUFBSW9sQixFQUFhelMsR0FBZWtCLEVBQ2hDRSxJQUNBLElBQUlpSSxFQUFRaGMsRUFBY3FsQixnQkFBa0JybEIsRUFBY3FsQixlQUFlLy9CLE9BQVMwYSxFQUFjcWxCLGVBQWUsR0FBS3JsQixFQUNoSDlOLEVBQVN4SyxTQUFTMjJCLGlCQUFpQnJDLEVBQU0xRCxRQUFTMEQsRUFBTXpELFNBQzVEdEUsSUFFSW1SLElBQWVBLEVBQVc5ekIsR0FBR3dxQixTQUFTNXBCLEtBQ3hDbWlCLEVBQXNCLFNBQ3RCcHVCLEtBQUtxL0IsUUFBUSxDQUNYaFMsT0FBUUEsRUFDUlgsWUFBYUEsT0FLbkIsU0FBUzRTLE1Bc0NULFNBQVNDLE1Bb0JULFNBQVNDLEtBQ1AsU0FBU0MsSUFDUHovQixLQUFLOHFCLFNBQVcsQ0FDZDRVLFVBQVcsMkJBNkRmLE9BekRBRCxFQUFLamhDLFVBQVksQ0FDZm1oQyxVQUFXLFNBQW1CdmpCLEdBQzVCLElBQUlpUixFQUFTalIsRUFBS2lSLE9BQ2xCdVEsR0FBYXZRLEdBRWZ1UyxjQUFlLFNBQXVCdGlCLEdBQ3BDLElBQUlrYyxFQUFZbGMsRUFBTWtjLFVBQ2xCdnRCLEVBQVNxUixFQUFNclIsT0FDZjZOLEVBQVN3RCxFQUFNeEQsT0FDZjhULEVBQWlCdFEsRUFBTXNRLGVBQ3ZCK0wsRUFBVXJjLEVBQU1xYyxRQUNoQnBPLEVBQVNqTyxFQUFNaU8sT0FDbkIsR0FBS3FDLEVBQWVoWCxRQUFRaXBCLEtBQTVCLENBQ0EsSUFBSXgwQixFQUFLckwsS0FBS3FyQixTQUFTaGdCLEdBQ25CdUwsRUFBVTVXLEtBQUs0VyxRQUVuQixHQUFJM0ssR0FBVUEsSUFBV1osRUFBSSxDQUMzQixJQUFJeTBCLEVBQWFsQyxJQUVNLElBQW5COWpCLEVBQU83TixJQUNUa1csRUFBWWxXLEVBQVEySyxFQUFROG9CLFdBQVcsR0FDdkM5QixHQUFhM3hCLEdBRWIyeEIsR0FBYSxLQUdYa0MsR0FBY0EsSUFBZWxDLElBQy9CemIsRUFBWTJkLEVBQVlscEIsRUFBUThvQixXQUFXLEdBSS9DL0YsSUFDQUgsR0FBVSxHQUNWak8sTUFFRjJULEtBQU0sU0FBY2EsR0FDbEIsSUFBSW5TLEVBQWlCbVMsRUFBTW5TLGVBQ3ZCbEIsRUFBY3FULEVBQU1yVCxZQUNwQlcsRUFBUzBTLEVBQU0xUyxPQUNmOFIsRUFBYXpTLEdBQWUxc0IsS0FBS3FyQixTQUNqQ3pVLEVBQVU1VyxLQUFLNFcsUUFDbkJnbkIsSUFBY3piLEVBQVl5YixHQUFZaG5CLEVBQVE4b0IsV0FBVyxHQUVyRDlCLEtBQWVobkIsRUFBUWlwQixNQUFRblQsR0FBZUEsRUFBWTlWLFFBQVFpcEIsT0FDaEV4UyxJQUFXdVEsS0FDYnVCLEVBQVd4Vyx3QkFDUHdXLElBQWV2UixHQUFnQkEsRUFBZWpGLHdCQXFCNUQsU0FBbUJxWCxFQUFJQyxHQUNyQixJQUVJQyxFQUNBQyxFQUhBQyxFQUFLSixFQUFHbGUsV0FDUnVlLEVBQUtKLEVBQUduZSxXQUdaLElBQUtzZSxJQUFPQyxHQUFNRCxFQUFHRSxZQUFZTCxJQUFPSSxFQUFHQyxZQUFZTixHQUFLLE9BQzVERSxFQUFLdGdDLEVBQU1vZ0MsR0FDWEcsRUFBS3ZnQyxFQUFNcWdDLEdBRVBHLEVBQUdFLFlBQVlELElBQU9ILEVBQUtDLEdBQzdCQSxJQUdGQyxFQUFHdHRCLGFBQWFtdEIsRUFBSUcsRUFBR3h0QixTQUFTc3RCLElBQ2hDRyxFQUFHdnRCLGFBQWFrdEIsRUFBSUssRUFBR3p0QixTQUFTdXRCLElBbEN4QkksQ0FBVWxULEVBQVF1USxJQUNsQnVCLEVBQVcvVixhQUNQK1YsSUFBZXZSLEdBQWdCQSxFQUFleEUsZUFJeERvWCxRQUFTLFdBQ1A1QyxHQUFhLE9BR1YvZCxFQUFTNGYsRUFBTSxDQUNwQmhVLFdBQVksT0FDWk0sZ0JBQWlCLFdBQ2YsTUFBTyxDQUNMMFUsU0FBVTdDLE9BNUhsQjBCLEdBQU85Z0MsVUFBWSxDQUNqQmtpQyxXQUFZLEtBQ1pmLFVBQVcsU0FBbUJyaUIsR0FDNUIsSUFBSWtQLEVBQW9CbFAsRUFBTWtQLGtCQUM5QnhzQixLQUFLMGdDLFdBQWFsVSxHQUVwQjZTLFFBQVMsU0FBaUJVLEdBQ3hCLElBQUkxUyxFQUFTMFMsRUFBTTFTLE9BQ2ZYLEVBQWNxVCxFQUFNclQsWUFDeEIxc0IsS0FBS3FyQixTQUFTMUMsd0JBRVYrRCxHQUNGQSxFQUFZL0Qsd0JBR2QsSUFBSTlWLEVBQWN3UyxFQUFTcmxCLEtBQUtxckIsU0FBU2hnQixHQUFJckwsS0FBSzBnQyxXQUFZMWdDLEtBQUs0VyxTQUUvRC9ELEVBQ0Y3UyxLQUFLcXJCLFNBQVNoZ0IsR0FBR3lILGFBQWF1YSxFQUFReGEsR0FFdEM3UyxLQUFLcXJCLFNBQVNoZ0IsR0FBRytELFlBQVlpZSxHQUcvQnJ0QixLQUFLcXJCLFNBQVNqQyxhQUVWc0QsR0FDRkEsRUFBWXRELGNBR2hCOFYsS0FBTUEsSUFHUnJmLEVBQVN5ZixHQUFRLENBQ2Y3VCxXQUFZLGtCQUtkOFQsR0FBTy9nQyxVQUFZLENBQ2pCNmdDLFFBQVMsU0FBaUJzQixHQUN4QixJQUFJdFQsRUFBU3NULEVBQU10VCxPQUVmdVQsRUFEY0QsRUFBTWpVLGFBQ1kxc0IsS0FBS3FyQixTQUN6Q3VWLEVBQWVqWSx3QkFDZjBFLEVBQU92TCxZQUFjdUwsRUFBT3ZMLFdBQVdyUCxZQUFZNGEsR0FDbkR1VCxFQUFleFgsY0FFakI4VixLQUFNQSxJQUdScmYsRUFBUzBmLEdBQVEsQ0FDZjlULFdBQVksa0JBZ0dkLElBRUlvVixHQUVKQyxHQU1JQyxHQUNBQyxHQUNBQyxHQVpBQyxHQUFvQixHQUNwQkMsR0FBa0IsR0FJbEJDLElBQWlCLEVBRXJCQyxJQUFVLEVBRVYxVCxJQUFjLEVBS2QsU0FBUzJULEtBQ1AsU0FBU0MsRUFBVWxXLEdBRWpCLElBQUssSUFBSWpxQixLQUFNcEIsS0FDUSxNQUFqQm9CLEVBQUc1QixPQUFPLElBQWtDLG1CQUFiUSxLQUFLb0IsS0FDdENwQixLQUFLb0IsR0FBTXBCLEtBQUtvQixHQUFJaEQsS0FBSzRCLE9BSXpCcXJCLEVBQVN6VSxRQUFRZ2UsZUFDbkI5YixFQUFHclgsU0FBVSxZQUFhekIsS0FBS3doQyxxQkFFL0Ixb0IsRUFBR3JYLFNBQVUsVUFBV3pCLEtBQUt3aEMsb0JBQzdCMW9CLEVBQUdyWCxTQUFVLFdBQVl6QixLQUFLd2hDLHFCQUdoQzFvQixFQUFHclgsU0FBVSxVQUFXekIsS0FBS3loQyxlQUM3QjNvQixFQUFHclgsU0FBVSxRQUFTekIsS0FBSzBoQyxhQUMzQjFoQyxLQUFLOHFCLFNBQVcsQ0FDZDZXLGNBQWUsb0JBQ2ZDLGFBQWMsS0FDZC9OLFFBQVMsU0FBaUJDLEVBQWN6RyxHQUN0QyxJQUFJOVYsRUFBTyxHQUVQMnBCLEdBQWtCN2hDLFFBQVV5aEMsS0FBc0J6VixFQUNwRDZWLEdBQWtCL3lCLFNBQVEsU0FBVTB6QixFQUFrQmpsQyxHQUNwRDJhLElBQVUzYSxFQUFTLEtBQUwsSUFBYWlsQyxFQUFpQjlOLGVBRzlDeGMsRUFBTzhWLEVBQU8wRyxZQUdoQkQsRUFBYUQsUUFBUSxPQUFRdGMsS0FrY25DLE9BN2JBZ3FCLEVBQVUvaUMsVUFBWSxDQUNwQnNqQyxrQkFBa0IsRUFDbEJDLGFBQWEsRUFDYkMsaUJBQWtCLFNBQTBCNWxCLEdBQzFDLElBQUlzSixFQUFVdEosRUFBS2lSLE9BQ25CMFQsR0FBV3JiLEdBRWJ1YyxXQUFZLFdBQ1ZqaUMsS0FBSytoQyxhQUFlYixHQUFrQno3QixRQUFRczdCLEtBRWhEbUIsV0FBWSxTQUFvQjVrQixHQUM5QixJQUFJK04sRUFBVy9OLEVBQU0rTixTQUNqQkUsRUFBU2pPLEVBQU1pTyxPQUNuQixHQUFLdnJCLEtBQUsraEMsWUFBVixDQUVBLElBQUssSUFBSW5sQyxFQUFJLEVBQUdBLEVBQUlza0MsR0FBa0I3aEMsT0FBUXpDLElBQzVDdWtDLEdBQWdCdjJCLEtBQUtzTSxFQUFNZ3FCLEdBQWtCdGtDLEtBQzdDdWtDLEdBQWdCdmtDLEdBQUd1bEMsY0FBZ0JqQixHQUFrQnRrQyxHQUFHdWxDLGNBQ3hEaEIsR0FBZ0J2a0MsR0FBR3FkLFdBQVksRUFDL0JrbkIsR0FBZ0J2a0MsR0FBR3NTLE1BQU0sZUFBaUIsR0FDMUNpVCxFQUFZZ2YsR0FBZ0J2a0MsR0FBSW9ELEtBQUs0VyxRQUFRK3FCLGVBQWUsR0FDNURULEdBQWtCdGtDLEtBQU9ta0MsSUFBWTVlLEVBQVlnZixHQUFnQnZrQyxHQUFJb0QsS0FBSzRXLFFBQVE2YyxhQUFhLEdBR2pHcEksRUFBU3FOLGFBRVRuTixNQUVGclUsTUFBTyxTQUFlNm9CLEdBQ3BCLElBQUkxVSxFQUFXMFUsRUFBTTFVLFNBQ2pCYyxFQUFTNFQsRUFBTTVULE9BQ2ZpQyxFQUF3QjJSLEVBQU0zUixzQkFDOUI3QyxFQUFTd1UsRUFBTXhVLE9BQ2R2ckIsS0FBSytoQyxjQUVML2hDLEtBQUs0VyxRQUFRMGMsbUJBQ1o0TixHQUFrQjdoQyxRQUFVeWhDLEtBQXNCelYsSUFDcEQrVyxJQUFzQixFQUFNalcsR0FDNUJpQyxFQUFzQixTQUN0QjdDLE9BSU44VyxVQUFXLFNBQW1CMUIsR0FDNUIsSUFBSXhTLEVBQWdCd1MsRUFBTXhTLGNBQ3RCaEMsRUFBU3dVLEVBQU14VSxPQUNmWixFQUFTb1YsRUFBTXBWLE9BQ2R2ckIsS0FBSytoQyxjQUNWSyxJQUFzQixFQUFPalcsR0FDN0JnVixHQUFnQmh6QixTQUFRLFNBQVUrSSxHQUNoQ3FMLEVBQUlyTCxFQUFPLFVBQVcsT0FFeEJpWCxJQUNBOFMsSUFBZSxFQUNmMVYsTUFFRitXLFVBQVcsU0FBbUJDLEdBQzVCLElBQUkvc0IsRUFBUXhWLEtBR1JrdUIsR0FEV3FVLEVBQU1sWCxTQUNBa1gsRUFBTXJVLGdCQUN2QjNDLEVBQVNnWCxFQUFNaFgsT0FDZHZyQixLQUFLK2hDLGNBQ1ZaLEdBQWdCaHpCLFNBQVEsU0FBVStJLEdBQ2hDcUwsRUFBSXJMLEVBQU8sVUFBVyxRQUVsQjFCLEVBQU1vQixRQUFRMGMsbUJBQXFCcGMsRUFBTTRLLFlBQzNDNUssRUFBTTRLLFdBQVdyUCxZQUFZeUUsTUFHakNnWCxJQUNBK1MsSUFBZSxFQUNmMVYsTUFFRmlYLGdCQUFpQixTQUF5QkMsR0FDekJBLEVBQU1wWCxVQUVoQnJyQixLQUFLK2hDLGFBQWVqQixJQUN2QkEsR0FBa0I0QixVQUFVbEIscUJBRzlCTixHQUFrQi95QixTQUFRLFNBQVUwekIsR0FDbENBLEVBQWlCTSxjQUFnQnZpQyxFQUFNaWlDLE1BR3pDWCxHQUFvQkEsR0FBa0JuTyxNQUFLLFNBQVU3ekIsRUFBR0MsR0FDdEQsT0FBT0QsRUFBRWlqQyxjQUFnQmhqQyxFQUFFZ2pDLGlCQUU3QnhVLElBQWMsR0FFaEJBLFlBQWEsU0FBcUJnVixHQUNoQyxJQUFJOXNCLEVBQVM3VixLQUVUcXJCLEVBQVdzWCxFQUFNdFgsU0FDckIsR0FBS3JyQixLQUFLK2hDLFlBQVYsQ0FFQSxHQUFJL2hDLEtBQUs0VyxRQUFRbWMsT0FPZjFILEVBQVMxQyx3QkFFTDNvQixLQUFLNFcsUUFBUWdTLFdBQVcsQ0FDMUJzWSxHQUFrQi95QixTQUFRLFNBQVUwekIsR0FDOUJBLElBQXFCZCxJQUN6QnhlLEVBQUlzZixFQUFrQixXQUFZLGVBRXBDLElBQUk3TSxFQUFXdFIsRUFBUXFkLElBQVUsR0FBTyxHQUFNLEdBQzlDRyxHQUFrQi95QixTQUFRLFNBQVUwekIsR0FDOUJBLElBQXFCZCxJQUN6QjdZLEVBQVEyWixFQUFrQjdNLE1BRTVCcU0sSUFBVSxFQUNWRCxJQUFpQixFQUlyQi9WLEVBQVNqQyxZQUFXLFdBQ2xCaVksSUFBVSxFQUNWRCxJQUFpQixFQUVidnJCLEVBQU9lLFFBQVFnUyxXQUNqQnNZLEdBQWtCL3lCLFNBQVEsU0FBVTB6QixHQUNsQ3paLEVBQVV5WixNQUtWaHNCLEVBQU9lLFFBQVFtYyxNQUNqQjZQLFVBSU5DLFNBQVUsU0FBa0JDLEdBQzFCLElBQUk3MkIsRUFBUzYyQixFQUFNNzJCLE9BQ2Z1dEIsRUFBWXNKLEVBQU10SixVQUNsQmpPLEVBQVN1WCxFQUFNdlgsT0FFZjhWLEtBQVlILEdBQWtCejdCLFFBQVF3RyxLQUN4Q3V0QixHQUFVLEdBQ1ZqTyxNQUdKeU4sT0FBUSxTQUFnQitKLEdBQ3RCLElBQUkzSixFQUFlMkosRUFBTTNKLGFBQ3JCak4sRUFBUzRXLEVBQU01VyxPQUNmZCxFQUFXMFgsRUFBTTFYLFNBQ2pCMkosRUFBVytOLEVBQU0vTixTQUVqQmtNLEdBQWtCN2hDLE9BQVMsSUFFN0I2aEMsR0FBa0IveUIsU0FBUSxTQUFVMHpCLEdBQ2xDeFcsRUFBU3JDLGtCQUFrQixDQUN6Qi9jLE9BQVE0MUIsRUFDUjFaLEtBQU1rWixHQUFVM2QsRUFBUW1lLEdBQW9CN00sSUFFOUM1TSxFQUFVeVosR0FDVkEsRUFBaUJoWixTQUFXbU0sRUFDNUJvRSxFQUFhblEscUJBQXFCNFksTUFFcENSLElBQVUsRUE2V2xCLFNBQWlDMkIsRUFBZ0I3VyxHQUMvQytVLEdBQWtCL3lCLFNBQVEsU0FBVTB6QixFQUFrQmpsQyxHQUNwRCxJQUFJcVAsRUFBU2tnQixFQUFPdlosU0FBU2l2QixFQUFpQk0sZUFBaUJhLEVBQWlCOVosT0FBT3RzQixHQUFLLElBRXhGcVAsRUFDRmtnQixFQUFPclosYUFBYSt1QixFQUFrQjUxQixHQUV0Q2tnQixFQUFPL2MsWUFBWXl5QixNQW5YakJvQixFQUF5QmpqQyxLQUFLNFcsUUFBUTBjLGtCQUFtQm5ILEtBRzdEK1csa0JBQW1CLFNBQTJCQyxHQUM1QyxJQUFJOVgsRUFBVzhYLEVBQU85WCxTQUNsQjZOLEVBQVVpSyxFQUFPakssUUFDakJzQyxFQUFZMkgsRUFBTzNILFVBQ25CNU4sRUFBaUJ1VixFQUFPdlYsZUFDeEJOLEVBQVc2VixFQUFPN1YsU0FDbEJaLEVBQWN5VyxFQUFPelcsWUFDckI5VixFQUFVNVcsS0FBSzRXLFFBRW5CLEdBQUk0a0IsRUFBVyxDQVFiLEdBTkl0QyxHQUNGdEwsRUFBZThLLGFBR2pCMEksSUFBaUIsRUFFYnhxQixFQUFRZ1MsV0FBYXNZLEdBQWtCN2hDLE9BQVMsSUFBTWdpQyxLQUFZbkksSUFBWXRMLEVBQWVoWCxRQUFRbWMsT0FBU3JHLEdBQWMsQ0FFOUgsSUFBSTBXLEVBQW1CMWYsRUFBUXFkLElBQVUsR0FBTyxHQUFNLEdBQ3RERyxHQUFrQi95QixTQUFRLFNBQVUwekIsR0FDOUJBLElBQXFCZCxLQUN6QjdZLEVBQVEyWixFQUFrQnVCLEdBRzFCOVYsRUFBU2xlLFlBQVl5eUIsT0FFdkJSLElBQVUsRUFJWixJQUFLbkksRUFNSCxHQUpLbUksSUFDSHVCLEtBR0UxQixHQUFrQjdoQyxPQUFTLEVBQUcsQ0FDaEMsSUFBSWdrQyxFQUFxQnBDLEdBRXpCclQsRUFBZTZOLFdBQVdwUSxHQUd0QnVDLEVBQWVoWCxRQUFRZ1MsWUFBY3FZLElBQWdCb0MsR0FDdkRsQyxHQUFnQmh6QixTQUFRLFNBQVUrSSxHQUNoQzBXLEVBQWU1RSxrQkFBa0IsQ0FDL0IvYyxPQUFRaUwsRUFDUmlSLEtBQU02WSxLQUVSOXBCLEVBQU0yUixTQUFXbVksR0FDakI5cEIsRUFBTTRSLHNCQUF3QixhQUlsQzhFLEVBQWU2TixXQUFXcFEsS0FLbENpWSx5QkFBMEIsU0FBa0NDLEdBQzFELElBQUl2TyxFQUFXdU8sRUFBT3ZPLFNBQ2xCa0UsRUFBVXFLLEVBQU9ySyxRQUNqQnRMLEVBQWlCMlYsRUFBTzNWLGVBSzVCLEdBSkFzVCxHQUFrQi95QixTQUFRLFNBQVUwekIsR0FDbENBLEVBQWlCL1ksc0JBQXdCLFFBR3ZDOEUsRUFBZWhYLFFBQVFnUyxZQUFjc1EsR0FBV3RMLEVBQWU4VSxVQUFVWCxZQUFhLENBQ3hGZixHQUFpQm5oQixFQUFTLEdBQUltVixHQUM5QixJQUFJd08sRUFBYTVnQixFQUFPbWUsSUFBVSxHQUNsQ0MsR0FBZS9jLEtBQU91ZixFQUFXMWhDLEVBQ2pDay9CLEdBQWU5YyxNQUFRc2YsRUFBV24vQixJQUd0Q28vQiwwQkFBMkIsV0FDckJwQyxLQUNGQSxJQUFVLEVBQ1Z1QixPQUdKMUQsS0FBTSxTQUFjd0UsR0FDbEIsSUFBSW50QixFQUFNbXRCLEVBQU8zcEIsY0FDYm9TLEVBQVN1WCxFQUFPdlgsT0FDaEJtQixFQUFXb1csRUFBT3BXLFNBQ2xCakMsRUFBV3FZLEVBQU9yWSxTQUNsQitDLEVBQXdCc1YsRUFBT3RWLHNCQUMvQmpSLEVBQVd1bUIsRUFBT3ZtQixTQUNsQnVQLEVBQWNnWCxFQUFPaFgsWUFDckJ5UyxFQUFhelMsR0FBZTFzQixLQUFLcXJCLFNBQ3JDLEdBQUs5VSxFQUFMLENBQ0EsSUFBSUssRUFBVTVXLEtBQUs0VyxRQUNmaEUsRUFBVzBhLEVBQVMxYSxTQUV4QixJQUFLK2EsR0FPSCxHQU5JL1csRUFBUWdyQixlQUFpQjVoQyxLQUFLOGhDLGtCQUNoQzloQyxLQUFLd2hDLHFCQUdQcmYsRUFBWTRlLEdBQVVucUIsRUFBUStxQixnQkFBaUJULEdBQWtCejdCLFFBQVFzN0IsTUFFbkVHLEdBQWtCejdCLFFBQVFzN0IsSUE4QzlCRyxHQUFrQmprQixPQUFPaWtCLEdBQWtCejdCLFFBQVFzN0IsSUFBVyxHQUM5REYsR0FBc0IsS0FDdEIzVSxFQUFjLENBQ1piLFNBQVVBLEVBQ1ZjLE9BQVFBLEVBQ1JodkIsS0FBTSxXQUNOaXZCLFNBQVUyVSxHQUNWNEMsWUFBYXB0QixRQXJEMEIsQ0FVekMsR0FUQTJxQixHQUFrQnQyQixLQUFLbTJCLElBQ3ZCN1UsRUFBYyxDQUNaYixTQUFVQSxFQUNWYyxPQUFRQSxFQUNSaHZCLEtBQU0sU0FDTml2QixTQUFVMlUsR0FDVjRDLFlBQWFwdEIsSUFHWEEsRUFBSXF0QixVQUFZL0MsSUFBdUJ4VixFQUFTaGdCLEdBQUd3cUIsU0FBU2dMLElBQXNCLENBQ3BGLElBTU14aUMsRUFBR3pCLEVBTkw0TSxFQUFZNUosRUFBTWloQyxJQUNsQnpoQixFQUFleGYsRUFBTW1oQyxJQUV6QixJQUFLdjNCLElBQWM0VixHQUFnQjVWLElBQWM0VixFQWEvQyxJQVJJQSxFQUFlNVYsR0FDakI1TSxFQUFJNE0sRUFDSm5MLEVBQUkrZ0IsSUFFSnhpQixFQUFJd2lCLEVBQ0ovZ0IsRUFBSW1MLEVBQVksR0FHWDVNLEVBQUl5QixFQUFHekIsS0FDUHNrQyxHQUFrQno3QixRQUFRbU4sRUFBU2hXLE1BQ3hDdWxCLEVBQVl2UCxFQUFTaFcsR0FBSWdhLEVBQVErcUIsZUFBZSxHQUNoRFQsR0FBa0J0MkIsS0FBS2dJLEVBQVNoVyxJQUNoQ3N2QixFQUFjLENBQ1piLFNBQVVBLEVBQ1ZjLE9BQVFBLEVBQ1JodkIsS0FBTSxTQUNOaXZCLFNBQVV4WixFQUFTaFcsR0FDbkIrbUMsWUFBYXB0QixVQUtuQnNxQixHQUFzQkUsR0FHeEJELEdBQW9CM0IsRUFleEIsR0FBSXhSLElBQWUzdEIsS0FBSytoQyxZQUFhLENBRW5DLElBQUt6VSxFQUFTakYsR0FBU3pSLFFBQVFtYyxNQUFRekYsSUFBYW5CLElBQVcrVSxHQUFrQjdoQyxPQUFTLEVBQUcsQ0FDM0YsSUFBSTIxQixFQUFXdFIsRUFBUXFkLElBQ25COEMsRUFBaUJqa0MsRUFBTW1oQyxHQUFVLFNBQVcvZ0MsS0FBSzRXLFFBQVErcUIsY0FBZ0IsS0FJN0UsSUFIS1AsSUFBa0J4cUIsRUFBUWdTLFlBQVdtWSxHQUFTalksc0JBQXdCLE1BQzNFcVcsRUFBV3hXLHlCQUVOeVksS0FDQ3hxQixFQUFRZ1MsWUFDVm1ZLEdBQVNsWSxTQUFXbU0sRUFDcEJrTSxHQUFrQi95QixTQUFRLFNBQVUwekIsR0FHbEMsR0FGQUEsRUFBaUIvWSxzQkFBd0IsS0FFckMrWSxJQUFxQmQsR0FBVSxDQUNqQyxJQUFJNVksRUFBT2taLEdBQVUzZCxFQUFRbWUsR0FBb0I3TSxFQUNqRDZNLEVBQWlCaFosU0FBV1YsRUFFNUJnWCxFQUFXblcsa0JBQWtCLENBQzNCL2MsT0FBUTQxQixFQUNSMVosS0FBTUEsU0FRZHlhLEtBQ0ExQixHQUFrQi95QixTQUFRLFNBQVUwekIsR0FDOUJqdkIsRUFBU2l4QixHQUNYdlcsRUFBU3hhLGFBQWErdUIsRUFBa0JqdkIsRUFBU2l4QixJQUVqRHZXLEVBQVNsZSxZQUFZeXlCLEdBR3ZCZ0MsT0FLRTFtQixJQUFhdmQsRUFBTW1oQyxLQUFXLENBQ2hDLElBQUl0b0IsR0FBUyxFQUNieW9CLEdBQWtCL3lCLFNBQVEsU0FBVTB6QixHQUM5QkEsRUFBaUJNLGdCQUFrQnZpQyxFQUFNaWlDLEtBQzNDcHBCLEdBQVMsTUFLVEEsR0FDRjJWLEVBQXNCLFVBTTVCOFMsR0FBa0IveUIsU0FBUSxTQUFVMHpCLEdBQ2xDelosRUFBVXlaLE1BRVoxQyxFQUFXL1YsYUFHYjBYLEdBQW9CM0IsR0FJbEJoVCxJQUFXbUIsR0FBWVosR0FBMkMsVUFBNUJBLEVBQVlTLGNBQ3BEZ1UsR0FBZ0JoekIsU0FBUSxTQUFVK0ksR0FDaENBLEVBQU00SyxZQUFjNUssRUFBTTRLLFdBQVdyUCxZQUFZeUUsUUFJdkQ0c0IsY0FBZSxXQUNiOWpDLEtBQUsraEMsWUFBY3BVLElBQWMsRUFDakN3VCxHQUFnQjloQyxPQUFTLEdBRTNCMGtDLGNBQWUsV0FDYi9qQyxLQUFLd2hDLHFCQUVMcGdCLEVBQUkzZixTQUFVLFlBQWF6QixLQUFLd2hDLG9CQUNoQ3BnQixFQUFJM2YsU0FBVSxVQUFXekIsS0FBS3doQyxvQkFDOUJwZ0IsRUFBSTNmLFNBQVUsV0FBWXpCLEtBQUt3aEMsb0JBQy9CcGdCLEVBQUkzZixTQUFVLFVBQVd6QixLQUFLeWhDLGVBQzlCcmdCLEVBQUkzZixTQUFVLFFBQVN6QixLQUFLMGhDLGNBRTlCRixtQkFBb0IsU0FBNEJqckIsR0FDOUMsVUFBMkIsSUFBaEJvWCxJQUErQkEsSUFFdENtVCxLQUFzQjlnQyxLQUFLcXJCLFVBRTNCOVUsR0FBT3dMLEVBQVF4TCxFQUFJdEssT0FBUWpNLEtBQUs0VyxRQUFRcUQsVUFBV2phLEtBQUtxckIsU0FBU2hnQixJQUFJLElBRXJFa0wsR0FBc0IsSUFBZkEsRUFBSWtnQixRQUVmLEtBQU95SyxHQUFrQjdoQyxRQUFRLENBQy9CLElBQUlnTSxFQUFLNjFCLEdBQWtCLEdBQzNCL2UsRUFBWTlXLEVBQUlyTCxLQUFLNFcsUUFBUStxQixlQUFlLEdBQzVDVCxHQUFrQjhDLFFBQ2xCOVgsRUFBYyxDQUNaYixTQUFVcnJCLEtBQUtxckIsU0FDZmMsT0FBUW5zQixLQUFLcXJCLFNBQVNoZ0IsR0FDdEJsTyxLQUFNLFdBQ05pdkIsU0FBVS9nQixFQUNWczRCLFlBQWFwdEIsTUFJbkJrckIsY0FBZSxTQUF1QmxyQixHQUNoQ0EsRUFBSXBZLE1BQVE2QixLQUFLNFcsUUFBUWdyQixlQUMzQjVoQyxLQUFLOGhDLGtCQUFtQixJQUc1QkosWUFBYSxTQUFxQm5yQixHQUM1QkEsRUFBSXBZLE1BQVE2QixLQUFLNFcsUUFBUWdyQixlQUMzQjVoQyxLQUFLOGhDLGtCQUFtQixLQUl2QmppQixFQUFTMGhCLEVBQVcsQ0FFekI5VixXQUFZLFlBQ1orUSxNQUFPLENBS0x5SCxPQUFRLFNBQWdCNTRCLEdBQ3RCLElBQUlnZ0IsRUFBV2hnQixFQUFHeVcsV0FBV3VHLEdBQ3hCZ0QsR0FBYUEsRUFBU3pVLFFBQVE4ckIsYUFBY3hCLEdBQWtCejdCLFFBQVE0RixLQUV2RXkxQixJQUFxQkEsS0FBc0J6VixJQUM3Q3lWLEdBQWtCNEIsVUFBVWxCLHFCQUU1QlYsR0FBb0J6VixHQUd0QmxKLEVBQVk5VyxFQUFJZ2dCLEVBQVN6VSxRQUFRK3FCLGVBQWUsR0FDaERULEdBQWtCdDJCLEtBQUtTLEtBT3pCNjRCLFNBQVUsU0FBa0I3NEIsR0FDMUIsSUFBSWdnQixFQUFXaGdCLEVBQUd5VyxXQUFXdUcsR0FDekJ6b0IsRUFBUXNoQyxHQUFrQno3QixRQUFRNEYsR0FDakNnZ0IsR0FBYUEsRUFBU3pVLFFBQVE4ckIsWUFBZTlpQyxJQUNsRHVpQixFQUFZOVcsRUFBSWdnQixFQUFTelUsUUFBUStxQixlQUFlLEdBQ2hEVCxHQUFrQmprQixPQUFPcmQsRUFBTyxNQUdwQ21zQixnQkFBaUIsV0FDZixJQUFJeFMsRUFBU3ZaLEtBRVRta0MsRUFBYyxHQUNkQyxFQUFjLEdBc0JsQixPQXJCQWxELEdBQWtCL3lCLFNBQVEsU0FBVTB6QixHQU1sQyxJQUFJemtCLEVBTEorbUIsRUFBWXY1QixLQUFLLENBQ2ZpM0IsaUJBQWtCQSxFQUNsQmppQyxNQUFPaWlDLEVBQWlCTSxnQkFNeEIva0IsRUFERWlrQixJQUFXUSxJQUFxQmQsSUFDdEIsRUFDSE0sR0FDRXpoQyxFQUFNaWlDLEVBQWtCLFNBQVd0b0IsRUFBTzNDLFFBQVErcUIsY0FBZ0IsS0FFbEUvaEMsRUFBTWlpQyxHQUduQnVDLEVBQVl4NUIsS0FBSyxDQUNmaTNCLGlCQUFrQkEsRUFDbEJqaUMsTUFBT3dkLE9BR0osQ0FDTGdmLE1BQU92bkIsRUFBbUJxc0IsSUFDMUJtRCxPQUFRLEdBQUcxM0IsT0FBT3cwQixJQUNsQmdELFlBQWFBLEVBQ2JDLFlBQWFBLElBR2pCblksZ0JBQWlCLENBQ2YyVixhQUFjLFNBQXNCempDLEdBU2xDLE1BTlksVUFGWkEsRUFBTUEsRUFBSXdYLGVBR1J4WCxFQUFNLFVBQ0dBLEVBQUlrQixPQUFTLElBQ3RCbEIsRUFBTUEsRUFBSXFCLE9BQU8sR0FBRzhTLGNBQWdCblUsRUFBSTB1QixPQUFPLElBRzFDMXVCLE1Bd0JmLFNBQVNpa0MsR0FBc0JrQyxFQUFrQm5ZLEdBQy9DZ1YsR0FBZ0JoekIsU0FBUSxTQUFVK0ksRUFBT3RhLEdBQ3ZDLElBQUlxUCxFQUFTa2dCLEVBQU92WixTQUFTc0UsRUFBTWlyQixlQUFpQm1DLEVBQW1CcGIsT0FBT3RzQixHQUFLLElBRS9FcVAsRUFDRmtnQixFQUFPclosYUFBYW9FLEVBQU9qTCxHQUUzQmtnQixFQUFPL2MsWUFBWThILE1BS3pCLFNBQVMwckIsS0FDUDFCLEdBQWtCL3lCLFNBQVEsU0FBVTB6QixHQUM5QkEsSUFBcUJkLElBQ3pCYyxFQUFpQi9mLFlBQWMrZixFQUFpQi9mLFdBQVdyUCxZQUFZb3ZCLE1BSTNFcmMsR0FBU3lGLE1BQU0sSUFqL0JmLFdBQ0UsU0FBU3NaLElBUVAsSUFBSyxJQUFJbmpDLEtBUFRwQixLQUFLOHFCLFNBQVcsQ0FDZGdULFFBQVEsRUFDUkcsa0JBQW1CLEdBQ25CRSxZQUFhLEdBQ2JjLGNBQWMsR0FHRGovQixLQUNRLE1BQWpCb0IsRUFBRzVCLE9BQU8sSUFBa0MsbUJBQWJRLEtBQUtvQixLQUN0Q3BCLEtBQUtvQixHQUFNcEIsS0FBS29CLEdBQUloRCxLQUFLNEIsT0E0Ri9CLE9BdkZBdWtDLEVBQVcvbEMsVUFBWSxDQUNyQm12QixZQUFhLFNBQXFCdlIsR0FDaEMsSUFBSXJDLEVBQWdCcUMsRUFBS3JDLGNBRXJCL1osS0FBS3FyQixTQUFTd0osZ0JBQ2hCL2IsRUFBR3JYLFNBQVUsV0FBWXpCLEtBQUt3a0MsbUJBRTFCeGtDLEtBQUs0VyxRQUFRZ2UsZUFDZjliLEVBQUdyWCxTQUFVLGNBQWV6QixLQUFLeWtDLDJCQUN4QjFxQixFQUFjb1ksUUFDdkJyWixFQUFHclgsU0FBVSxZQUFhekIsS0FBS3lrQywyQkFFL0IzckIsRUFBR3JYLFNBQVUsWUFBYXpCLEtBQUt5a0MsNEJBSXJDdkIsa0JBQW1CLFNBQTJCNWxCLEdBQzVDLElBQUl2RCxFQUFnQnVELEVBQU12RCxjQUdyQi9aLEtBQUs0VyxRQUFROHRCLGdCQUFtQjNxQixFQUFjb1MsUUFDakRuc0IsS0FBS3drQyxrQkFBa0J6cUIsSUFHM0JtbEIsS0FBTSxXQUNBbC9CLEtBQUtxckIsU0FBU3dKLGdCQUNoQnpULEVBQUkzZixTQUFVLFdBQVl6QixLQUFLd2tDLG9CQUUvQnBqQixFQUFJM2YsU0FBVSxjQUFlekIsS0FBS3lrQywyQkFDbENyakIsRUFBSTNmLFNBQVUsWUFBYXpCLEtBQUt5a0MsMkJBQ2hDcmpCLEVBQUkzZixTQUFVLFlBQWF6QixLQUFLeWtDLDRCQUdsQzlHLEtBQ0FILEtBdm1FSm5VLGFBQWFwSCxHQUNiQSxPQUFtQixHQXltRWpCdWUsUUFBUyxXQUNQcEQsR0FBYUgsR0FBZUQsR0FBV08sR0FBWUYsR0FBNkJILEdBQWtCQyxHQUFrQixLQUNwSEcsR0FBWWorQixPQUFTLEdBRXZCb2xDLDBCQUEyQixTQUFtQ2x1QixHQUM1RHZXLEtBQUt3a0Msa0JBQWtCanVCLEdBQUssSUFFOUJpdUIsa0JBQW1CLFNBQTJCanVCLEVBQUt5aEIsR0FDakQsSUFBSXhpQixFQUFReFYsS0FFUjBuQixHQUFLblIsRUFBSTRiLFFBQVU1YixFQUFJNGIsUUFBUSxHQUFLNWIsR0FBSzhiLFFBQ3pDMUssR0FBS3BSLEVBQUk0YixRQUFVNWIsRUFBSTRiLFFBQVEsR0FBSzViLEdBQUsrYixRQUN6Q2hNLEVBQU83a0IsU0FBUzIyQixpQkFBaUIxUSxFQUFHQyxHQU14QyxHQUxBeVYsR0FBYTdtQixFQUtUeWhCLEdBQVlyWCxHQUFRRCxHQUFjRyxFQUFRLENBQzVDNGMsR0FBV2xuQixFQUFLdlcsS0FBSzRXLFFBQVMwUCxFQUFNMFIsR0FFcEMsSUFBSTJNLEVBQWlCemYsRUFBMkJvQixHQUFNLElBRWxEaVgsSUFBZUYsSUFBOEIzVixJQUFNd1YsSUFBbUJ2VixJQUFNd1YsS0FDOUVFLElBQThCTSxLQUU5Qk4sR0FBNkJ4RSxhQUFZLFdBQ3ZDLElBQUkrTCxFQUFVMWYsRUFBMkJ6akIsU0FBUzIyQixpQkFBaUIxUSxFQUFHQyxJQUFJLEdBRXRFaWQsSUFBWUQsSUFDZEEsRUFBaUJDLEVBQ2pCcEgsTUFHRkMsR0FBV2xuQixFQUFLZixFQUFNb0IsUUFBU2d1QixFQUFTNU0sS0FDdkMsSUFDSGtGLEdBQWtCeFYsRUFDbEJ5VixHQUFrQnhWLE9BRWYsQ0FFTCxJQUFLM25CLEtBQUs0VyxRQUFRcW9CLGNBQWdCL1osRUFBMkJvQixHQUFNLEtBQVU5QyxJQUUzRSxZQURBZ2EsS0FJRkMsR0FBV2xuQixFQUFLdlcsS0FBSzRXLFFBQVNzTyxFQUEyQm9CLEdBQU0sSUFBUSxNQUl0RXpHLEVBQVMwa0IsRUFBWSxDQUMxQjlZLFdBQVksU0FDWlYscUJBQXFCLE1BeTRCekJ2RixHQUFTeUYsTUFBTXNVLEdBQVFELElBRVIsYzs7Ozs7O0FDMW1IZixTQUFTNWYsRUFBUUMsR0FXZixPQVRFRCxFQURvQixtQkFBWC9oQixRQUFvRCxpQkFBcEJBLE9BQU8wTSxTQUN0QyxTQUFVc1YsR0FDbEIsY0FBY0EsR0FHTixTQUFVQSxHQUNsQixPQUFPQSxHQUF5QixtQkFBWGhpQixRQUF5QmdpQixFQUFJeGMsY0FBZ0J4RixRQUFVZ2lCLElBQVFoaUIsT0FBT2EsVUFBWSxnQkFBa0JtaEIsSUFJOUdBLEdBR2pCLFNBQVNDLEVBQWdCRCxFQUFLeGhCLEVBQUtOLEdBWWpDLE9BWElNLEtBQU93aEIsRUFDVHJpQixPQUFPQyxlQUFlb2lCLEVBQUt4aEIsRUFBSyxDQUM5Qk4sTUFBT0EsRUFDUEwsWUFBWSxFQUNaNkssY0FBYyxFQUNkRSxVQUFVLElBR1pvWCxFQUFJeGhCLEdBQU9OLEVBR044aEIsRUFHVCxTQUFTOUssRUFBbUJqTSxHQUMxQixPQUdGLFNBQTRCQSxHQUMxQixHQUFJZCxNQUFNNUcsUUFBUTBILEdBQU0sQ0FDdEIsSUFBSyxJQUFJaE0sRUFBSSxFQUFHa1ksRUFBTyxJQUFJaE4sTUFBTWMsRUFBSXZKLFFBQVN6QyxFQUFJZ00sRUFBSXZKLE9BQVF6QyxJQUFLa1ksRUFBS2xZLEdBQUtnTSxFQUFJaE0sR0FFakYsT0FBT2tZLEdBUEZDLENBQW1Cbk0sSUFXNUIsU0FBMEJDLEdBQ3hCLEdBQUlsTCxPQUFPME0sWUFBWS9NLE9BQU91TCxJQUFrRCx1QkFBekN2TCxPQUFPa0IsVUFBVThDLFNBQVN2RSxLQUFLOEwsR0FBZ0MsT0FBT2YsTUFBTVksS0FBS0csR0FadEZtTSxDQUFpQnBNLElBZXJELFdBQ0UsTUFBTSxJQUFJcEgsVUFBVSxtREFoQnVDeVQsR0FzQjdELFNBQVM0dkIsSUFDUCxNQUEwQixvQkFBWkMsU0FBMkJBLFFBQVFDLGdCQUFrQkQsUUFBUUUsbUJBRTdFLFNBQVNDLEVBQXVCMW5CLEVBQUk3VSxHQUNsQ3c4QixFQUFnQjNuQixFQUFJN1UsR0FDcEJwTCxPQUFPNm5DLG9CQUFvQno4QixFQUFLbEssV0FBVzJQLFNBQVEsU0FBVWhRLEdBQzNEK21DLEVBQWdCM25CLEVBQUcvZSxVQUFXa0ssRUFBS2xLLFVBQVdMLE1BRWhEYixPQUFPNm5DLG9CQUFvQno4QixHQUFNeUYsU0FBUSxTQUFVaFEsR0FDakQrbUMsRUFBZ0IzbkIsRUFBSTdVLEVBQU12SyxNQUk5QixTQUFTK21DLEVBQWdCM25CLEVBQUk3VSxFQUFNMDhCLElBQ2xCQSxFQUFjTixRQUFRRSxtQkFBbUJ0OEIsRUFBTTA4QixHQUFlTixRQUFRRSxtQkFBbUJ0OEIsSUFDL0Z5RixTQUFRLFNBQVVrM0IsR0FDekIsSUFBSUMsRUFBV0YsRUFBY04sUUFBUVMsZUFBZUYsRUFBUzM4QixFQUFNMDhCLEdBQWVOLFFBQVFTLGVBQWVGLEVBQVMzOEIsR0FFOUcwOEIsRUFDRk4sUUFBUUMsZUFBZU0sRUFBU0MsRUFBVS9uQixFQUFJNm5CLEdBRTlDTixRQUFRQyxlQUFlTSxFQUFTQyxFQUFVL25CLE1BS2hELElBR0lpb0IsRUFIWSxDQUNkQyxVQUFXLGNBRXVCMzlCLE1BQ3BDLFNBQVM0OUIsRUFBZ0JDLEdBQ3ZCLE9BQU8sU0FBVTE1QixFQUFROU4sRUFBS3lCLEdBQzVCLElBQUlnbUMsRUFBeUIsbUJBQVgzNUIsRUFBd0JBLEVBQVNBLEVBQU85SSxZQUVyRHlpQyxFQUFLQyxpQkFDUkQsRUFBS0MsZUFBaUIsSUFHSCxpQkFBVmptQyxJQUNUQSxPQUFRTixHQUdWc21DLEVBQUtDLGVBQWVqN0IsTUFBSyxTQUFVZ00sR0FDakMsT0FBTyt1QixFQUFRL3VCLEVBQVN6WSxFQUFLeUIsT0F3Qm5DLFNBQVNrbUMsRUFBMkJDLEVBQUlDLEdBRXRDLElBQUlDLEVBQWVELEVBQVV4bkMsVUFBVTBuQyxNQUV2Q0YsRUFBVXhuQyxVQUFVMG5DLE1BQVEsV0FDMUIsSUFBSTF3QixFQUFReFYsS0FHUmlHLEVBQU8zSSxPQUFPNm5DLG9CQUFvQlksR0FFdEMsR0FBSUEsRUFBR3hwQixTQUFTNUYsTUFDZCxJQUFLLElBQUl4WSxLQUFPNG5DLEVBQUd4cEIsU0FBUzVGLE1BQ3JCb3ZCLEVBQUd0bkMsZUFBZU4sSUFDckI4SCxFQUFLMkUsS0FBS3pNLEdBS2hCOEgsRUFBS2tJLFNBQVEsU0FBVWhRLEdBQ0MsTUFBbEJBLEVBQUlxQixPQUFPLElBQ2JsQyxPQUFPQyxlQUFlaVksRUFBT3JYLEVBQUssQ0FDaENWLElBQUssV0FDSCxPQUFPc29DLEVBQUc1bkMsSUFFWmsrQixJQUFLLFNBQWF4K0IsR0FDaEJrb0MsRUFBRzVuQyxHQUFPTixHQUVad0ssY0FBYyxRQU90QixJQUFJa1AsRUFBTyxJQUFJeXVCLEVBRWZBLEVBQVV4bkMsVUFBVTBuQyxNQUFRRCxFQUU1QixJQUFJRSxFQUFZLEdBYWhCLE9BWkE3b0MsT0FBTzJJLEtBQUtzUixHQUFNcEosU0FBUSxTQUFVaFEsUUFDaEJtQixJQUFkaVksRUFBS3BaLEtBQ1Bnb0MsRUFBVWhvQyxHQUFPb1osRUFBS3BaLE9BVW5CZ29DLEVBR1QsSUFBSUMsRUFBaUIsQ0FBQyxPQUFRLGVBQWdCLFVBQVcsY0FBZSxVQUFXLGdCQUFpQixZQUFhLGVBQWdCLFVBQVcsWUFBYSxjQUFlLFNBQVUsZ0JBQWlCLGtCQUVuTSxTQUFTQyxFQUFpQkwsR0FDeEIsSUFBSXB2QixFQUFVL1QsVUFBVXhELE9BQVMsUUFBc0JDLElBQWpCdUQsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQ2xGK1QsRUFBUXpaLEtBQU95WixFQUFRelosTUFBUTZvQyxFQUFVeHBCLGVBQWlCd3BCLEVBQVU3b0MsS0FFcEUsSUFBSTJKLEVBQVFrL0IsRUFBVXhuQyxVQUN0QmxCLE9BQU82bkMsb0JBQW9CcitCLEdBQU9xSCxTQUFRLFNBQVVoUSxHQUNsRCxHQUFZLGdCQUFSQSxFQUtKLEdBQUlpb0MsRUFBZTNnQyxRQUFRdEgsSUFBUSxFQUNqQ3lZLEVBQVF6WSxHQUFPMkksRUFBTTNJLE9BRHZCLENBS0EsSUFBSTBQLEVBQWF2USxPQUFPMmlCLHlCQUF5Qm5aLEVBQU8zSSxRQUUvQixJQUFyQjBQLEVBQVdoUSxNQUVtQixtQkFBckJnUSxFQUFXaFEsT0FDbkIrWSxFQUFRbFEsVUFBWWtRLEVBQVFsUSxRQUFVLEtBQUt2SSxHQUFPMFAsRUFBV2hRLE9BRzdEK1ksRUFBUTB2QixTQUFXMXZCLEVBQVEwdkIsT0FBUyxLQUFLMTdCLEtBQUssQ0FDN0MyTSxLQUFNLFdBQ0osT0FBT3FJLEVBQWdCLEdBQUl6aEIsRUFBSzBQLEVBQVdoUSxXQUl4Q2dRLEVBQVdwUSxLQUFPb1EsRUFBV3d1QixRQUVyQ3psQixFQUFRMkQsV0FBYTNELEVBQVEyRCxTQUFXLEtBQUtwYyxHQUFPLENBQ25EVixJQUFLb1EsRUFBV3BRLElBQ2hCNCtCLElBQUt4dUIsRUFBV3d1QixXQUlyQnpsQixFQUFRMHZCLFNBQVcxdkIsRUFBUTB2QixPQUFTLEtBQUsxN0IsS0FBSyxDQUM3QzJNLEtBQU0sV0FDSixPQUFPdXVCLEVBQTJCOWxDLEtBQU1nbUMsTUFJNUMsSUFBSU8sRUFBYVAsRUFBVUgsZUFFdkJVLElBQ0ZBLEVBQVdwNEIsU0FBUSxTQUFVL00sR0FDM0IsT0FBT0EsRUFBR3dWLGFBRUxvdkIsRUFBVUgsZ0JBSW5CLElBQUlXLEVBQWFscEMsT0FBT3dJLGVBQWVrZ0MsRUFBVXhuQyxXQUM3Q2lvQyxFQUFRRCxhQUFzQixJQUFNQSxFQUFXcmpDLFlBQWMsSUFDN0R1akMsRUFBV0QsRUFBTWhLLE9BQU83bEIsR0FPNUIsT0FOQSt2QixFQUFxQkQsRUFBVVYsRUFBV1MsR0FFdEM1QixLQUNGSSxFQUF1QnlCLEVBQVVWLEdBRzVCVSxFQUVULElBS0lFLEVBQWUsQ0FDakJwb0MsV0FBVyxFQUNYcUUsV0FBVyxFQUNYMEIsUUFBUSxFQUNSc2lDLFFBQVEsR0FHVixTQUFTRixFQUFxQkQsRUFBVUksRUFBVUwsR0FFaERucEMsT0FBTzZuQyxvQkFBb0IyQixHQUFVMzRCLFNBQVEsU0FBVWhRLEdBRXJELElBQUl5b0MsRUFBYXpvQyxHQUFqQixDQUtBLElBQUk0b0MsRUFBcUJ6cEMsT0FBTzJpQix5QkFBeUJ5bUIsRUFBVXZvQyxHQUVuRSxJQUFJNG9DLEdBQXVCQSxFQUFtQjErQixhQUE5QyxDQUlBLElBL0ppQnhLLEVBQ2YwTixFQThKRXNDLEVBQWF2USxPQUFPMmlCLHlCQUF5QjZtQixFQUFVM29DLEdBUTNELElBQUtxbkMsRUFBVSxDQUliLEdBQVksUUFBUnJuQyxFQUNGLE9BR0YsSUFBSTZvQyxFQUFrQjFwQyxPQUFPMmlCLHlCQUF5QndtQixFQUFPdG9DLEdBRTdELEdBakxlTixFQWlMRWdRLEVBQVdoUSxNQWhMNUIwTixFQUFPbVUsRUFBUTdoQixHQUVILE1BQVRBLElBQTBCLFdBQVQwTixHQUE4QixhQUFUQSxJQThLSHk3QixHQUFtQkEsRUFBZ0JucEMsUUFBVWdRLEVBQVdoUSxNQUM1RixPQUtBLEVBSUpQLE9BQU9DLGVBQWVtcEMsRUFBVXZvQyxFQUFLMFAsUUFJekMsU0FBUyxFQUFVK0ksR0FDakIsTUFBdUIsbUJBQVpBLEVBQ0Z5dkIsRUFBaUJ6dkIsR0FHbkIsU0FBVW92QixHQUNmLE9BQU9LLEVBQWlCTCxFQUFXcHZCLElBSXZDLEVBQVVxd0IsY0FBZ0IsU0FBdUJoaEMsR0FDL0NtZ0MsRUFBZXg3QixLQUFLaEksTUFBTXdqQyxFQUFnQnZ4QixFQUFtQjVPLEtBR2hELFFDNU1mLElBQUlpaEMsRUFBZ0Qsb0JBQVpwQyxjQUEwRCxJQUF4QkEsUUFBUXFDLFlBQ2xGLFNBQVNDLEVBQWN4d0IsRUFBUzNLLEVBQVE5TixHQUNwQyxHQUFJK29DLElBQ0twL0IsTUFBTTVHLFFBQVEwVixJQUNJLG1CQUFaQSxRQUNpQixJQUFqQkEsRUFBUXJMLEtBQXNCLENBQ3JDLElBQUlBLEVBQU91NUIsUUFBUXFDLFlBQVksY0FBZWw3QixFQUFROU4sR0FDbERvTixJQUFTak8sU0FDVHNaLEVBQVFyTCxLQUFPQSxJQTJCeEIsU0FBUzg3QixFQUFLendCLEdBRWpCLFlBRGdCLElBQVpBLElBQXNCQSxFQUFVLElBQzdCLFNBQVUzSyxFQUFROU4sR0FDckJpcEMsRUFBY3h3QixFQUFTM0ssRUFBUTlOLEdBQy9CdW5DLEdBQWdCLFNBQVU1dEIsRUFBa0IxSixJQUV2QzBKLEVBQWlCbkIsUUFBVW1CLEVBQWlCbkIsTUFBUSxLQUFLdkksR0FBS3dJLElBRm5FOHVCLENBR0d6NUIsRUFBUTlOLEksb0JDMUpuQixNQUFNbXBDLEVBQ0csUUFESEEsRUFFSSxTQUVKQyxFQUNFLE9BREZBLEVBRUcsUUFGSEEsRUFHSyxVQUlJLE1BQU1DLEVBQ25CLFlBQWFDLEVBQU9DLEdBQ2xCMW5DLEtBQUsybkMsS0FBS0YsRUFBT0MsR0FHbkIsS0FBTUQsRUFBT0MsR0FFWDFuQyxLQUFLeW5DLE1BQVFBLEVBQ2J6bkMsS0FBSzBuQyxXQUFhQSxFQUdsQjFuQyxLQUFLNG5DLE1BQVEsSUFBSUMsSUFDakI3bkMsS0FBSzhuQyxvQkFBc0IsRUFDM0I5bkMsS0FBSytuQyxzQkFBd0IsRUFDN0IvbkMsS0FBS2dvQyxjQUFnQixFQUNyQmhvQyxLQUFLaW9DLGVBQWlCLEVBQ3RCam9DLEtBQUtrb0MsU0FBV1gsRUFHaEJ2bkMsS0FBS21vQyxPQUFTLEVBQ2Rub0MsS0FBS3V6QixVQUFZLEdBR2pCdnpCLEtBQUtvb0MsTUFBUTlxQyxPQUFPWSxPQUFPLE1BQ3ZCOEIsS0FBS3luQyxPQUNQem5DLEtBQUtxb0MsV0FBVyxFQUFHWixFQUFNYSxNQUFRLEdBUXJDLFVBQ0V0b0MsS0FBSzJuQyxLQUFLLEtBQU0sTUFJbEIsV0FDRSxNQUFNUyxFQUFROXFDLE9BQU9ZLE9BQU8sTUFLNUIsT0FKQWtxQyxFQUFNRyxNQUFRdm9DLEtBQUtvb0MsTUFBTUcsTUFDekJILEVBQU1JLElBQU14b0MsS0FBS29vQyxNQUFNSSxJQUN2QkosRUFBTUssU0FBV3pvQyxLQUFLb29DLE1BQU1LLFNBQzVCTCxFQUFNTSxVQUFZMW9DLEtBQUtvb0MsTUFBTU0sVUFDdEJOLEVBR1QsV0FDRSxPQUFPcG9DLEtBQUt1ekIsWUFBYytULEVBRzVCLFVBQ0UsT0FBT3RuQyxLQUFLdXpCLFlBQWMrVCxFQUk1QixVQUFXaUIsR0FDVCxPQUFPdm9DLEtBQUsyb0MsZUFBZUosR0FHN0IsWUFBYXBxQyxFQUFLTixHQUNabUMsS0FBS3luQyxPQUFVdHBDLEtBQU82QixLQUFLeW5DLFFBQzdCem5DLEtBQUt5bkMsTUFBTXRwQyxHQUFPTixHQUt0QixTQUFVMk8sRUFBSW84QixHQUNaNW9DLEtBQUs0bkMsTUFBTXZMLElBQUk3dkIsRUFBSW84QixHQUtmNW9DLEtBQUtrb0MsV0FBYVgsR0FDcEJ2bkMsS0FBS2lvQyxlQUFpQlcsRUFDdEI1b0MsS0FBS2tvQyxTQUFXWCxHQUNQdm5DLEtBQUtrb0MsV0FBYVgsR0FBbUJ2bkMsS0FBS2lvQyxpQkFBbUJXLElBQ3RFNW9DLEtBQUtrb0MsU0FBV1gsU0FFVHZuQyxLQUFLaW9DLGdCQUlWam9DLEtBQUs0bkMsTUFBTWdCLE1BQVE1b0MsS0FBS3luQyxNQUFNYSxPQUNoQ3RvQyxLQUFLOG5DLG9CQUFzQjluQyxLQUFLOG5DLG9CQUFzQmMsRUFDdEQ1b0MsS0FBSytuQyxzQkFBd0J4bkMsS0FBSzRtQixNQUFNbm5CLEtBQUs4bkMsb0JBQXNCOW5DLEtBQUs0bkMsTUFBTWdCLGNBR3ZFNW9DLEtBQUs4bkMsb0JBTWhCLDBCQUNFLElBQUlTLEVBQVF2b0MsS0FBS29vQyxNQUFNRyxNQUVuQnZvQyxLQUFLNm9DLFVBQ1BOLEdBcEdpQixFQXFHUnZvQyxLQUFLOG9DLGFBQ2RQLEdBdEdpQixHQXlHbkJBLEVBQVFob0MsS0FBS0QsSUFBSWlvQyxFQUFPLEdBRXhCdm9DLEtBQUsrb0MsWUFBWS9vQyxLQUFLb29DLE1BQU1HLE1BQU92b0MsS0FBS2dwQyxjQUFjVCxJQUl4RCx1QkFDRXZvQyxLQUFLaXBDLDBCQUlQLGFBQWNkLEdBQ1pub0MsS0FBS3V6QixVQUFZNFUsRUFBU25vQyxLQUFLbW9DLE9BQVNiLEVBQXVCQSxFQUMvRHRuQyxLQUFLbW9DLE9BQVNBLEVBRVZub0MsS0FBS3V6QixZQUFjK1QsRUFDckJ0bkMsS0FBS2twQyxjQUNJbHBDLEtBQUt1ekIsWUFBYytULEdBQzVCdG5DLEtBQUttcEMsZUFNVCxjQUNFLE1BQU1DLEVBQVFwcEMsS0FBS3FwQyxpQkFFbkIsR0FBSUQsRUFBUXBwQyxLQUFLb29DLE1BQU1HLE1BQ3JCLE9BSUYsTUFBTUEsRUFBUWhvQyxLQUFLRCxJQUFJOG9DLEVBQVFwcEMsS0FBS3luQyxNQUFNNkIsT0FBUSxHQUNsRHRwQyxLQUFLcW9DLFdBQVdFLEVBQU92b0MsS0FBS2dwQyxjQUFjVCxJQUc1QyxlQUNFLE1BQU1hLEVBQVFwcEMsS0FBS3FwQyxpQkFFZkQsRUFBUXBwQyxLQUFLb29DLE1BQU1HLE1BQVF2b0MsS0FBS3luQyxNQUFNNkIsUUFJMUN0cEMsS0FBS3FvQyxXQUFXZSxFQUFPcHBDLEtBQUtncEMsY0FBY0ksSUFJNUMsaUJBRUUsTUFBTWpCLEVBQVNub0MsS0FBS21vQyxPQUFTbm9DLEtBQUt5bkMsTUFBTThCLGVBQ3hDLEdBQUlwQixHQUFVLEVBQ1osT0FBTyxFQUlULEdBQUlub0MsS0FBS3dwQyxjQUNQLE9BQU9qcEMsS0FBS3lILE1BQU1tZ0MsRUFBU25vQyxLQUFLaW9DLGdCQUdsQyxJQUFJd0IsRUFBTSxFQUNOQyxFQUFTLEVBQ1RDLEVBQWUsRUFDZkMsRUFBTzVwQyxLQUFLeW5DLE1BQU1vQyxVQUFVeHFDLE9BRWhDLEtBQU9vcUMsR0FBT0csR0FBTSxDQUtsQixHQUhBRixFQUFTRCxFQUFNbHBDLEtBQUt5SCxPQUFPNGhDLEVBQU9ILEdBQU8sR0FDekNFLEVBQWUzcEMsS0FBSzJvQyxlQUFlZSxHQUUvQkMsSUFBaUJ4QixFQUNuQixPQUFPdUIsRUFDRUMsRUFBZXhCLEVBQ3hCc0IsRUFBTUMsRUFBUyxFQUNOQyxFQUFleEIsSUFDeEJ5QixFQUFPRixFQUFTLEdBSXBCLE9BQU9ELEVBQU0sSUFBTUEsRUFBTSxFQUszQixlQUFnQkssR0FFZCxJQUFLQSxFQUNILE9BQU8sRUFHVCxJQUFJM0IsRUFBUyxFQUNUNEIsRUFBWSxFQUNoQixJQUFLLElBQUlucUMsRUFBUSxFQUFHQSxFQUFRa3FDLEVBQVlscUMsSUFFdENtcUMsRUFBWS9wQyxLQUFLNG5DLE1BQU1ucUMsSUFBSXVDLEtBQUt5bkMsTUFBTW9DLFVBQVVqcUMsSUFDaER1b0MsR0FBbUI0QixHQUFhL3BDLEtBQUtncUMsa0JBT3ZDLE9BSEFocUMsS0FBS2dvQyxjQUFnQnpuQyxLQUFLRCxJQUFJTixLQUFLZ29DLGNBQWU4QixFQUFhLEdBQy9EOXBDLEtBQUtnb0MsY0FBZ0J6bkMsS0FBS0MsSUFBSVIsS0FBS2dvQyxjQUFlaG9DLEtBQUtpcUMsZ0JBRWhEOUIsRUFHVCxjQUNFLE9BQU9ub0MsS0FBS2tvQyxXQUFhWCxFQUkzQixlQUNFLE9BQU92bkMsS0FBS3luQyxNQUFNb0MsVUFBVXhxQyxPQUFTLEVBS3ZDLFdBQVlrcEMsRUFBT0MsR0FDakIsTUFBTUYsRUFBUXRvQyxLQUFLeW5DLE1BQU1hLE1BQ1h0b0MsS0FBS3luQyxNQUFNb0MsVUFBVXhxQyxRQUd0QmlwQyxHQUNYQyxFQUFRLEVBQ1JDLEVBQU14b0MsS0FBS2lxQyxnQkFDRnpCLEVBQU1ELEVBQVFELEVBQVEsSUFFL0JDLEVBQVFDLEVBQU1GLEVBQVEsR0FHcEJ0b0MsS0FBS29vQyxNQUFNRyxRQUFVQSxHQUN2QnZvQyxLQUFLK29DLFlBQVlSLEVBQU9DLEdBSzVCLFlBQWFELEVBQU9DLEdBQ2xCeG9DLEtBQUtvb0MsTUFBTUcsTUFBUUEsRUFDbkJ2b0MsS0FBS29vQyxNQUFNSSxJQUFNQSxFQUNqQnhvQyxLQUFLb29DLE1BQU1LLFNBQVd6b0MsS0FBS2txQyxjQUMzQmxxQyxLQUFLb29DLE1BQU1NLFVBQVkxb0MsS0FBS21xQyxlQUU1Qm5xQyxLQUFLMG5DLFdBQVcxbkMsS0FBS29xQyxZQUl2QixjQUFlN0IsR0FDYixNQUFNOEIsRUFBWTlCLEVBQVF2b0MsS0FBS3luQyxNQUFNYSxNQUFRLEVBRTdDLE9BRGtCL25DLEtBQUtDLElBQUk2cEMsRUFBV3JxQyxLQUFLaXFDLGdCQUs3QyxjQUNFLE9BQUlqcUMsS0FBS3dwQyxjQUNBeHBDLEtBQUtpb0MsZUFBaUJqb0MsS0FBS29vQyxNQUFNRyxNQUVqQ3ZvQyxLQUFLMm9DLGVBQWUzb0MsS0FBS29vQyxNQUFNRyxPQU0xQyxlQUNFLE1BQU1DLEVBQU14b0MsS0FBS29vQyxNQUFNSSxJQUNqQmgvQixFQUFZeEosS0FBS2lxQyxlQUV2QixPQUFJanFDLEtBQUt3cEMsZUFDQ2hnQyxFQUFZZy9CLEdBQU94b0MsS0FBS2lvQyxlQUk5QmpvQyxLQUFLZ29DLGdCQUFrQngrQixFQUNsQnhKLEtBQUsyb0MsZUFBZW4vQixHQUFheEosS0FBSzJvQyxlQUFlSCxJQUdwRGgvQixFQUFZZy9CLEdBQU94b0MsS0FBS2dxQyxrQkFLcEMsa0JBQ0UsT0FBT2hxQyxLQUFLK25DLHVCQUF5Qi9uQyxLQUFLeW5DLE1BQU1tQixNQ3RTN0MsTUFBTTBCLEVBQWUsQ0FDMUIxQixLQUFNLENBQ0pyOUIsS0FBTTJkLFFBRVJvZixNQUFPLENBQ0wvOEIsS0FBTTJkLE9BQ05xaEIsU0FBUyxHQUdYQyxRQUFTLENBQ1BqL0IsS0FBTW5NLE9BQ05tckMsU0FBUyxHQUVYRSxZQUFhLENBQ1hsL0IsS0FBTXpELE1BQ055aUMsU0FBUyxHQUVYRyxjQUFlLENBQ2JuL0IsS0FBTWpPLE9BQ05pdEMsU0FBUyxHQUVYSSxXQUFZLENBQ1ZwL0IsS0FBTWpPLFFBR1JzdEMsUUFBUyxDQUNQci9CLEtBQU1uTSxPQUNOMlgsUUFBUyxPQUVYOHpCLFFBQVMsQ0FDUHQvQixLQUFNbk0sT0FDTjJYLFFBQVMsT0FFWCt6QixVQUFXLENBQ1R2L0IsS0FBTW5NLE9BQ04yWCxRQUFTLElBR1h3YyxVQUFXLENBQ1Rob0IsS0FBTW5NLE9BQ04yWCxRQUFTLFlBRVhnMEIsZUFBZ0IsQ0FDZHgvQixLQUFNMmQsT0FDTm5TLFFBQVMsR0FFWGkwQixlQUFnQixDQUNkei9CLEtBQU0yZCxPQUNOblMsUUFBUyxHQUVYd3hCLE1BQU8sQ0FDTGg5QixLQUFNMmQsT0FDTm5TLFFBQVMsR0FFWG94QixPQUFRLENBQ041OEIsS0FBTTJkLE9BQ05uUyxRQUFTLEdBR1hrMEIsUUFBUyxDQUNQMS9CLEtBQU1uTSxPQUNOMlgsUUFBUyxPQUVYbTBCLFVBQVcsQ0FDVDMvQixLQUFNbk0sT0FDTjJYLFFBQVMsSUFHWG8wQixVQUFXLENBQ1Q1L0IsS0FBTW5NLE9BQ04yWCxRQUFTLE9BRVhxMEIsWUFBYSxDQUNYNy9CLEtBQU1uTSxPQUNOMlgsUUFBUyxJQUVYczBCLFVBQVcsQ0FDVDkvQixLQUFNbk0sT0FDTjJYLFFBQVMsT0FFWHUwQixZQUFhLENBQ1gvL0IsS0FBTW5NLE9BQ04yWCxRQUFTLElBR1hpYyxTQUFVLENBQ1J6bkIsS0FBTTBMLFFBQ05GLFNBQVMsSUFJQXcwQixFQUFZLENBQ3ZCcnFCLE1BQU8sQ0FDTDNWLEtBQU1uTSxRQUVSK0ksSUFBSyxDQUNIb0QsS0FBTW5NLFFBRVJvc0MsV0FBWSxDQUNWamdDLEtBQU0wTCxTQUVSdE4sT0FBUSxDQUNONEIsS0FBTWpPLFFBRVJtZ0IsVUFBVyxDQUNUbFMsS0FBTWpPLFFBRVJtdUMsVUFBVyxDQUNUbGdDLEtBQU1uTSxRQUVSdXJDLFdBQVksQ0FDVnAvQixLQUFNak8sU0FJR291QyxFQUFZLENBQ3ZCeHFCLE1BQU8sQ0FDTDNWLEtBQU1uTSxRQUVScXNDLFVBQVcsQ0FDVGxnQyxLQUFNbk0sUUFFUitJLElBQUssQ0FDSG9ELEtBQU1uTSxRQUVSb3NDLFdBQVksQ0FDVmpnQyxLQUFNMEwsVUMxSEowMEIsRUFBVSxDQUNkLFVBQ0UzckMsS0FBSzRyQyxZQUFhLEVBQ2xCNXJDLEtBQUs2ckMsU0FBVzdyQyxLQUFLd3JDLFdBQWEsY0FBZ0IsZ0JBR3BELFVBRUV4ckMsS0FBSzhyQyxxQkFFeUIsb0JBQW5CQyxpQkFDVC9yQyxLQUFLZ3NDLGVBQWlCLElBQUlELGVBQWUsS0FFbkMvckMsS0FBSzRyQyxXQUNQNXJDLEtBQUs4ckMscUJBRUw5ckMsS0FBSzRyQyxZQUFhLElBR3RCNXJDLEtBQUtnc0MsZUFBZUMsUUFBUWpzQyxLQUFLd1osT0FJckMsZ0JBQ014WixLQUFLZ3NDLGlCQUNQaHNDLEtBQUtnc0MsZUFBZUUsYUFDcEJsc0MsS0FBS2dzQyxlQUFpQixPQUkxQnRsQyxRQUFTLENBQ1AsaUJBQ0UsT0FBTzFHLEtBQUt3WixJQUFNeFosS0FBS3daLElBQUl4WixLQUFLNnJDLFVBQVksR0FJOUMscUJBQ0U3ckMsS0FBS3ljLFFBQVEvRyxNQUFNMVYsS0FBS2toQixNQUFPbGhCLEtBQUt5ckMsVUFBV3pyQyxLQUFLbXNDLGlCQUFrQm5zQyxLQUFLNHJDLGVBTXBFUSxFQUFPLElBQUkzdUIsVUFBVSxvQkFBcUIsQ0FDckQ2b0IsT0FBUSxDQUFDcUYsR0FFVGgxQixNQUFPNDBCLEVBRVAsT0FBUTV6QixHQUNOLE9BQU9BLEVBQUUzWCxLQUFLbUksSUFBSyxDQUNqQmtrQyxLQUFNLFFBQ0wsQ0FBQzEwQixFQUFFM1gsS0FBS3lkLFVBQVcsQ0FDcEI5RyxNQUFPLElBQ0YzVyxLQUFLMnFDLFdBQ1JoaEMsT0FBUTNKLEtBQUsySixlQU9SMmlDLEVBQU8sSUFBSTd1QixVQUFVLG9CQUFxQixDQUNyRDZvQixPQUFRLENBQUNxRixHQUVUaDFCLE1BQU8rMEIsRUFFUCxPQUFRL3pCLEdBQ04sT0FBT0EsRUFBRTNYLEtBQUttSSxJQUFLLENBQ2pCNlEsTUFBTyxDQUNMcXpCLEtBQU1yc0MsS0FBS3lyQyxZQUVaenJDLEtBQUs2WCxPQUFPZCxZQ3RFYncxQixFQUNFLGNBREZBLEVBRUUsY0FFRkMsRUFDSSxTQURKQSxFQUVJLFNBOE1LLEksRUFBQSxFQXpNSyxJQUFJL3VCLFVBRlgsZUFFMkIsQ0FDdEM5RyxNQUFPMnpCLEVBRVAveUIsS0FBSyxLQUNJLENBQ0w2d0IsTUFBTyxPQUlYNXRCLE1BQU8sQ0FDTCxZQUFhaXlCLEVBQVVDLEdBQ2pCRCxFQUFTcHRDLFNBQVdxdEMsRUFBU3J0QyxTQUMvQlcsS0FBSzZNLFFBQVE4L0IsWUFBWSxZQUFhM3NDLEtBQUs0c0MsOEJBQzNDNXNDLEtBQUs2TSxRQUFRbzhCLDZCQUtuQixVQUNFanBDLEtBQUs2c0MsYUFBa0MsZUFBbkI3c0MsS0FBS3V6QixVQUN6QnZ6QixLQUFLOHNDLGFBQWU5c0MsS0FBSzZzQyxhQUFlLGFBQWUsWUFFdkQ3c0MsS0FBSzZNLFFBQVUsSUFBSTI2QixFQUFRLENBQ3pCb0IsS0FBTTVvQyxLQUFLNG9DLEtBQ1hXLGVBQWdCLEVBQ2hCd0QsZUFBZ0IsRUFDaEJ6RSxNQUFPdG9DLEtBQUtzb0MsTUFDWmdCLE9BQVEvb0MsS0FBSzRtQixNQUFNbm5CLEtBQUtzb0MsTUFBUSxHQUNoQ3VCLFVBQVc3cEMsS0FBSzRzQyw4QkFDZjVzQyxLQUFLZ3RDLGdCQU1SaHRDLEtBQUtvb0MsTUFBUXBvQyxLQUFLNk0sUUFBUXU5QixXQUcxQnBxQyxLQUFLaXRDLElBQUlWLEVBQWlCdnNDLEtBQUtrdEMsZ0JBRzNCbHRDLEtBQUs2WCxPQUFPTSxRQUFVblksS0FBSzZYLE9BQU9PLFNBQ3BDcFksS0FBS2l0QyxJQUFJVixFQUFpQnZzQyxLQUFLbXRDLGdCQUluQyxnQkFDRW50QyxLQUFLNk0sUUFBUXlOLFdBR2YsVUFFTXRhLEtBQUt1b0MsTUFDUHZvQyxLQUFLb3RDLGdCQUFnQnB0QyxLQUFLNk0sUUFBUXdnQyxVQUFVcnRDLEtBQUt1b0MsUUFDeEN2b0MsS0FBS21vQyxRQUNkbm9DLEtBQUtvdEMsZ0JBQWdCcHRDLEtBQUttb0MsU0FJOUJ6aEMsUUFBUyxDQUVQLGNBQWU4RixFQUFJbzhCLEdBQ2pCNW9DLEtBQUs2TSxRQUFReWdDLFNBQVM5Z0MsRUFBSW84QixJQUk1QixjQUFlcjlCLEVBQU1xOUIsRUFBTTJFLEdBQ3JCaGlDLElBQVNpaEMsRUFDWHhzQyxLQUFLNk0sUUFBUTgvQixZQUFZLGlCQUFrQi9ELEdBQ2xDcjlCLElBQVNpaEMsR0FDbEJ4c0MsS0FBSzZNLFFBQVE4L0IsWUFBWSxpQkFBa0IvRCxHQUd6QzJFLEdBQ0Z2dEMsS0FBSzZNLFFBQVEyZ0Msd0JBS2pCLGVBQWdCcEYsR0FDZHBvQyxLQUFLb29DLE1BQVFBLEdBR2YsU0FBVTd4QixHQUNSLE1BQU0sS0FBRThmLEdBQVNyMkIsS0FBS3l0QyxNQUN0QixJQUFLcFgsRUFDSCxPQUdGLE1BQU04UixFQUFTOVIsRUFBS3IyQixLQUFLOHNDLGNBQ3pCOXNDLEtBQUs2TSxRQUFRNmdDLGFBQWF2RixHQUMxQm5vQyxLQUFLMnRDLFVBQVV4RixFQUFRNXhCLElBR3pCLDZCQUNFLE9BQU92VyxLQUFLeXFDLFlBQVluMEIsSUFBS3MzQixHQUFlQSxFQUFXNXRDLEtBQUt3cUMsV0FJOUQsZ0JBQWlCckMsR0FDZixNQUFNLEtBQUU5UixHQUFTcjJCLEtBQUt5dEMsTUFDbEJwWCxJQUNGQSxFQUFLcjJCLEtBQUs4c0MsY0FBZ0IzRSxHQUFVLElBS3hDLFVBQVdBLEVBQVE1eEIsR0FFakIsTUFBTSxLQUFFOGYsR0FBU3IyQixLQUFLeXRDLE1BQ2hCckYsRUFBUXBvQyxLQUFLNk0sUUFBUXU5QixXQUNyQnZCLEVBQVU3b0MsS0FBSzZNLFFBQVFnOEIsVUFDdkJDLEVBQVc5b0MsS0FBSzZNLFFBQVFpOEIsV0FDeEIrRSxFQUFjeFgsRUFBS3IyQixLQUFLNnNDLGFBQWUsY0FBZ0IsZ0JBQ3ZEaUIsRUFBY3pYLEVBQUtyMkIsS0FBSzZzQyxhQUFlLGNBQWdCLGdCQUV6RGhFLEdBQWE3b0MsS0FBS3lxQyxZQUFZcHJDLFFBQVU4b0MsRUFBU25vQyxLQUFLK3FDLGdCQUFrQixFQUMxRS9xQyxLQUFLMFYsTUFBTSxRQUFTYSxFQUFLNnhCLEdBQ2hCVSxHQUFZWCxFQUFTMEYsRUFBYzd0QyxLQUFLZ3JDLGdCQUFrQjhDLEVBQ25FOXRDLEtBQUswVixNQUFNLFdBQVlhLEVBQUs2eEIsR0FFNUJwb0MsS0FBSzBWLE1BQU0sU0FBVWEsRUFBSzZ4QixJQUs5QixlQUFnQnp3QixHQUNkLE1BQU1DLEVBQVEsR0FDUjJ3QixFQUFRdm9DLEtBQUtnekIsU0FBVyxFQUFJaHpCLEtBQUtvb0MsTUFBTUcsTUFDdkNDLEVBQU14b0MsS0FBS2d6QixTQUFXaHpCLEtBQUt5cUMsWUFBWXByQyxPQUFTLEVBQUlXLEtBQUtvb0MsTUFBTUksSUFDckUsSUFBSyxJQUFJNW9DLEVBQVEyb0MsRUFBTzNvQyxHQUFTNG9DLEVBQUs1b0MsSUFBUyxDQUM3QyxNQUFNZ3VDLEVBQWE1dEMsS0FBS3lxQyxZQUFZN3FDLEdBQ2hDZ3VDLEVBQ0ZoMkIsRUFBTWhOLEtBQUsrTSxFQUFFeTBCLEVBQU0sQ0FDakIyQixNQUFPL3RDLEtBQUtrckMsVUFDWnYwQixNQUFPLENBQ0x4TyxJQUFLbkksS0FBS2lyQyxRQUNWL3BCLE1BQU9xckIsRUFDUGYsV0FBWXhyQyxLQUFLNnNDLGFBQ2pCcEIsVUFBV21DLEVBQVc1dEMsS0FBS3dxQyxTQUMzQjdnQyxPQUFRaWtDLEVBQ1JqRCxXQUFZM3FDLEtBQUsycUMsV0FDakJsdEIsVUFBV3pkLEtBQUswcUMsa0JBSXBCMzRCLFFBQVFzSCxLQUFLLHdDQUFtQ3paLHdCQUdwRCxPQUFPZ1ksSUFNWCxPQUFRRCxHQUNOLE1BQU0sT0FBRVEsRUFBTSxPQUFFQyxHQUFXcFksS0FBSzZYLE9BQzFCbTJCLEVBQVVodUMsS0FBS2d6QixTQUFXLEVBQUloekIsS0FBSzZzQyxhQUNyQyxPQUFPN3NDLEtBQUtvb0MsTUFBTU0sbUJBQW1CMW9DLEtBQUtvb0MsTUFBTUssYUFDaEQsR0FBR3pvQyxLQUFLb29DLE1BQU1LLGtCQUFrQnpvQyxLQUFLb29DLE1BQU1NLGNBRS9DLE9BQU8vd0IsRUFBRTNYLEtBQUs0cUMsUUFBUyxDQUNyQnFELElBQUssT0FDTG4xQixHQUFJLENBQ0YsVUFBVzlZLEtBQUtrdUMsV0FFakIsQ0FFRC8xQixFQUFTUixFQUFFMjBCLEVBQU0sQ0FDZnlCLE1BQU8vdEMsS0FBS29yQyxZQUNaejBCLE1BQU8sQ0FDTHhPLElBQUtuSSxLQUFLbXJDLFVBQ1ZqcUIsTUFBT3FyQixFQUNQZCxVQUFXZSxJQUVacjBCLEdBQVUsS0FHYlIsRUFBRTNYLEtBQUs2cUMsUUFBUyxDQUNka0QsTUFBTy90QyxLQUFLOHFDLFVBQ1o5eEIsTUFBTyxDQUNMcXpCLEtBQU0sU0FFUm45QixNQUFPLENBQ0w4K0IsUUFBU0EsSUFFVmh1QyxLQUFLbXVDLGVBQWV4MkIsSUFHdkJTLEVBQVNULEVBQUUyMEIsRUFBTSxDQUNmeUIsTUFBTy90QyxLQUFLc3JDLFlBQ1ozMEIsTUFBTyxDQUNMeE8sSUFBS25JLEtBQUtxckMsVUFDVm5xQixNQUFPcXJCLEVBQ1BkLFVBQVdlLElBRVpwMEIsR0FBVSxVLGt6QkN4TG5CLDJCLCtDQW9DQSxPQXBDcUQsT0FhNUMsWUFBQWUsUUFBUCxZQTRCRixTQUNFaTFCLEVBQ0FDLEVBQ0FqcEMsR0FDUSx3QkFBQStvQyxlQXlCUixTQUFTRyxFQUFRLzNCLEVBQXlCZzRCLEdBQ2hDLElBQUFoRyxFQUFBLFFBQUFBLE1BQ0YsVUFBRXByQixFQUFBLEVBQUFBLFNBQVVDLEVBQUEsRUFBQUEsU0FDWk4sRUFBVSxFQUFJMVgsRUFBUXZILE9BRTVCaWYsRUFBUUcsT0FDTnNyQixFQUFRbnJCLEVBQ1IsRUFDQU4sRUFBUUcsT0FBT3NyQixFQUFRcHJCLEVBQVUsR0FBRyxJQUV0Q25kLEtBQUswVixNQUFNLFFBQVNvSCxHQUd0QnN4QixFQUFZeDNCLFFBQVFsUSxRQUFReW5DLGVBcEM1QixTQUFpQngyQixHQUFqQixXQUNRNDJCLEVBQWN2dUMsS0FDZDRYLEVBQVFULEVBQVNwYSxLQUFLd3hDLEVBQWE1MkIsR0FFekMsTUFBTyxDQUNMQSxFQUFFMDJCLEVBQVcsQ0FDWDEzQixNQUFPLENBQ0w5WSxNQUFPdUgsRUFBUXZILE9BRWpCaWIsR0FBSSxDQUNGMDFCLE9BQVEsU0FBQ25xQyxHQUNELFVBQVdBLEdBR2pCaXFDLEVBQVF2eEMsS0FBSyxFQUFNc0gsRUFBR2txQyxNQUd6QjMyQixLQWpETDYyQixDQUNFenVDLEtBQUswdUMsZ0JBQWlCMXVDLEtBQUsydUMsY0FBZTN1QyxPQUd2QyxZQUFBMFgsT0FBUCxTQUFjQyxHQUNOLFdBQUUyd0IsRUFBQSxFQUFBQSxNQUFPa0MsRUFBQSxFQUFBQSxRQUFTQyxFQUFBLEVBQUFBLFlBQWFDLEVBQUEsRUFBQUEsY0FBZTlCLEVBQUEsRUFBQUEsS0FFcEQsT0FBT2p4QixFQUFFM1gsS0FBSzB1QyxnQkFBaUIsQ0FDN0IvM0IsTUFBTyxDQUNMMnhCLE1BQUssRUFDTGtDLFFBQU8sRUFDUEMsWUFBVyxFQUNYQyxjQUFhLEVBQ2I5QixLQUFJLEdBRU45dkIsR0FBSSxDQUVGODFCLE1BQU81dUMsS0FBSzBWLE1BQU10WCxLQUFLNEIsS0FBTSxhQS9CQyxHQUFuQ3FuQyxFQUFLLENBQUV0d0IsUUFBUyxXQUFNLGUsb0NBRWUsR0FBckNzd0IsRUFBSyxDQUFFdHdCLFFBQVMsV0FBTSxhLHNDQUVmLEdBQVBzd0IsSyw0QkFDTyxHQUFQQSxLLDhCQUNPLEdBQVBBLEssa0NBQ08sR0FBUEEsSyxvQ0FDTyxHQUFQQSxLLDJCQUVPLEdBQVBBLEssNEJBWGtCd0gsRUFBb0IsR0FEeEMsR0FDb0JBLEdBQXJCLENBQXFELEtBQWhDLGUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBWdWU7IiwibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcImZiMTVcIik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIFwiMDJmNFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjQ1ODhcIik7XG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJiZTEzXCIpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIwMzkwXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMDJmNFwiKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMDdlM1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjBiZmJcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiY2I3Y1wiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjBmYzlcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzYTM4XCIpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIxNjU0XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgJGF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjcxYzFcIikodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbl9fd2VicGFja19yZXF1aXJlX18oXCIzMGYxXCIpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMTY5MVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIxYWY2XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oXCI2M2I2XCIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOTAwM1wiKSB9KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIxYmMzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImY3NzJcIik7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIxZWM5XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJmNzcyXCIpO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImU1M2RcIikuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjIwZmRcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZDlmNlwiKTtcbnZhciBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImFlYmRcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjIxNGZcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCJiMGM1XCIpO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjJhYmFcIik7XG52YXIgaGlkZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzMmU5XCIpO1xudmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjc5ZTVcIik7XG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJiZTEzXCIpO1xudmFyIHdrcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIyYjRjXCIpO1xudmFyIHJlZ2V4cEV4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTIwYVwiKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIyMzBlXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkM2Y0XCIpO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjc3MjZcIikuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjIzYzZcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMmQ5NVwiKTtcbnZhciBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMmI0Y1wiKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjI0MWVcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMjVlYlwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIyNWViXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMjk0Y1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMmFiYVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjc3MjZcIik7XG52YXIgaGlkZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzMmU5XCIpO1xudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI2OWE4XCIpO1xudmFyIFNSQyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJjYTVhXCIpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZmE1YlwiKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyhcIjgzNzhcIikuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIyYjRjXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBzdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1NTM3XCIpKCd3a3MnKTtcbnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiY2E1YVwiKTtcbnZhciBTeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNzcyNlwiKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIyZDAwXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMmQ5NVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMmZkYlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjVjYTFcIik7XG52YXIgY29udGV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkMmM4XCIpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTE0N1wiKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjMwZjFcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBMSUJSQVJZID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImI4ZTNcIik7XG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oXCI2M2I2XCIpO1xudmFyIHJlZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjkxMzhcIik7XG52YXIgaGlkZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzNWU4XCIpO1xudmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI0ODFiXCIpO1xudmFyICRpdGVyQ3JlYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjhmNjBcIik7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNDVmMlwiKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1M2UyXCIpO1xudmFyIElURVJBVE9SID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjUxNjhcIikoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMzJhNlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIyNDFlXCIpO1xudmFyICRrZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImMzYTFcIik7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCJjZTdlXCIpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMzJlOVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZFAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiODZjY1wiKTtcbnZhciBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjQ2MzBcIik7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI5ZTFlXCIpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMzJmY1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZTUzZFwiKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjMzNWNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNmI0Y1wiKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIzNTVkXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjM1ZThcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGRQID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImQ5ZjZcIik7XG52YXIgY3JlYXRlRGVzYyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJhZWJkXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOGU2MFwiKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjM2YzNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzMzVjXCIpO1xudmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMjVlYlwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiMzcwMlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjQ4MWJcIik7XG52YXIgSVRFUkFUT1IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTE2OFwiKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIzYTM4XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjQwYzNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNmI0Y1wiKTtcbnZhciBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTE2OFwiKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjQ1ODhcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNDVmMlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgZGVmID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImQ5ZjZcIikuZjtcbnZhciBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMDdlM1wiKTtcbnZhciBUQUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTE2OFwiKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI0NjMwXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNDY5ZlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiNmMxY1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18oXCIxNjU0XCIpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiN2Q3YlwiKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI0ODFiXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNGFhNlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkYzYyXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI0YmY4XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImJlMTNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNGVlMVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgSVRFUkFUT1IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTE2OFwiKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjUwZWRcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNTE0N1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgTUFUQ0ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMmI0Y1wiKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI1MTY4XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBzdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkYmRiXCIpKCd3a3MnKTtcbnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNjJhMFwiKTtcbnZhciBTeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZTUzZFwiKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI1MTc2XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjUxYjZcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjUxYjZcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyhcImEzYzNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1ODRhXCIpLk9iamVjdC5hc3NpZ247XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNTIwYVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgcmVnZXhwRmxhZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMGJmYlwiKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI1M2UyXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjA3ZTNcIik7XG52YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMjQxZVwiKTtcbnZhciBJRV9QUk9UTyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1NTU5XCIpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNTQ5YlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGN0eCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkODY0XCIpO1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNjNiNlwiKTtcbnZhciB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIyNDFlXCIpO1xudmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiYjBkY1wiKTtcbnZhciBpc0FycmF5SXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzNzAyXCIpO1xudmFyIHRvTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImI0NDdcIik7XG52YXIgY3JlYXRlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMjBmZFwiKTtcbnZhciBnZXRJdGVyRm4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiN2NkNlwiKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhX193ZWJwYWNrX3JlcXVpcmVfXyhcIjRlZTFcIikoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNTRhMVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiNmMxY1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18oXCIxNjU0XCIpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOTVkNVwiKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI1NTM3XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjgzNzhcIik7XG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjc3MjZcIik7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IF9fd2VicGFja19yZXF1aXJlX18oXCIyZDAwXCIpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI1NTU5XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBzaGFyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZGJkYlwiKSgna2V5cycpO1xudmFyIHVpZCA9IF9fd2VicGFja19yZXF1aXJlX18oXCI2MmEwXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjU4NGFcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi41JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI1YjRlXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjM2YzNcIik7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiYjQ0N1wiKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMGZjOVwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjVjYTFcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oXCI3NzI2XCIpO1xudmFyIGNvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiODM3OFwiKTtcbnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjMyZTlcIik7XG52YXIgcmVkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMmFiYVwiKTtcbnZhciBjdHggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOWI0M1wiKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNWQ3M1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI0NjlmXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI1ZjFiXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjIzYzZcIik7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI2MjZhXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjJkOTVcIik7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNjJhMFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI2M2I2XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZTUzZFwiKTtcbnZhciBjb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjU4NGFcIik7XG52YXIgY3R4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImQ4NjRcIik7XG52YXIgaGlkZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzNWU4XCIpO1xudmFyIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIwN2UzXCIpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI2NzYyXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjVjYTFcIik7XG52YXIgJGluY2x1ZGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImMzNjZcIikodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiOWM2Y1wiKSgnaW5jbHVkZXMnKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI2ODIxXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNjI2YVwiKTtcbnZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImJlMTNcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjY5YThcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI2YTk5XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImQzZjRcIik7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI2YjRjXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI2YzFjXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCJjMzY3XCIpO1xudmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJlNTNkXCIpO1xudmFyIGhpZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMzVlOFwiKTtcbnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNDgxYlwiKTtcbnZhciBUT19TVFJJTkdfVEFHID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjUxNjhcIikoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiNzFjMVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjNhMzhcIik7XG52YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIyNWViXCIpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI3NzI2XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI3NzRlXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImQyZDVcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjc3ZjFcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oXCI0NTg4XCIpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI3OTRiXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oXCI4ZTYwXCIpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMjk0Y1wiKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX3JlcXVpcmVfXyhcIjFlYzlcIikoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjc5YWFcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjc5ZTVcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjdjZDZcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNDBjM1wiKTtcbnZhciBJVEVSQVRPUiA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1MTY4XCIpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI0ODFiXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTg0YVwiKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjdkN2JcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImU0YWVcIik7XG52YXIgZ2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjdjZDZcIik7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1ODRhXCIpLmdldEl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpdGVyRm4gPSBnZXQoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgcmV0dXJuIGFuT2JqZWN0KGl0ZXJGbi5jYWxsKGl0KSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjdlOTBcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGRQID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImQ5ZjZcIik7XG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZTRhZVwiKTtcbnZhciBnZXRLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImMzYTFcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjhlNjBcIikgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiODM3OFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjUnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjg0MzZcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiODZjY1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiY2I3Y1wiKTtcbnZhciBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oXCJjNjlhXCIpO1xudmFyIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjZhOTlcIik7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oXCI5ZTFlXCIpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiOGFhZVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiMzJhNlwiKTtcbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjU4NGFcIikuT2JqZWN0LmtleXM7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiOGU2MFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMjk0Y1wiKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiOGY2MFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGNyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCJhMTU5XCIpO1xudmFyIGRlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiYWViZFwiKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI0NWYyXCIpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiMzVlOFwiKShJdGVyYXRvclByb3RvdHlwZSwgX193ZWJwYWNrX3JlcXVpcmVfXyhcIjUxNjhcIikoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjkwMDNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNmI0Y1wiKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiOTEzOFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzNWU4XCIpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjkzMDZcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImMzYTFcIik7XG52YXIgZ09QUyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI5YWE5XCIpO1xudmFyIHBJRSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzNTVkXCIpO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjI0MWVcIik7XG52YXIgSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzMzVjXCIpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgX193ZWJwYWNrX3JlcXVpcmVfXyhcIjI5NGNcIikoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI5NDI3XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjYzYjZcIik7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IF9fd2VicGFja19yZXF1aXJlX18oXCJhMTU5XCIpIH0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjk1ZDVcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNDBjM1wiKTtcbnZhciBJVEVSQVRPUiA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1MTY4XCIpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI0ODFiXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTg0YVwiKS5pc0l0ZXJhYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPID0gT2JqZWN0KGl0KTtcbiAgcmV0dXJuIE9bSVRFUkFUT1JdICE9PSB1bmRlZmluZWRcbiAgICB8fCAnQEBpdGVyYXRvcicgaW4gT1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICB8fCBJdGVyYXRvcnMuaGFzT3duUHJvcGVydHkoY2xhc3NvZihPKSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjlhYTlcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI5YjQzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkOGU4XCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjljNmNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjJiNGNcIikoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIF9fd2VicGFja19yZXF1aXJlX18oXCIzMmU5XCIpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIjlkZWZcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjQ1ODhcIik7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCI5ZTFlXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oXCI3OWU1XCIpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJhMTU5XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImU0YWVcIik7XG52YXIgZFBzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjdlOTBcIik7XG52YXIgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMTY5MVwiKTtcbnZhciBJRV9QUk9UTyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1NTU5XCIpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IF9fd2VicGFja19yZXF1aXJlX18oXCIxZWM5XCIpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMzJmY1wiKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiYTM1MlwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzb3J0YWJsZWpzXCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJhM2MzXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oXCI2M2I2XCIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOTMwNlwiKSB9KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJhNDgxXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJjYjdjXCIpO1xudmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjRiZjhcIik7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOWRlZlwiKTtcbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNDU4OFwiKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMDM5MFwiKTtcbnZhciByZWdFeHBFeGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjVmMWJcIik7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbl9fd2VicGFja19yZXF1aXJlX18oXCIyMTRmXCIpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJhNGJiXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjhhYWVcIik7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImE3NDVcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZjQxMFwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiYWFlM1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkM2Y0XCIpO1xudmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oXCIyZDk1XCIpO1xudmFyIE1BVENIID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjJiNGNcIikoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiYWViZFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImIwYzVcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciByZWdleHBFeGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjUyMGFcIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiNWNhMVwiKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImIwZGNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImU0YWVcIik7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiYjQ0N1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiM2EzOFwiKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImI4ZTNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImJlMTNcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJjMzY2XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjY4MjFcIik7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOWRlZlwiKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNzdmMVwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImMzNjdcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjg0MzZcIik7XG52YXIgc3RlcCA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1MGVkXCIpO1xudmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI0ODFiXCIpO1xudmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzNmMzXCIpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIzMGYxXCIpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiYzNhMVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCJlNmYzXCIpO1xudmFyIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjE2OTFcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImM2NDlcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7LyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBpbnNlcnROb2RlQXQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBjYW1lbGl6ZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnNvbGU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiByZW1vdmVOb2RlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBjb3JlX2pzX21vZHVsZXNfZXM2X3JlZ2V4cF9yZXBsYWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiYTQ4MVwiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBjb3JlX2pzX21vZHVsZXNfZXM2X3JlZ2V4cF9yZXBsYWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oY29yZV9qc19tb2R1bGVzX2VzNl9yZWdleHBfcmVwbGFjZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBGX3NvdXJjZV9WdWVfRHJhZ2dhYmxlX25vZGVfbW9kdWxlc19iYWJlbF9ydW50aW1lX2NvcmVqczJfY29yZV9qc19vYmplY3RfY3JlYXRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNGFhNlwiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBGX3NvdXJjZV9WdWVfRHJhZ2dhYmxlX25vZGVfbW9kdWxlc19iYWJlbF9ydW50aW1lX2NvcmVqczJfY29yZV9qc19vYmplY3RfY3JlYXRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oRl9zb3VyY2VfVnVlX0RyYWdnYWJsZV9ub2RlX21vZHVsZXNfYmFiZWxfcnVudGltZV9jb3JlanMyX2NvcmVfanNfb2JqZWN0X2NyZWF0ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcblxuXG5cbmZ1bmN0aW9uIGdldENvbnNvbGUoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5jb25zb2xlO1xuICB9XG5cbiAgcmV0dXJuIGdsb2JhbC5jb25zb2xlO1xufVxuXG52YXIgY29uc29sZSA9IGdldENvbnNvbGUoKTtcblxuZnVuY3Rpb24gY2FjaGVkKGZuKSB7XG4gIHZhciBjYWNoZSA9IEZfc291cmNlX1Z1ZV9EcmFnZ2FibGVfbm9kZV9tb2R1bGVzX2JhYmVsX3J1bnRpbWVfY29yZWpzMl9jb3JlX2pzX29iamVjdF9jcmVhdGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkobnVsbCk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZEZuKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcbiAgfTtcbn1cblxudmFyIHJlZ2V4ID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ2V4LCBmdW5jdGlvbiAoXywgYykge1xuICAgIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogXCJcIjtcbiAgfSk7XG59KTtcblxuZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudEVsZW1lbnQgIT09IG51bGwpIHtcbiAgICBub2RlLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQobm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0Tm9kZUF0KGZhdGhlck5vZGUsIG5vZGUsIHBvc2l0aW9uKSB7XG4gIHZhciByZWZOb2RlID0gcG9zaXRpb24gPT09IDAgPyBmYXRoZXJOb2RlLmNoaWxkcmVuWzBdIDogZmF0aGVyTm9kZS5jaGlsZHJlbltwb3NpdGlvbiAtIDFdLm5leHRTaWJsaW5nO1xuICBmYXRoZXJOb2RlLmluc2VydEJlZm9yZShub2RlLCByZWZOb2RlKTtcbn1cblxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXyhcImM4YmFcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJjNjlhXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oXCI5ZTFlXCIpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNzllNVwiKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX3JlcXVpcmVfXyhcIjIzMGVcIikoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImM4YmFcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImM4YmJcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTRhMVwiKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiY2E1YVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJjYjdjXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJkM2Y0XCIpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJjZTdlXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNjNiNlwiKTtcbnZhciBjb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjU4NGFcIik7XG52YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMjk0Y1wiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImQyYzhcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJhYWUzXCIpO1xudmFyIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiYmUxM1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiZDJkNVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiMTY1NFwiKTtcbl9fd2VicGFja19yZXF1aXJlX18oXCI1NDliXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTg0YVwiKS5BcnJheS5mcm9tO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImQzZjRcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiZDg2NFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNzlhYVwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJkOGU4XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJkOWY2XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oXCJlNGFlXCIpO1xudmFyIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjc5NGJcIik7XG52YXIgdG9QcmltaXRpdmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiMWJjM1wiKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjhlNjBcIikgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJkYmRiXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBjb3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjU4NGFcIik7XG52YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImU1M2RcIik7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IF9fd2VicGFja19yZXF1aXJlX18oXCJiOGUzXCIpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJkYzYyXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oXCI5NDI3XCIpO1xudmFyICRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTg0YVwiKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiZTRhZVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZjc3MlwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiZTUzZFwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiZTZmM1wiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjA3ZTNcIik7XG52YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjM2YzNcIik7XG52YXIgYXJyYXlJbmRleE9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjViNGVcIikoZmFsc2UpO1xudmFyIElFX1BST1RPID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjU1NTlcIikoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImY0MTBcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXyhcIjFhZjZcIik7XG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1ODRhXCIpLkFycmF5LmlzQXJyYXk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiZjU1OVwiOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG5cbnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjVjYTFcIik7XG52YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiOWRlZlwiKTtcbnZhciBjb250ZXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImQyYzhcIik7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogX193ZWJwYWNrX3JlcXVpcmVfXyhcIjUxNDdcIikoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJmNzcyXCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImZhNWJcIjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNTUzN1wiKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCJmYjE1XCI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AdnVlL2NsaS1zZXJ2aWNlL2xpYi9jb21tYW5kcy9idWlsZC9zZXRQdWJsaWNQYXRoLmpzXG4vLyBUaGlzIGZpbGUgaXMgaW1wb3J0ZWQgaW50byBsaWIvd2MgY2xpZW50IGJ1bmRsZXMuXG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICB2YXIgc2V0UHVibGljUGF0aF9pXG4gIGlmICgoc2V0UHVibGljUGF0aF9pID0gd2luZG93LmRvY3VtZW50LmN1cnJlbnRTY3JpcHQpICYmIChzZXRQdWJsaWNQYXRoX2kgPSBzZXRQdWJsaWNQYXRoX2kuc3JjLm1hdGNoKC8oLitcXC8pW14vXStcXC5qcyhcXD8uKik/JC8pKSkge1xuICAgIF9fd2VicGFja19yZXF1aXJlX18ucCA9IHNldFB1YmxpY1BhdGhfaVsxXSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cbn1cblxuLy8gSW5kaWNhdGUgdG8gd2VicGFjayB0aGF0IHRoaXMgZmlsZSBjYW4gYmUgY29uY2F0ZW5hdGVkXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzZXRQdWJsaWNQYXRoID0gKG51bGwpO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzXG52YXIgb2JqZWN0X2Fzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1MTc2XCIpO1xudmFyIGFzc2lnbl9kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihvYmplY3RfYXNzaWduKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qc1xudmFyIGVzNl9zdHJpbmdfc3RhcnRzX3dpdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiZjU1OVwiKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvb2JqZWN0L2tleXMuanNcbnZhciBrZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImE0YmJcIik7XG52YXIga2V5c19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihrZXlzKTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvYXJyYXkvaXMtYXJyYXkuanNcbnZhciBpc19hcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oXCJhNzQ1XCIpO1xudmFyIGlzX2FycmF5X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGlzX2FycmF5KTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS9hcnJheVdpdGhIb2xlcy5qc1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChpc19hcnJheV9kZWZhdWx0KCkoYXJyKSkgcmV0dXJuIGFycjtcbn1cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL2dldC1pdGVyYXRvci5qc1xudmFyIGdldF9pdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oXCI1ZDczXCIpO1xudmFyIGdldF9pdGVyYXRvcl9kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihnZXRfaXRlcmF0b3IpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzXG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gZ2V0X2l0ZXJhdG9yX2RlZmF1bHQoKShhcnIpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qc1xuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkuanNcblxuXG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzXG52YXIgZXM3X2FycmF5X2luY2x1ZGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjY3NjJcIik7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanNcbnZhciBlczZfc3RyaW5nX2luY2x1ZGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIjJmZGJcIik7XG5cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanNcblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoaXNfYXJyYXlfZGVmYXVsdCgpKGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvYXJyYXkvZnJvbS5qc1xudmFyIGZyb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiNzc0ZVwiKTtcbnZhciBmcm9tX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGZyb20pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvY29yZS1qcy9pcy1pdGVyYWJsZS5qc1xudmFyIGlzX2l0ZXJhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcImM4YmJcIik7XG52YXIgaXNfaXRlcmFibGVfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oaXNfaXRlcmFibGUpO1xuXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qc1xuXG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoaXNfaXRlcmFibGVfZGVmYXVsdCgpKE9iamVjdChpdGVyKSkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gZnJvbV9kZWZhdWx0KCkoaXRlcik7XG59XG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlU3ByZWFkLmpzXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkuanNcblxuXG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcInNvcnRhYmxlanNcIixcImNvbW1vbmpzMlwiOlwic29ydGFibGVqc1wiLFwiYW1kXCI6XCJzb3J0YWJsZWpzXCIsXCJyb290XCI6XCJTb3J0YWJsZVwifVxudmFyIGV4dGVybmFsX2NvbW1vbmpzX3NvcnRhYmxlanNfY29tbW9uanMyX3NvcnRhYmxlanNfYW1kX3NvcnRhYmxlanNfcm9vdF9Tb3J0YWJsZV8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiYTM1MlwiKTtcbnZhciBleHRlcm5hbF9jb21tb25qc19zb3J0YWJsZWpzX2NvbW1vbmpzMl9zb3J0YWJsZWpzX2FtZF9zb3J0YWJsZWpzX3Jvb3RfU29ydGFibGVfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfY29tbW9uanNfc29ydGFibGVqc19jb21tb25qczJfc29ydGFibGVqc19hbWRfc29ydGFibGVqc19yb290X1NvcnRhYmxlXyk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvdXRpbC9oZWxwZXIuanNcbnZhciBoZWxwZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKFwiYzY0OVwiKTtcblxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdnVlZHJhZ2dhYmxlLmpzXG5cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGJ1aWxkQXR0cmlidXRlKG9iamVjdCwgcHJvcE5hbWUsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIG9iamVjdCA9IG9iamVjdCB8fCB7fTtcbiAgb2JqZWN0W3Byb3BOYW1lXSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufVxuXG5mdW5jdGlvbiBjb21wdXRlVm1JbmRleCh2bm9kZXMsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIHZub2Rlcy5tYXAoZnVuY3Rpb24gKGVsdCkge1xuICAgIHJldHVybiBlbHQuZWxtO1xuICB9KS5pbmRleE9mKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBfY29tcHV0ZUluZGV4ZXMoc2xvdHMsIGNoaWxkcmVuLCBpc1RyYW5zaXRpb24sIGZvb3Rlck9mZnNldCkge1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIGVsbUZyb21Ob2RlcyA9IHNsb3RzLm1hcChmdW5jdGlvbiAoZWx0KSB7XG4gICAgcmV0dXJuIGVsdC5lbG07XG4gIH0pO1xuICB2YXIgZm9vdGVySW5kZXggPSBjaGlsZHJlbi5sZW5ndGggLSBmb290ZXJPZmZzZXQ7XG5cbiAgdmFyIHJhd0luZGV4ZXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoY2hpbGRyZW4pLm1hcChmdW5jdGlvbiAoZWx0LCBpZHgpIHtcbiAgICByZXR1cm4gaWR4ID49IGZvb3RlckluZGV4ID8gZWxtRnJvbU5vZGVzLmxlbmd0aCA6IGVsbUZyb21Ob2Rlcy5pbmRleE9mKGVsdCk7XG4gIH0pO1xuXG4gIHJldHVybiBpc1RyYW5zaXRpb24gPyByYXdJbmRleGVzLmZpbHRlcihmdW5jdGlvbiAoaW5kKSB7XG4gICAgcmV0dXJuIGluZCAhPT0gLTE7XG4gIH0pIDogcmF3SW5kZXhlcztcbn1cblxuZnVuY3Rpb24gZW1pdChldnROYW1lLCBldnREYXRhKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpcy4kZW1pdChldnROYW1lLnRvTG93ZXJDYXNlKCksIGV2dERhdGEpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVsZWdhdGVBbmRFbWl0KGV2dE5hbWUpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChldnREYXRhKSB7XG4gICAgaWYgKF90aGlzMi5yZWFsTGlzdCAhPT0gbnVsbCkge1xuICAgICAgX3RoaXMyW1wib25EcmFnXCIgKyBldnROYW1lXShldnREYXRhKTtcbiAgICB9XG5cbiAgICBlbWl0LmNhbGwoX3RoaXMyLCBldnROYW1lLCBldnREYXRhKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNUcmFuc2l0aW9uTmFtZShuYW1lKSB7XG4gIHJldHVybiBbXCJ0cmFuc2l0aW9uLWdyb3VwXCIsIFwiVHJhbnNpdGlvbkdyb3VwXCJdLmluY2x1ZGVzKG5hbWUpO1xufVxuXG5mdW5jdGlvbiB2dWVkcmFnZ2FibGVfaXNUcmFuc2l0aW9uKHNsb3RzKSB7XG4gIGlmICghc2xvdHMgfHwgc2xvdHMubGVuZ3RoICE9PSAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIF9zbG90cyA9IF9zbGljZWRUb0FycmF5KHNsb3RzLCAxKSxcbiAgICAgIGNvbXBvbmVudE9wdGlvbnMgPSBfc2xvdHNbMF0uY29tcG9uZW50T3B0aW9ucztcblxuICBpZiAoIWNvbXBvbmVudE9wdGlvbnMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNUcmFuc2l0aW9uTmFtZShjb21wb25lbnRPcHRpb25zLnRhZyk7XG59XG5cbmZ1bmN0aW9uIGdldFNsb3Qoc2xvdCwgc2NvcGVkU2xvdCwga2V5KSB7XG4gIHJldHVybiBzbG90W2tleV0gfHwgKHNjb3BlZFNsb3Rba2V5XSA/IHNjb3BlZFNsb3Rba2V5XSgpIDogdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUNoaWxkcmVuQW5kT2Zmc2V0cyhjaGlsZHJlbiwgc2xvdCwgc2NvcGVkU2xvdCkge1xuICB2YXIgaGVhZGVyT2Zmc2V0ID0gMDtcbiAgdmFyIGZvb3Rlck9mZnNldCA9IDA7XG4gIHZhciBoZWFkZXIgPSBnZXRTbG90KHNsb3QsIHNjb3BlZFNsb3QsIFwiaGVhZGVyXCIpO1xuXG4gIGlmIChoZWFkZXIpIHtcbiAgICBoZWFkZXJPZmZzZXQgPSBoZWFkZXIubGVuZ3RoO1xuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4gPyBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGhlYWRlciksIF90b0NvbnN1bWFibGVBcnJheShjaGlsZHJlbikpIDogX3RvQ29uc3VtYWJsZUFycmF5KGhlYWRlcik7XG4gIH1cblxuICB2YXIgZm9vdGVyID0gZ2V0U2xvdChzbG90LCBzY29wZWRTbG90LCBcImZvb3RlclwiKTtcblxuICBpZiAoZm9vdGVyKSB7XG4gICAgZm9vdGVyT2Zmc2V0ID0gZm9vdGVyLmxlbmd0aDtcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjaGlsZHJlbiksIF90b0NvbnN1bWFibGVBcnJheShmb290ZXIpKSA6IF90b0NvbnN1bWFibGVBcnJheShmb290ZXIpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgaGVhZGVyT2Zmc2V0OiBoZWFkZXJPZmZzZXQsXG4gICAgZm9vdGVyT2Zmc2V0OiBmb290ZXJPZmZzZXRcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50QXR0cmlidXRlcygkYXR0cnMsIGNvbXBvbmVudERhdGEpIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBudWxsO1xuXG4gIHZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobmFtZSwgdmFsdWUpIHtcbiAgICBhdHRyaWJ1dGVzID0gYnVpbGRBdHRyaWJ1dGUoYXR0cmlidXRlcywgbmFtZSwgdmFsdWUpO1xuICB9O1xuXG4gIHZhciBhdHRycyA9IGtleXNfZGVmYXVsdCgpKCRhdHRycykuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4ga2V5ID09PSBcImlkXCIgfHwga2V5LnN0YXJ0c1dpdGgoXCJkYXRhLVwiKTtcbiAgfSkucmVkdWNlKGZ1bmN0aW9uIChyZXMsIGtleSkge1xuICAgIHJlc1trZXldID0gJGF0dHJzW2tleV07XG4gICAgcmV0dXJuIHJlcztcbiAgfSwge30pO1xuXG4gIHVwZGF0ZShcImF0dHJzXCIsIGF0dHJzKTtcblxuICBpZiAoIWNvbXBvbmVudERhdGEpIHtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIHZhciBvbiA9IGNvbXBvbmVudERhdGEub24sXG4gICAgICBwcm9wcyA9IGNvbXBvbmVudERhdGEucHJvcHMsXG4gICAgICBjb21wb25lbnREYXRhQXR0cnMgPSBjb21wb25lbnREYXRhLmF0dHJzO1xuICB1cGRhdGUoXCJvblwiLCBvbik7XG4gIHVwZGF0ZShcInByb3BzXCIsIHByb3BzKTtcblxuICBhc3NpZ25fZGVmYXVsdCgpKGF0dHJpYnV0ZXMuYXR0cnMsIGNvbXBvbmVudERhdGFBdHRycyk7XG5cbiAgcmV0dXJuIGF0dHJpYnV0ZXM7XG59XG5cbnZhciBldmVudHNMaXN0ZW5lZCA9IFtcIlN0YXJ0XCIsIFwiQWRkXCIsIFwiUmVtb3ZlXCIsIFwiVXBkYXRlXCIsIFwiRW5kXCJdO1xudmFyIGV2ZW50c1RvRW1pdCA9IFtcIkNob29zZVwiLCBcIlVuY2hvb3NlXCIsIFwiU29ydFwiLCBcIkZpbHRlclwiLCBcIkNsb25lXCJdO1xudmFyIHJlYWRvbmx5UHJvcGVydGllcyA9IFtcIk1vdmVcIl0uY29uY2F0KGV2ZW50c0xpc3RlbmVkLCBldmVudHNUb0VtaXQpLm1hcChmdW5jdGlvbiAoZXZ0KSB7XG4gIHJldHVybiBcIm9uXCIgKyBldnQ7XG59KTtcbnZhciBkcmFnZ2luZ0VsZW1lbnQgPSBudWxsO1xudmFyIHZ1ZWRyYWdnYWJsZV9wcm9wcyA9IHtcbiAgb3B0aW9uczogT2JqZWN0LFxuICBsaXN0OiB7XG4gICAgdHlwZTogQXJyYXksXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgdmFsdWU6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBub1RyYW5zaXRpb25PbkRyYWc6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIGNsb25lOiB7XG4gICAgdHlwZTogRnVuY3Rpb24sXG4gICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQob3JpZ2luYWwpIHtcbiAgICAgIHJldHVybiBvcmlnaW5hbDtcbiAgICB9XG4gIH0sXG4gIGVsZW1lbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJkaXZcIlxuICB9LFxuICB0YWc6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBtb3ZlOiB7XG4gICAgdHlwZTogRnVuY3Rpb24sXG4gICAgZGVmYXVsdDogbnVsbFxuICB9LFxuICBjb21wb25lbnREYXRhOiB7XG4gICAgdHlwZTogT2JqZWN0LFxuICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICBkZWZhdWx0OiBudWxsXG4gIH1cbn07XG52YXIgZHJhZ2dhYmxlQ29tcG9uZW50ID0ge1xuICBuYW1lOiBcImRyYWdnYWJsZVwiLFxuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczogdnVlZHJhZ2dhYmxlX3Byb3BzLFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uTW9kZTogZmFsc2UsXG4gICAgICBub25lRnVuY3Rpb25hbENvbXBvbmVudE1vZGU6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkge1xuICAgIHZhciBzbG90cyA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgdGhpcy50cmFuc2l0aW9uTW9kZSA9IHZ1ZWRyYWdnYWJsZV9pc1RyYW5zaXRpb24oc2xvdHMpO1xuXG4gICAgdmFyIF9jb21wdXRlQ2hpbGRyZW5BbmRPZiA9IGNvbXB1dGVDaGlsZHJlbkFuZE9mZnNldHMoc2xvdHMsIHRoaXMuJHNsb3RzLCB0aGlzLiRzY29wZWRTbG90cyksXG4gICAgICAgIGNoaWxkcmVuID0gX2NvbXB1dGVDaGlsZHJlbkFuZE9mLmNoaWxkcmVuLFxuICAgICAgICBoZWFkZXJPZmZzZXQgPSBfY29tcHV0ZUNoaWxkcmVuQW5kT2YuaGVhZGVyT2Zmc2V0LFxuICAgICAgICBmb290ZXJPZmZzZXQgPSBfY29tcHV0ZUNoaWxkcmVuQW5kT2YuZm9vdGVyT2Zmc2V0O1xuXG4gICAgdGhpcy5oZWFkZXJPZmZzZXQgPSBoZWFkZXJPZmZzZXQ7XG4gICAgdGhpcy5mb290ZXJPZmZzZXQgPSBmb290ZXJPZmZzZXQ7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBnZXRDb21wb25lbnRBdHRyaWJ1dGVzKHRoaXMuJGF0dHJzLCB0aGlzLmNvbXBvbmVudERhdGEpO1xuICAgIHJldHVybiBoKHRoaXMuZ2V0VGFnKCksIGF0dHJpYnV0ZXMsIGNoaWxkcmVuKTtcbiAgfSxcbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHtcbiAgICBpZiAodGhpcy5saXN0ICE9PSBudWxsICYmIHRoaXMudmFsdWUgIT09IG51bGwpIHtcbiAgICAgIGhlbHBlcltcImJcIiAvKiBjb25zb2xlICovXS5lcnJvcihcIlZhbHVlIGFuZCBsaXN0IHByb3BzIGFyZSBtdXR1YWxseSBleGNsdXNpdmUhIFBsZWFzZSBzZXQgb25lIG9yIGFub3RoZXIuXCIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVsZW1lbnQgIT09IFwiZGl2XCIpIHtcbiAgICAgIGhlbHBlcltcImJcIiAvKiBjb25zb2xlICovXS53YXJuKFwiRWxlbWVudCBwcm9wcyBpcyBkZXByZWNhdGVkIHBsZWFzZSB1c2UgdGFnIHByb3BzIGluc3RlYWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vU29ydGFibGVKUy9WdWUuRHJhZ2dhYmxlL2Jsb2IvbWFzdGVyL2RvY3VtZW50YXRpb24vbWlncmF0ZS5tZCNlbGVtZW50LXByb3BzXCIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGVscGVyW1wiYlwiIC8qIGNvbnNvbGUgKi9dLndhcm4oXCJPcHRpb25zIHByb3BzIGlzIGRlcHJlY2F0ZWQsIGFkZCBzb3J0YWJsZSBvcHRpb25zIGRpcmVjdGx5IGFzIHZ1ZS5kcmFnZ2FibGUgaXRlbSwgb3IgdXNlIHYtYmluZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Tb3J0YWJsZUpTL1Z1ZS5EcmFnZ2FibGUvYmxvYi9tYXN0ZXIvZG9jdW1lbnRhdGlvbi9taWdyYXRlLm1kI29wdGlvbnMtcHJvcHNcIik7XG4gICAgfVxuICB9LFxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5ub25lRnVuY3Rpb25hbENvbXBvbmVudE1vZGUgPSB0aGlzLmdldFRhZygpLnRvTG93ZXJDYXNlKCkgIT09IHRoaXMuJGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgJiYgIXRoaXMuZ2V0SXNGdW5jdGlvbmFsKCk7XG5cbiAgICBpZiAodGhpcy5ub25lRnVuY3Rpb25hbENvbXBvbmVudE1vZGUgJiYgdGhpcy50cmFuc2l0aW9uTW9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVHJhbnNpdGlvbi1ncm91cCBpbnNpZGUgY29tcG9uZW50IGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBhbHRlciB0YWcgdmFsdWUgb3IgcmVtb3ZlIHRyYW5zaXRpb24tZ3JvdXAuIEN1cnJlbnQgdGFnIHZhbHVlOiBcIi5jb25jYXQodGhpcy5nZXRUYWcoKSkpO1xuICAgIH1cblxuICAgIHZhciBvcHRpb25zQWRkZWQgPSB7fTtcbiAgICBldmVudHNMaXN0ZW5lZC5mb3JFYWNoKGZ1bmN0aW9uIChlbHQpIHtcbiAgICAgIG9wdGlvbnNBZGRlZFtcIm9uXCIgKyBlbHRdID0gZGVsZWdhdGVBbmRFbWl0LmNhbGwoX3RoaXMzLCBlbHQpO1xuICAgIH0pO1xuICAgIGV2ZW50c1RvRW1pdC5mb3JFYWNoKGZ1bmN0aW9uIChlbHQpIHtcbiAgICAgIG9wdGlvbnNBZGRlZFtcIm9uXCIgKyBlbHRdID0gZW1pdC5iaW5kKF90aGlzMywgZWx0KTtcbiAgICB9KTtcblxuICAgIHZhciBhdHRyaWJ1dGVzID0ga2V5c19kZWZhdWx0KCkodGhpcy4kYXR0cnMpLnJlZHVjZShmdW5jdGlvbiAocmVzLCBrZXkpIHtcbiAgICAgIHJlc1tPYmplY3QoaGVscGVyW1wiYVwiIC8qIGNhbWVsaXplICovXSkoa2V5KV0gPSBfdGhpczMuJGF0dHJzW2tleV07XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0sIHt9KTtcblxuICAgIHZhciBvcHRpb25zID0gYXNzaWduX2RlZmF1bHQoKSh7fSwgdGhpcy5vcHRpb25zLCBhdHRyaWJ1dGVzLCBvcHRpb25zQWRkZWQsIHtcbiAgICAgIG9uTW92ZTogZnVuY3Rpb24gb25Nb3ZlKGV2dCwgb3JpZ2luYWxFdmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMzLm9uRHJhZ01vdmUoZXZ0LCBvcmlnaW5hbEV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICEoXCJkcmFnZ2FibGVcIiBpbiBvcHRpb25zKSAmJiAob3B0aW9ucy5kcmFnZ2FibGUgPSBcIj4qXCIpO1xuICAgIHRoaXMuX3NvcnRhYmxlID0gbmV3IGV4dGVybmFsX2NvbW1vbmpzX3NvcnRhYmxlanNfY29tbW9uanMyX3NvcnRhYmxlanNfYW1kX3NvcnRhYmxlanNfcm9vdF9Tb3J0YWJsZV9kZWZhdWx0LmEodGhpcy5yb290Q29udGFpbmVyLCBvcHRpb25zKTtcbiAgICB0aGlzLmNvbXB1dGVJbmRleGVzKCk7XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuX3NvcnRhYmxlICE9PSB1bmRlZmluZWQpIHRoaXMuX3NvcnRhYmxlLmRlc3Ryb3koKTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICByb290Q29udGFpbmVyOiBmdW5jdGlvbiByb290Q29udGFpbmVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbk1vZGUgPyB0aGlzLiRlbC5jaGlsZHJlblswXSA6IHRoaXMuJGVsO1xuICAgIH0sXG4gICAgcmVhbExpc3Q6IGZ1bmN0aW9uIHJlYWxMaXN0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdCA/IHRoaXMubGlzdCA6IHRoaXMudmFsdWU7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIobmV3T3B0aW9uVmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zKG5ld09wdGlvblZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBkZWVwOiB0cnVlXG4gICAgfSxcbiAgICAkYXR0cnM6IHtcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIobmV3T3B0aW9uVmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zKG5ld09wdGlvblZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBkZWVwOiB0cnVlXG4gICAgfSxcbiAgICByZWFsTGlzdDogZnVuY3Rpb24gcmVhbExpc3QoKSB7XG4gICAgICB0aGlzLmNvbXB1dGVJbmRleGVzKCk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2V0SXNGdW5jdGlvbmFsOiBmdW5jdGlvbiBnZXRJc0Z1bmN0aW9uYWwoKSB7XG4gICAgICB2YXIgZm5PcHRpb25zID0gdGhpcy5fdm5vZGUuZm5PcHRpb25zO1xuICAgICAgcmV0dXJuIGZuT3B0aW9ucyAmJiBmbk9wdGlvbnMuZnVuY3Rpb25hbDtcbiAgICB9LFxuICAgIGdldFRhZzogZnVuY3Rpb24gZ2V0VGFnKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFnIHx8IHRoaXMuZWxlbWVudDtcbiAgICB9LFxuICAgIHVwZGF0ZU9wdGlvbnM6IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMobmV3T3B0aW9uVmFsdWUpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIG5ld09wdGlvblZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IE9iamVjdChoZWxwZXJbXCJhXCIgLyogY2FtZWxpemUgKi9dKShwcm9wZXJ0eSk7XG5cbiAgICAgICAgaWYgKHJlYWRvbmx5UHJvcGVydGllcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgICAgICB0aGlzLl9zb3J0YWJsZS5vcHRpb24odmFsdWUsIG5ld09wdGlvblZhbHVlW3Byb3BlcnR5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGdldENoaWxkcmVuTm9kZXM6IGZ1bmN0aW9uIGdldENoaWxkcmVuTm9kZXMoKSB7XG4gICAgICBpZiAodGhpcy5ub25lRnVuY3Rpb25hbENvbXBvbmVudE1vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNoaWxkcmVuWzBdLiRzbG90cy5kZWZhdWx0O1xuICAgICAgfVxuXG4gICAgICB2YXIgcmF3Tm9kZXMgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbk1vZGUgPyByYXdOb2Rlc1swXS5jaGlsZC4kc2xvdHMuZGVmYXVsdCA6IHJhd05vZGVzO1xuICAgIH0sXG4gICAgY29tcHV0ZUluZGV4ZXM6IGZ1bmN0aW9uIGNvbXB1dGVJbmRleGVzKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXM0LnZpc2libGVJbmRleGVzID0gX2NvbXB1dGVJbmRleGVzKF90aGlzNC5nZXRDaGlsZHJlbk5vZGVzKCksIF90aGlzNC5yb290Q29udGFpbmVyLmNoaWxkcmVuLCBfdGhpczQudHJhbnNpdGlvbk1vZGUsIF90aGlzNC5mb290ZXJPZmZzZXQpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRVbmRlcmx5aW5nVm06IGZ1bmN0aW9uIGdldFVuZGVybHlpbmdWbShodG1sRWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSBjb21wdXRlVm1JbmRleCh0aGlzLmdldENoaWxkcmVuTm9kZXMoKSB8fCBbXSwgaHRtbEVsdCk7XG5cbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgLy9FZGdlIGNhc2UgZHVyaW5nIG1vdmUgY2FsbGJhY2s6IHJlbGF0ZWQgZWxlbWVudCBtaWdodCBiZVxuICAgICAgICAvL2FuIGVsZW1lbnQgZGlmZmVyZW50IGZyb20gY29sbGVjdGlvblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnJlYWxMaXN0W2luZGV4XTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgZWxlbWVudDogZWxlbWVudFxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldFVuZGVybHlpbmdQb3RlbmNpYWxEcmFnZ2FibGVDb21wb25lbnQ6IGZ1bmN0aW9uIGdldFVuZGVybHlpbmdQb3RlbmNpYWxEcmFnZ2FibGVDb21wb25lbnQoX3JlZikge1xuICAgICAgdmFyIHZ1ZSA9IF9yZWYuX192dWVfXztcblxuICAgICAgaWYgKCF2dWUgfHwgIXZ1ZS4kb3B0aW9ucyB8fCAhaXNUcmFuc2l0aW9uTmFtZSh2dWUuJG9wdGlvbnMuX2NvbXBvbmVudFRhZykpIHtcbiAgICAgICAgaWYgKCEoXCJyZWFsTGlzdFwiIGluIHZ1ZSkgJiYgdnVlLiRjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgXCJyZWFsTGlzdFwiIGluIHZ1ZS4kY2hpbGRyZW5bMF0pIHJldHVybiB2dWUuJGNoaWxkcmVuWzBdO1xuICAgICAgICByZXR1cm4gdnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdnVlLiRwYXJlbnQ7XG4gICAgfSxcbiAgICBlbWl0Q2hhbmdlczogZnVuY3Rpb24gZW1pdENoYW5nZXMoZXZ0KSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczUuJGVtaXQoXCJjaGFuZ2VcIiwgZXZ0KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgYWx0ZXJMaXN0OiBmdW5jdGlvbiBhbHRlckxpc3Qob25MaXN0KSB7XG4gICAgICBpZiAodGhpcy5saXN0KSB7XG4gICAgICAgIG9uTGlzdCh0aGlzLmxpc3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdMaXN0ID0gX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMudmFsdWUpO1xuXG4gICAgICBvbkxpc3QobmV3TGlzdCk7XG4gICAgICB0aGlzLiRlbWl0KFwiaW5wdXRcIiwgbmV3TGlzdCk7XG4gICAgfSxcbiAgICBzcGxpY2VMaXN0OiBmdW5jdGlvbiBzcGxpY2VMaXN0KCkge1xuICAgICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgICAgIHZhciBzcGxpY2VMaXN0ID0gZnVuY3Rpb24gc3BsaWNlTGlzdChsaXN0KSB7XG4gICAgICAgIHJldHVybiBsaXN0LnNwbGljZS5hcHBseShsaXN0LCBfdG9Db25zdW1hYmxlQXJyYXkoX2FyZ3VtZW50cykpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5hbHRlckxpc3Qoc3BsaWNlTGlzdCk7XG4gICAgfSxcbiAgICB1cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24ob2xkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgICB2YXIgdXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbihsaXN0KSB7XG4gICAgICAgIHJldHVybiBsaXN0LnNwbGljZShuZXdJbmRleCwgMCwgbGlzdC5zcGxpY2Uob2xkSW5kZXgsIDEpWzBdKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYWx0ZXJMaXN0KHVwZGF0ZVBvc2l0aW9uKTtcbiAgICB9LFxuICAgIGdldFJlbGF0ZWRDb250ZXh0RnJvbU1vdmVFdmVudDogZnVuY3Rpb24gZ2V0UmVsYXRlZENvbnRleHRGcm9tTW92ZUV2ZW50KF9yZWYyKSB7XG4gICAgICB2YXIgdG8gPSBfcmVmMi50byxcbiAgICAgICAgICByZWxhdGVkID0gX3JlZjIucmVsYXRlZDtcbiAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmdldFVuZGVybHlpbmdQb3RlbmNpYWxEcmFnZ2FibGVDb21wb25lbnQodG8pO1xuXG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBsaXN0ID0gY29tcG9uZW50LnJlYWxMaXN0O1xuICAgICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICAgIGxpc3Q6IGxpc3QsXG4gICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50XG4gICAgICB9O1xuXG4gICAgICBpZiAodG8gIT09IHJlbGF0ZWQgJiYgbGlzdCAmJiBjb21wb25lbnQuZ2V0VW5kZXJseWluZ1ZtKSB7XG4gICAgICAgIHZhciBkZXN0aW5hdGlvbiA9IGNvbXBvbmVudC5nZXRVbmRlcmx5aW5nVm0ocmVsYXRlZCk7XG5cbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIGFzc2lnbl9kZWZhdWx0KCkoZGVzdGluYXRpb24sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH0sXG4gICAgZ2V0Vm1JbmRleDogZnVuY3Rpb24gZ2V0Vm1JbmRleChkb21JbmRleCkge1xuICAgICAgdmFyIGluZGV4ZXMgPSB0aGlzLnZpc2libGVJbmRleGVzO1xuICAgICAgdmFyIG51bWJlckluZGV4ZXMgPSBpbmRleGVzLmxlbmd0aDtcbiAgICAgIHJldHVybiBkb21JbmRleCA+IG51bWJlckluZGV4ZXMgLSAxID8gbnVtYmVySW5kZXhlcyA6IGluZGV4ZXNbZG9tSW5kZXhdO1xuICAgIH0sXG4gICAgZ2V0Q29tcG9uZW50OiBmdW5jdGlvbiBnZXRDb21wb25lbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kc2xvdHMuZGVmYXVsdFswXS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB9LFxuICAgIHJlc2V0VHJhbnNpdGlvbkRhdGE6IGZ1bmN0aW9uIHJlc2V0VHJhbnNpdGlvbkRhdGEoaW5kZXgpIHtcbiAgICAgIGlmICghdGhpcy5ub1RyYW5zaXRpb25PbkRyYWcgfHwgIXRoaXMudHJhbnNpdGlvbk1vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgbm9kZXMgPSB0aGlzLmdldENoaWxkcmVuTm9kZXMoKTtcbiAgICAgIG5vZGVzW2luZGV4XS5kYXRhID0gbnVsbDtcbiAgICAgIHZhciB0cmFuc2l0aW9uQ29udGFpbmVyID0gdGhpcy5nZXRDb21wb25lbnQoKTtcbiAgICAgIHRyYW5zaXRpb25Db250YWluZXIuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHRyYW5zaXRpb25Db250YWluZXIua2VwdCA9IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBvbkRyYWdTdGFydChldnQpIHtcbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuZ2V0VW5kZXJseWluZ1ZtKGV2dC5pdGVtKTtcbiAgICAgIGV2dC5pdGVtLl91bmRlcmx5aW5nX3ZtXyA9IHRoaXMuY2xvbmUodGhpcy5jb250ZXh0LmVsZW1lbnQpO1xuICAgICAgZHJhZ2dpbmdFbGVtZW50ID0gZXZ0Lml0ZW07XG4gICAgfSxcbiAgICBvbkRyYWdBZGQ6IGZ1bmN0aW9uIG9uRHJhZ0FkZChldnQpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gZXZ0Lml0ZW0uX3VuZGVybHlpbmdfdm1fO1xuXG4gICAgICBpZiAoZWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0KGhlbHBlcltcImRcIiAvKiByZW1vdmVOb2RlICovXSkoZXZ0Lml0ZW0pO1xuICAgICAgdmFyIG5ld0luZGV4ID0gdGhpcy5nZXRWbUluZGV4KGV2dC5uZXdJbmRleCk7XG4gICAgICB0aGlzLnNwbGljZUxpc3QobmV3SW5kZXgsIDAsIGVsZW1lbnQpO1xuICAgICAgdGhpcy5jb21wdXRlSW5kZXhlcygpO1xuICAgICAgdmFyIGFkZGVkID0ge1xuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXhcbiAgICAgIH07XG4gICAgICB0aGlzLmVtaXRDaGFuZ2VzKHtcbiAgICAgICAgYWRkZWQ6IGFkZGVkXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uRHJhZ1JlbW92ZTogZnVuY3Rpb24gb25EcmFnUmVtb3ZlKGV2dCkge1xuICAgICAgT2JqZWN0KGhlbHBlcltcImNcIiAvKiBpbnNlcnROb2RlQXQgKi9dKSh0aGlzLnJvb3RDb250YWluZXIsIGV2dC5pdGVtLCBldnQub2xkSW5kZXgpO1xuXG4gICAgICBpZiAoZXZ0LnB1bGxNb2RlID09PSBcImNsb25lXCIpIHtcbiAgICAgICAgT2JqZWN0KGhlbHBlcltcImRcIiAvKiByZW1vdmVOb2RlICovXSkoZXZ0LmNsb25lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2xkSW5kZXggPSB0aGlzLmNvbnRleHQuaW5kZXg7XG4gICAgICB0aGlzLnNwbGljZUxpc3Qob2xkSW5kZXgsIDEpO1xuICAgICAgdmFyIHJlbW92ZWQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHRoaXMuY29udGV4dC5lbGVtZW50LFxuICAgICAgICBvbGRJbmRleDogb2xkSW5kZXhcbiAgICAgIH07XG4gICAgICB0aGlzLnJlc2V0VHJhbnNpdGlvbkRhdGEob2xkSW5kZXgpO1xuICAgICAgdGhpcy5lbWl0Q2hhbmdlcyh7XG4gICAgICAgIHJlbW92ZWQ6IHJlbW92ZWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25EcmFnVXBkYXRlOiBmdW5jdGlvbiBvbkRyYWdVcGRhdGUoZXZ0KSB7XG4gICAgICBPYmplY3QoaGVscGVyW1wiZFwiIC8qIHJlbW92ZU5vZGUgKi9dKShldnQuaXRlbSk7XG4gICAgICBPYmplY3QoaGVscGVyW1wiY1wiIC8qIGluc2VydE5vZGVBdCAqL10pKGV2dC5mcm9tLCBldnQuaXRlbSwgZXZ0Lm9sZEluZGV4KTtcbiAgICAgIHZhciBvbGRJbmRleCA9IHRoaXMuY29udGV4dC5pbmRleDtcbiAgICAgIHZhciBuZXdJbmRleCA9IHRoaXMuZ2V0Vm1JbmRleChldnQubmV3SW5kZXgpO1xuICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbihvbGRJbmRleCwgbmV3SW5kZXgpO1xuICAgICAgdmFyIG1vdmVkID0ge1xuICAgICAgICBlbGVtZW50OiB0aGlzLmNvbnRleHQuZWxlbWVudCxcbiAgICAgICAgb2xkSW5kZXg6IG9sZEluZGV4LFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXhcbiAgICAgIH07XG4gICAgICB0aGlzLmVtaXRDaGFuZ2VzKHtcbiAgICAgICAgbW92ZWQ6IG1vdmVkXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVwZGF0ZVByb3BlcnR5OiBmdW5jdGlvbiB1cGRhdGVQcm9wZXJ0eShldnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgZXZ0Lmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkgJiYgKGV2dFtwcm9wZXJ0eU5hbWVdICs9IHRoaXMuaGVhZGVyT2Zmc2V0KTtcbiAgICB9LFxuICAgIGNvbXB1dGVGdXR1cmVJbmRleDogZnVuY3Rpb24gY29tcHV0ZUZ1dHVyZUluZGV4KHJlbGF0ZWRDb250ZXh0LCBldnQpIHtcbiAgICAgIGlmICghcmVsYXRlZENvbnRleHQuZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRvbUNoaWxkcmVuID0gX3RvQ29uc3VtYWJsZUFycmF5KGV2dC50by5jaGlsZHJlbikuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gZWwuc3R5bGVbXCJkaXNwbGF5XCJdICE9PSBcIm5vbmVcIjtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY3VycmVudERPTUluZGV4ID0gZG9tQ2hpbGRyZW4uaW5kZXhPZihldnQucmVsYXRlZCk7XG4gICAgICB2YXIgY3VycmVudEluZGV4ID0gcmVsYXRlZENvbnRleHQuY29tcG9uZW50LmdldFZtSW5kZXgoY3VycmVudERPTUluZGV4KTtcbiAgICAgIHZhciBkcmFnZ2VkSW5MaXN0ID0gZG9tQ2hpbGRyZW4uaW5kZXhPZihkcmFnZ2luZ0VsZW1lbnQpICE9PSAtMTtcbiAgICAgIHJldHVybiBkcmFnZ2VkSW5MaXN0IHx8ICFldnQud2lsbEluc2VydEFmdGVyID8gY3VycmVudEluZGV4IDogY3VycmVudEluZGV4ICsgMTtcbiAgICB9LFxuICAgIG9uRHJhZ01vdmU6IGZ1bmN0aW9uIG9uRHJhZ01vdmUoZXZ0LCBvcmlnaW5hbEV2ZW50KSB7XG4gICAgICB2YXIgb25Nb3ZlID0gdGhpcy5tb3ZlO1xuXG4gICAgICBpZiAoIW9uTW92ZSB8fCAhdGhpcy5yZWFsTGlzdCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRDb250ZXh0ID0gdGhpcy5nZXRSZWxhdGVkQ29udGV4dEZyb21Nb3ZlRXZlbnQoZXZ0KTtcbiAgICAgIHZhciBkcmFnZ2VkQ29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgIHZhciBmdXR1cmVJbmRleCA9IHRoaXMuY29tcHV0ZUZ1dHVyZUluZGV4KHJlbGF0ZWRDb250ZXh0LCBldnQpO1xuXG4gICAgICBhc3NpZ25fZGVmYXVsdCgpKGRyYWdnZWRDb250ZXh0LCB7XG4gICAgICAgIGZ1dHVyZUluZGV4OiBmdXR1cmVJbmRleFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBzZW5kRXZ0ID0gYXNzaWduX2RlZmF1bHQoKSh7fSwgZXZ0LCB7XG4gICAgICAgIHJlbGF0ZWRDb250ZXh0OiByZWxhdGVkQ29udGV4dCxcbiAgICAgICAgZHJhZ2dlZENvbnRleHQ6IGRyYWdnZWRDb250ZXh0XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9uTW92ZShzZW5kRXZ0LCBvcmlnaW5hbEV2ZW50KTtcbiAgICB9LFxuICAgIG9uRHJhZ0VuZDogZnVuY3Rpb24gb25EcmFnRW5kKCkge1xuICAgICAgdGhpcy5jb21wdXRlSW5kZXhlcygpO1xuICAgICAgZHJhZ2dpbmdFbGVtZW50ID0gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIFwiVnVlXCIgaW4gd2luZG93KSB7XG4gIHdpbmRvdy5WdWUuY29tcG9uZW50KFwiZHJhZ2dhYmxlXCIsIGRyYWdnYWJsZUNvbXBvbmVudCk7XG59XG5cbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHZ1ZWRyYWdnYWJsZSA9IChkcmFnZ2FibGVDb21wb25lbnQpO1xuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9ub2RlX21vZHVsZXMvQHZ1ZS9jbGktc2VydmljZS9saWIvY29tbWFuZHMvYnVpbGQvZW50cnktbGliLmpzXG5cblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZW50cnlfbGliID0gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAodnVlZHJhZ2dhYmxlKTtcblxuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZ1ZWRyYWdnYWJsZS5jb21tb24uanMubWFwIiwiLyoqIVxuICogU29ydGFibGUgMS4xMC4yXG4gKiBAYXV0aG9yXHRSdWJhWGEgICA8dHJhc2hAcnViYXhhLm9yZz5cbiAqIEBhdXRob3JcdG93ZW5tICAgIDxvd2VuMjMzNTVAZ21haWwuY29tPlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjEuMTAuMlwiO1xuXG5mdW5jdGlvbiB1c2VyQWdlbnQocGF0dGVybikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvcikge1xuICAgIHJldHVybiAhIVxuICAgIC8qQF9fUFVSRV9fKi9cbiAgICBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKHBhdHRlcm4pO1xuICB9XG59XG5cbnZhciBJRTExT3JMZXNzID0gdXNlckFnZW50KC8oPzpUcmlkZW50LipydlsgOl0/MTFcXC58bXNpZXxpZW1vYmlsZXxXaW5kb3dzIFBob25lKS9pKTtcbnZhciBFZGdlID0gdXNlckFnZW50KC9FZGdlL2kpO1xudmFyIEZpcmVGb3ggPSB1c2VyQWdlbnQoL2ZpcmVmb3gvaSk7XG52YXIgU2FmYXJpID0gdXNlckFnZW50KC9zYWZhcmkvaSkgJiYgIXVzZXJBZ2VudCgvY2hyb21lL2kpICYmICF1c2VyQWdlbnQoL2FuZHJvaWQvaSk7XG52YXIgSU9TID0gdXNlckFnZW50KC9pUChhZHxvZHxob25lKS9pKTtcbnZhciBDaHJvbWVGb3JBbmRyb2lkID0gdXNlckFnZW50KC9jaHJvbWUvaSkgJiYgdXNlckFnZW50KC9hbmRyb2lkL2kpO1xuXG52YXIgY2FwdHVyZU1vZGUgPSB7XG4gIGNhcHR1cmU6IGZhbHNlLFxuICBwYXNzaXZlOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gb24oZWwsIGV2ZW50LCBmbikge1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBvZmYoZWwsIGV2ZW50LCBmbikge1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmbiwgIUlFMTFPckxlc3MgJiYgY2FwdHVyZU1vZGUpO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVzKFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IpIHtcbiAgaWYgKCFzZWxlY3RvcikgcmV0dXJuO1xuICBzZWxlY3RvclswXSA9PT0gJz4nICYmIChzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cmluZygxKSk7XG5cbiAgaWYgKGVsKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChlbC5tYXRjaGVzKSB7XG4gICAgICAgIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFBhcmVudE9ySG9zdChlbCkge1xuICByZXR1cm4gZWwuaG9zdCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwuaG9zdC5ub2RlVHlwZSA/IGVsLmhvc3QgOiBlbC5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KFxuLyoqSFRNTEVsZW1lbnQqL1xuZWwsXG4vKipTdHJpbmcqL1xuc2VsZWN0b3IsXG4vKipIVE1MRWxlbWVudCovXG5jdHgsIGluY2x1ZGVDVFgpIHtcbiAgaWYgKGVsKSB7XG4gICAgY3R4ID0gY3R4IHx8IGRvY3VtZW50O1xuXG4gICAgZG8ge1xuICAgICAgaWYgKHNlbGVjdG9yICE9IG51bGwgJiYgKHNlbGVjdG9yWzBdID09PSAnPicgPyBlbC5wYXJlbnROb2RlID09PSBjdHggJiYgbWF0Y2hlcyhlbCwgc2VsZWN0b3IpIDogbWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB8fCBpbmNsdWRlQ1RYICYmIGVsID09PSBjdHgpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWwgPT09IGN0eCkgYnJlYWs7XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgfSB3aGlsZSAoZWwgPSBnZXRQYXJlbnRPckhvc3QoZWwpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUl9TUEFDRSA9IC9cXHMrL2c7XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsLCBuYW1lLCBzdGF0ZSkge1xuICBpZiAoZWwgJiYgbmFtZSkge1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzdGF0ZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gKCcgJyArIGVsLmNsYXNzTmFtZSArICcgJykucmVwbGFjZShSX1NQQUNFLCAnICcpLnJlcGxhY2UoJyAnICsgbmFtZSArICcgJywgJyAnKTtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IChjbGFzc05hbWUgKyAoc3RhdGUgPyAnICcgKyBuYW1lIDogJycpKS5yZXBsYWNlKFJfU1BBQ0UsICcgJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNzcyhlbCwgcHJvcCwgdmFsKSB7XG4gIHZhciBzdHlsZSA9IGVsICYmIGVsLnN0eWxlO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIGlmICh2YWwgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKGRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgdmFsID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgJycpO1xuICAgICAgfSBlbHNlIGlmIChlbC5jdXJyZW50U3R5bGUpIHtcbiAgICAgICAgdmFsID0gZWwuY3VycmVudFN0eWxlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcCA9PT0gdm9pZCAwID8gdmFsIDogdmFsW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShwcm9wIGluIHN0eWxlKSAmJiBwcm9wLmluZGV4T2YoJ3dlYmtpdCcpID09PSAtMSkge1xuICAgICAgICBwcm9wID0gJy13ZWJraXQtJyArIHByb3A7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlW3Byb3BdID0gdmFsICsgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gJycgOiAncHgnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0cml4KGVsLCBzZWxmT25seSkge1xuICB2YXIgYXBwbGllZFRyYW5zZm9ybXMgPSAnJztcblxuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gZWw7XG4gIH0gZWxzZSB7XG4gICAgZG8ge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGNzcyhlbCwgJ3RyYW5zZm9ybScpO1xuXG4gICAgICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGFwcGxpZWRUcmFuc2Zvcm1zID0gdHJhbnNmb3JtICsgJyAnICsgYXBwbGllZFRyYW5zZm9ybXM7XG4gICAgICB9XG4gICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICB9IHdoaWxlICghc2VsZk9ubHkgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgdmFyIG1hdHJpeEZuID0gd2luZG93LkRPTU1hdHJpeCB8fCB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4IHx8IHdpbmRvdy5DU1NNYXRyaXggfHwgd2luZG93Lk1TQ1NTTWF0cml4O1xuICAvKmpzaGludCAtVzA1NiAqL1xuXG4gIHJldHVybiBtYXRyaXhGbiAmJiBuZXcgbWF0cml4Rm4oYXBwbGllZFRyYW5zZm9ybXMpO1xufVxuXG5mdW5jdGlvbiBmaW5kKGN0eCwgdGFnTmFtZSwgaXRlcmF0b3IpIHtcbiAgaWYgKGN0eCkge1xuICAgIHZhciBsaXN0ID0gY3R4LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUpLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGxpc3QubGVuZ3RoO1xuXG4gICAgaWYgKGl0ZXJhdG9yKSB7XG4gICAgICBmb3IgKDsgaSA8IG47IGkrKykge1xuICAgICAgICBpdGVyYXRvcihsaXN0W2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpIHtcbiAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50O1xuXG4gIGlmIChzY3JvbGxpbmdFbGVtZW50KSB7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIFwiYm91bmRpbmcgY2xpZW50IHJlY3RcIiBvZiBnaXZlbiBlbGVtZW50XHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICAgICAgICAgICAgICAgICAgICAgVGhlIGVsZW1lbnQgd2hvc2UgYm91bmRpbmdDbGllbnRSZWN0IGlzIHdhbnRlZFxyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IHJlbGF0aXZlVG9Db250YWluaW5nQmxvY2sgIFdoZXRoZXIgdGhlIHJlY3Qgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBjb250YWluaW5nIGJsb2NrIG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWluZXJcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSByZWxhdGl2ZVRvTm9uU3RhdGljUGFyZW50ICBXaGV0aGVyIHRoZSByZWN0IHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgcmVsYXRpdmUgcGFyZW50IG9mIChpbmNsdWRpbmcpIHRoZSBjb250YWllbnJcclxuICogQHBhcmFtICB7W0Jvb2xlYW5dfSB1bmRvU2NhbGUgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRoZSBjb250YWluZXIncyBzY2FsZSgpIHNob3VsZCBiZSB1bmRvbmVcclxuICogQHBhcmFtICB7W0hUTUxFbGVtZW50XX0gY29udGFpbmVyICAgICAgICAgICAgICBUaGUgcGFyZW50IHRoZSBlbGVtZW50IHdpbGwgYmUgcGxhY2VkIGluXHJcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGJvdW5kaW5nQ2xpZW50UmVjdCBvZiBlbCwgd2l0aCBzcGVjaWZpZWQgYWRqdXN0bWVudHNcclxuICovXG5cblxuZnVuY3Rpb24gZ2V0UmVjdChlbCwgcmVsYXRpdmVUb0NvbnRhaW5pbmdCbG9jaywgcmVsYXRpdmVUb05vblN0YXRpY1BhcmVudCwgdW5kb1NjYWxlLCBjb250YWluZXIpIHtcbiAgaWYgKCFlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgZWwgIT09IHdpbmRvdykgcmV0dXJuO1xuICB2YXIgZWxSZWN0LCB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIGhlaWdodCwgd2lkdGg7XG5cbiAgaWYgKGVsICE9PSB3aW5kb3cgJiYgZWwgIT09IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKSkge1xuICAgIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRvcCA9IGVsUmVjdC50b3A7XG4gICAgbGVmdCA9IGVsUmVjdC5sZWZ0O1xuICAgIGJvdHRvbSA9IGVsUmVjdC5ib3R0b207XG4gICAgcmlnaHQgPSBlbFJlY3QucmlnaHQ7XG4gICAgaGVpZ2h0ID0gZWxSZWN0LmhlaWdodDtcbiAgICB3aWR0aCA9IGVsUmVjdC53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSAwO1xuICAgIGxlZnQgPSAwO1xuICAgIGJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICByaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKChyZWxhdGl2ZVRvQ29udGFpbmluZ0Jsb2NrIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQpICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHRyYW5zbGF0ZSgpXG4gICAgY29udGFpbmVyID0gY29udGFpbmVyIHx8IGVsLnBhcmVudE5vZGU7IC8vIHNvbHZlcyAjMTEyMyAoc2VlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc5NTM4MDYvNjA4ODMxMilcbiAgICAvLyBOb3QgbmVlZGVkIG9uIDw9IElFMTFcblxuICAgIGlmICghSUUxMU9yTGVzcykge1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgKGNzcyhjb250YWluZXIsICd0cmFuc2Zvcm0nKSAhPT0gJ25vbmUnIHx8IHJlbGF0aXZlVG9Ob25TdGF0aWNQYXJlbnQgJiYgY3NzKGNvbnRhaW5lciwgJ3Bvc2l0aW9uJykgIT09ICdzdGF0aWMnKSkge1xuICAgICAgICAgIHZhciBjb250YWluZXJSZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyBTZXQgcmVsYXRpdmUgdG8gZWRnZXMgb2YgcGFkZGluZyBib3ggb2YgY29udGFpbmVyXG5cbiAgICAgICAgICB0b3AgLT0gY29udGFpbmVyUmVjdC50b3AgKyBwYXJzZUludChjc3MoY29udGFpbmVyLCAnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICAgICAgICBsZWZ0IC09IGNvbnRhaW5lclJlY3QubGVmdCArIHBhcnNlSW50KGNzcyhjb250YWluZXIsICdib3JkZXItbGVmdC13aWR0aCcpKTtcbiAgICAgICAgICBib3R0b20gPSB0b3AgKyBlbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgIHJpZ2h0ID0gbGVmdCArIGVsUmVjdC53aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgICAgIH0gd2hpbGUgKGNvbnRhaW5lciA9IGNvbnRhaW5lci5wYXJlbnROb2RlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodW5kb1NjYWxlICYmIGVsICE9PSB3aW5kb3cpIHtcbiAgICAvLyBBZGp1c3QgZm9yIHNjYWxlKClcbiAgICB2YXIgZWxNYXRyaXggPSBtYXRyaXgoY29udGFpbmVyIHx8IGVsKSxcbiAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgc2NhbGVZID0gZWxNYXRyaXggJiYgZWxNYXRyaXguZDtcblxuICAgIGlmIChlbE1hdHJpeCkge1xuICAgICAgdG9wIC89IHNjYWxlWTtcbiAgICAgIGxlZnQgLz0gc2NhbGVYO1xuICAgICAgd2lkdGggLz0gc2NhbGVYO1xuICAgICAgaGVpZ2h0IC89IHNjYWxlWTtcbiAgICAgIGJvdHRvbSA9IHRvcCArIGhlaWdodDtcbiAgICAgIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiB0b3AsXG4gICAgbGVmdDogbGVmdCxcbiAgICBib3R0b206IGJvdHRvbSxcbiAgICByaWdodDogcmlnaHQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG4vKipcclxuICogQ2hlY2tzIGlmIGEgc2lkZSBvZiBhbiBlbGVtZW50IGlzIHNjcm9sbGVkIHBhc3QgYSBzaWRlIG9mIGl0cyBwYXJlbnRzXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWwgICAgICAgICAgIFRoZSBlbGVtZW50IHdobydzIHNpZGUgYmVpbmcgc2Nyb2xsZWQgb3V0IG9mIHZpZXcgaXMgaW4gcXVlc3Rpb25cclxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICBlbFNpZGUgICAgICAgU2lkZSBvZiB0aGUgZWxlbWVudCBpbiBxdWVzdGlvbiAoJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScpXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgcGFyZW50U2lkZSAgIFNpZGUgb2YgdGhlIHBhcmVudCBpbiBxdWVzdGlvbiAoJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScpXHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICAgICAgIFRoZSBwYXJlbnQgc2Nyb2xsIGVsZW1lbnQgdGhhdCB0aGUgZWwncyBzaWRlIGlzIHNjcm9sbGVkIHBhc3QsIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gc3VjaCBlbGVtZW50XHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzU2Nyb2xsZWRQYXN0KGVsLCBlbFNpZGUsIHBhcmVudFNpZGUpIHtcbiAgdmFyIHBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsLCB0cnVlKSxcbiAgICAgIGVsU2lkZVZhbCA9IGdldFJlY3QoZWwpW2VsU2lkZV07XG4gIC8qIGpzaGludCBib3NzOnRydWUgKi9cblxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgdmFyIHBhcmVudFNpZGVWYWwgPSBnZXRSZWN0KHBhcmVudClbcGFyZW50U2lkZV0sXG4gICAgICAgIHZpc2libGUgPSB2b2lkIDA7XG5cbiAgICBpZiAocGFyZW50U2lkZSA9PT0gJ3RvcCcgfHwgcGFyZW50U2lkZSA9PT0gJ2xlZnQnKSB7XG4gICAgICB2aXNpYmxlID0gZWxTaWRlVmFsID49IHBhcmVudFNpZGVWYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpc2libGUgPSBlbFNpZGVWYWwgPD0gcGFyZW50U2lkZVZhbDtcbiAgICB9XG5cbiAgICBpZiAoIXZpc2libGUpIHJldHVybiBwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSBicmVhaztcbiAgICBwYXJlbnQgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChwYXJlbnQsIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxyXG4gKiBHZXRzIG50aCBjaGlsZCBvZiBlbCwgaWdub3JpbmcgaGlkZGVuIGNoaWxkcmVuLCBzb3J0YWJsZSdzIGVsZW1lbnRzIChkb2VzIG5vdCBpZ25vcmUgY2xvbmUgaWYgaXQncyB2aXNpYmxlKVxyXG4gKiBhbmQgbm9uLWRyYWdnYWJsZSBlbGVtZW50c1xyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgVGhlIHBhcmVudCBlbGVtZW50XHJcbiAqIEBwYXJhbSAge051bWJlcn0gY2hpbGROdW0gICAgICBUaGUgaW5kZXggb2YgdGhlIGNoaWxkXHJcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyAgICAgICBQYXJlbnQgU29ydGFibGUncyBvcHRpb25zXHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgY2hpbGQgYXQgaW5kZXggY2hpbGROdW0sIG9yIG51bGwgaWYgbm90IGZvdW5kXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldENoaWxkKGVsLCBjaGlsZE51bSwgb3B0aW9ucykge1xuICB2YXIgY3VycmVudENoaWxkID0gMCxcbiAgICAgIGkgPSAwLFxuICAgICAgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcblxuICB3aGlsZSAoaSA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGlmIChjaGlsZHJlbltpXS5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScgJiYgY2hpbGRyZW5baV0gIT09IFNvcnRhYmxlLmdob3N0ICYmIGNoaWxkcmVuW2ldICE9PSBTb3J0YWJsZS5kcmFnZ2VkICYmIGNsb3Nlc3QoY2hpbGRyZW5baV0sIG9wdGlvbnMuZHJhZ2dhYmxlLCBlbCwgZmFsc2UpKSB7XG4gICAgICBpZiAoY3VycmVudENoaWxkID09PSBjaGlsZE51bSkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5baV07XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRDaGlsZCsrO1xuICAgIH1cblxuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXHJcbiAqIEdldHMgdGhlIGxhc3QgY2hpbGQgaW4gdGhlIGVsLCBpZ25vcmluZyBnaG9zdEVsIG9yIGludmlzaWJsZSBlbGVtZW50cyAoY2xvbmVzKVxyXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gZWwgICAgICAgUGFyZW50IGVsZW1lbnRcclxuICogQHBhcmFtICB7c2VsZWN0b3J9IHNlbGVjdG9yICAgIEFueSBvdGhlciBlbGVtZW50cyB0aGF0IHNob3VsZCBiZSBpZ25vcmVkXHJcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSAgICAgICAgICBUaGUgbGFzdCBjaGlsZCwgaWdub3JpbmcgZ2hvc3RFbFxyXG4gKi9cblxuXG5mdW5jdGlvbiBsYXN0Q2hpbGQoZWwsIHNlbGVjdG9yKSB7XG4gIHZhciBsYXN0ID0gZWwubGFzdEVsZW1lbnRDaGlsZDtcblxuICB3aGlsZSAobGFzdCAmJiAobGFzdCA9PT0gU29ydGFibGUuZ2hvc3QgfHwgY3NzKGxhc3QsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBzZWxlY3RvciAmJiAhbWF0Y2hlcyhsYXN0LCBzZWxlY3RvcikpKSB7XG4gICAgbGFzdCA9IGxhc3QucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgfVxuXG4gIHJldHVybiBsYXN0IHx8IG51bGw7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgYW4gZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudCBmb3IgYSBzZWxlY3RlZCBzZXQgb2ZcclxuICogZWxlbWVudHNcclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsXHJcbiAqIEBwYXJhbSAge3NlbGVjdG9yfSBzZWxlY3RvclxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGluZGV4KGVsLCBzZWxlY3Rvcikge1xuICB2YXIgaW5kZXggPSAwO1xuXG4gIGlmICghZWwgfHwgIWVsLnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgLyoganNoaW50IGJvc3M6dHJ1ZSAqL1xuXG5cbiAgd2hpbGUgKGVsID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIGlmIChlbC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnVEVNUExBVEUnICYmIGVsICE9PSBTb3J0YWJsZS5jbG9uZSAmJiAoIXNlbGVjdG9yIHx8IG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHNjcm9sbCBvZmZzZXQgb2YgdGhlIGdpdmVuIGVsZW1lbnQsIGFkZGVkIHdpdGggYWxsIHRoZSBzY3JvbGwgb2Zmc2V0cyBvZiBwYXJlbnQgZWxlbWVudHMuXHJcbiAqIFRoZSB2YWx1ZSBpcyByZXR1cm5lZCBpbiByZWFsIHBpeGVscy5cclxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGVsXHJcbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICAgICBPZmZzZXRzIGluIHRoZSBmb3JtYXQgb2YgW2xlZnQsIHRvcF1cclxuICovXG5cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZWwpIHtcbiAgdmFyIG9mZnNldExlZnQgPSAwLFxuICAgICAgb2Zmc2V0VG9wID0gMCxcbiAgICAgIHdpblNjcm9sbGVyID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuXG4gIGlmIChlbCkge1xuICAgIGRvIHtcbiAgICAgIHZhciBlbE1hdHJpeCA9IG1hdHJpeChlbCksXG4gICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBlbE1hdHJpeC5kO1xuICAgICAgb2Zmc2V0TGVmdCArPSBlbC5zY3JvbGxMZWZ0ICogc2NhbGVYO1xuICAgICAgb2Zmc2V0VG9wICs9IGVsLnNjcm9sbFRvcCAqIHNjYWxlWTtcbiAgICB9IHdoaWxlIChlbCAhPT0gd2luU2Nyb2xsZXIgJiYgKGVsID0gZWwucGFyZW50Tm9kZSkpO1xuICB9XG5cbiAgcmV0dXJuIFtvZmZzZXRMZWZ0LCBvZmZzZXRUb3BdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBvYmplY3Qgd2l0aGluIHRoZSBnaXZlbiBhcnJheVxyXG4gKiBAcGFyYW0gIHtBcnJheX0gYXJyICAgQXJyYXkgdGhhdCBtYXkgb3IgbWF5IG5vdCBob2xkIHRoZSBvYmplY3RcclxuICogQHBhcmFtICB7T2JqZWN0fSBvYmogIEFuIG9iamVjdCB0aGF0IGhhcyBhIGtleS12YWx1ZSBwYWlyIHVuaXF1ZSB0byBhbmQgaWRlbnRpY2FsIHRvIGEga2V5LXZhbHVlIHBhaXIgaW4gdGhlIG9iamVjdCB5b3Ugd2FudCB0byBmaW5kXHJcbiAqIEByZXR1cm4ge051bWJlcn0gICAgICBUaGUgaW5kZXggb2YgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXksIG9yIC0xXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGluZGV4T2ZPYmplY3QoYXJyLCBvYmopIHtcbiAgZm9yICh2YXIgaSBpbiBhcnIpIHtcbiAgICBpZiAoIWFyci5oYXNPd25Qcm9wZXJ0eShpKSkgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IGFycltpXVtrZXldKSByZXR1cm4gTnVtYmVyKGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWwsIGluY2x1ZGVTZWxmKSB7XG4gIC8vIHNraXAgdG8gd2luZG93XG4gIGlmICghZWwgfHwgIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIGVsZW0gPSBlbDtcbiAgdmFyIGdvdFNlbGYgPSBmYWxzZTtcblxuICBkbyB7XG4gICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBnZXQgZWxlbSBjc3MgaWYgaXQgaXNuJ3QgZXZlbiBvdmVyZmxvd2luZyBpbiB0aGUgZmlyc3QgcGxhY2UgKHBlcmZvcm1hbmNlKVxuICAgIGlmIChlbGVtLmNsaWVudFdpZHRoIDwgZWxlbS5zY3JvbGxXaWR0aCB8fCBlbGVtLmNsaWVudEhlaWdodCA8IGVsZW0uc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB2YXIgZWxlbUNTUyA9IGNzcyhlbGVtKTtcblxuICAgICAgaWYgKGVsZW0uY2xpZW50V2lkdGggPCBlbGVtLnNjcm9sbFdpZHRoICYmIChlbGVtQ1NTLm92ZXJmbG93WCA9PSAnYXV0bycgfHwgZWxlbUNTUy5vdmVyZmxvd1ggPT0gJ3Njcm9sbCcpIHx8IGVsZW0uY2xpZW50SGVpZ2h0IDwgZWxlbS5zY3JvbGxIZWlnaHQgJiYgKGVsZW1DU1Mub3ZlcmZsb3dZID09ICdhdXRvJyB8fCBlbGVtQ1NTLm92ZXJmbG93WSA9PSAnc2Nyb2xsJykpIHtcbiAgICAgICAgaWYgKCFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCB8fCBlbGVtID09PSBkb2N1bWVudC5ib2R5KSByZXR1cm4gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICBpZiAoZ290U2VsZiB8fCBpbmNsdWRlU2VsZikgcmV0dXJuIGVsZW07XG4gICAgICAgIGdvdFNlbGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG5cbiAgfSB3aGlsZSAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSk7XG5cbiAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGRzdCwgc3JjKSB7XG4gIGlmIChkc3QgJiYgc3JjKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKHNyYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdDtcbn1cblxuZnVuY3Rpb24gaXNSZWN0RXF1YWwocmVjdDEsIHJlY3QyKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKHJlY3QxLnRvcCkgPT09IE1hdGgucm91bmQocmVjdDIudG9wKSAmJiBNYXRoLnJvdW5kKHJlY3QxLmxlZnQpID09PSBNYXRoLnJvdW5kKHJlY3QyLmxlZnQpICYmIE1hdGgucm91bmQocmVjdDEuaGVpZ2h0KSA9PT0gTWF0aC5yb3VuZChyZWN0Mi5oZWlnaHQpICYmIE1hdGgucm91bmQocmVjdDEud2lkdGgpID09PSBNYXRoLnJvdW5kKHJlY3QyLndpZHRoKTtcbn1cblxudmFyIF90aHJvdHRsZVRpbWVvdXQ7XG5cbmZ1bmN0aW9uIHRocm90dGxlKGNhbGxiYWNrLCBtcykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghX3Rocm90dGxlVGltZW91dCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChfdGhpcywgYXJnc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjay5hcHBseShfdGhpcywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIF90aHJvdHRsZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3Rocm90dGxlVGltZW91dCA9IHZvaWQgMDtcbiAgICAgIH0sIG1zKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFRocm90dGxlKCkge1xuICBjbGVhclRpbWVvdXQoX3Rocm90dGxlVGltZW91dCk7XG4gIF90aHJvdHRsZVRpbWVvdXQgPSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbEJ5KGVsLCB4LCB5KSB7XG4gIGVsLnNjcm9sbExlZnQgKz0geDtcbiAgZWwuc2Nyb2xsVG9wICs9IHk7XG59XG5cbmZ1bmN0aW9uIGNsb25lKGVsKSB7XG4gIHZhciBQb2x5bWVyID0gd2luZG93LlBvbHltZXI7XG4gIHZhciAkID0gd2luZG93LmpRdWVyeSB8fCB3aW5kb3cuWmVwdG87XG5cbiAgaWYgKFBvbHltZXIgJiYgUG9seW1lci5kb20pIHtcbiAgICByZXR1cm4gUG9seW1lci5kb20oZWwpLmNsb25lTm9kZSh0cnVlKTtcbiAgfSBlbHNlIGlmICgkKSB7XG4gICAgcmV0dXJuICQoZWwpLmNsb25lKHRydWUpWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UmVjdChlbCwgcmVjdCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICBjc3MoZWwsICd0b3AnLCByZWN0LnRvcCk7XG4gIGNzcyhlbCwgJ2xlZnQnLCByZWN0LmxlZnQpO1xuICBjc3MoZWwsICd3aWR0aCcsIHJlY3Qud2lkdGgpO1xuICBjc3MoZWwsICdoZWlnaHQnLCByZWN0LmhlaWdodCk7XG59XG5cbmZ1bmN0aW9uIHVuc2V0UmVjdChlbCkge1xuICBjc3MoZWwsICdwb3NpdGlvbicsICcnKTtcbiAgY3NzKGVsLCAndG9wJywgJycpO1xuICBjc3MoZWwsICdsZWZ0JywgJycpO1xuICBjc3MoZWwsICd3aWR0aCcsICcnKTtcbiAgY3NzKGVsLCAnaGVpZ2h0JywgJycpO1xufVxuXG52YXIgZXhwYW5kbyA9ICdTb3J0YWJsZScgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuZnVuY3Rpb24gQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkge1xuICB2YXIgYW5pbWF0aW9uU3RhdGVzID0gW10sXG4gICAgICBhbmltYXRpb25DYWxsYmFja0lkO1xuICByZXR1cm4ge1xuICAgIGNhcHR1cmVBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gY2FwdHVyZUFuaW1hdGlvblN0YXRlKCkge1xuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5hbmltYXRpb24pIHJldHVybjtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZHJlbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY3NzKGNoaWxkLCAnZGlzcGxheScpID09PSAnbm9uZScgfHwgY2hpbGQgPT09IFNvcnRhYmxlLmdob3N0KSByZXR1cm47XG4gICAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHtcbiAgICAgICAgICB0YXJnZXQ6IGNoaWxkLFxuICAgICAgICAgIHJlY3Q6IGdldFJlY3QoY2hpbGQpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBmcm9tUmVjdCA9IF9vYmplY3RTcHJlYWQoe30sIGFuaW1hdGlvblN0YXRlc1thbmltYXRpb25TdGF0ZXMubGVuZ3RoIC0gMV0ucmVjdCk7IC8vIElmIGFuaW1hdGluZzogY29tcGVuc2F0ZSBmb3IgY3VycmVudCBhbmltYXRpb25cblxuXG4gICAgICAgIGlmIChjaGlsZC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICB2YXIgY2hpbGRNYXRyaXggPSBtYXRyaXgoY2hpbGQsIHRydWUpO1xuXG4gICAgICAgICAgaWYgKGNoaWxkTWF0cml4KSB7XG4gICAgICAgICAgICBmcm9tUmVjdC50b3AgLT0gY2hpbGRNYXRyaXguZjtcbiAgICAgICAgICAgIGZyb21SZWN0LmxlZnQgLT0gY2hpbGRNYXRyaXguZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZC5mcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBhZGRBbmltYXRpb25TdGF0ZTogZnVuY3Rpb24gYWRkQW5pbWF0aW9uU3RhdGUoc3RhdGUpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICB9LFxuICAgIHJlbW92ZUFuaW1hdGlvblN0YXRlOiBmdW5jdGlvbiByZW1vdmVBbmltYXRpb25TdGF0ZSh0YXJnZXQpIHtcbiAgICAgIGFuaW1hdGlvblN0YXRlcy5zcGxpY2UoaW5kZXhPZk9iamVjdChhbmltYXRpb25TdGF0ZXMsIHtcbiAgICAgICAgdGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pLCAxKTtcbiAgICB9LFxuICAgIGFuaW1hdGVBbGw6IGZ1bmN0aW9uIGFuaW1hdGVBbGwoY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQoYW5pbWF0aW9uQ2FsbGJhY2tJZCk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFuaW1hdGluZyA9IGZhbHNlLFxuICAgICAgICAgIGFuaW1hdGlvblRpbWUgPSAwO1xuICAgICAgYW5pbWF0aW9uU3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciB0aW1lID0gMCxcbiAgICAgICAgICAgIHRhcmdldCA9IHN0YXRlLnRhcmdldCxcbiAgICAgICAgICAgIGZyb21SZWN0ID0gdGFyZ2V0LmZyb21SZWN0LFxuICAgICAgICAgICAgdG9SZWN0ID0gZ2V0UmVjdCh0YXJnZXQpLFxuICAgICAgICAgICAgcHJldkZyb21SZWN0ID0gdGFyZ2V0LnByZXZGcm9tUmVjdCxcbiAgICAgICAgICAgIHByZXZUb1JlY3QgPSB0YXJnZXQucHJldlRvUmVjdCxcbiAgICAgICAgICAgIGFuaW1hdGluZ1JlY3QgPSBzdGF0ZS5yZWN0LFxuICAgICAgICAgICAgdGFyZ2V0TWF0cml4ID0gbWF0cml4KHRhcmdldCwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHRhcmdldE1hdHJpeCkge1xuICAgICAgICAgIC8vIENvbXBlbnNhdGUgZm9yIGN1cnJlbnQgYW5pbWF0aW9uXG4gICAgICAgICAgdG9SZWN0LnRvcCAtPSB0YXJnZXRNYXRyaXguZjtcbiAgICAgICAgICB0b1JlY3QubGVmdCAtPSB0YXJnZXRNYXRyaXguZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldC50b1JlY3QgPSB0b1JlY3Q7XG5cbiAgICAgICAgaWYgKHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24pIHtcbiAgICAgICAgICAvLyBDb3VsZCBhbHNvIGNoZWNrIGlmIGFuaW1hdGluZ1JlY3QgaXMgYmV0d2VlbiBmcm9tUmVjdCBhbmQgdG9SZWN0XG4gICAgICAgICAgaWYgKGlzUmVjdEVxdWFsKHByZXZGcm9tUmVjdCwgdG9SZWN0KSAmJiAhaXNSZWN0RXF1YWwoZnJvbVJlY3QsIHRvUmVjdCkgJiYgLy8gTWFrZSBzdXJlIGFuaW1hdGluZ1JlY3QgaXMgb24gbGluZSBiZXR3ZWVuIHRvUmVjdCAmIGZyb21SZWN0XG4gICAgICAgICAgKGFuaW1hdGluZ1JlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoYW5pbWF0aW5nUmVjdC5sZWZ0IC0gdG9SZWN0LmxlZnQpID09PSAoZnJvbVJlY3QudG9wIC0gdG9SZWN0LnRvcCkgLyAoZnJvbVJlY3QubGVmdCAtIHRvUmVjdC5sZWZ0KSkge1xuICAgICAgICAgICAgLy8gSWYgcmV0dXJuaW5nIHRvIHNhbWUgcGxhY2UgYXMgc3RhcnRlZCBmcm9tIGFuaW1hdGlvbiBhbmQgb24gc2FtZSBheGlzXG4gICAgICAgICAgICB0aW1lID0gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgcHJldkZyb21SZWN0LCBwcmV2VG9SZWN0LCBfdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gaWYgZnJvbVJlY3QgIT0gdG9SZWN0OiBhbmltYXRlXG5cblxuICAgICAgICBpZiAoIWlzUmVjdEVxdWFsKHRvUmVjdCwgZnJvbVJlY3QpKSB7XG4gICAgICAgICAgdGFyZ2V0LnByZXZGcm9tUmVjdCA9IGZyb21SZWN0O1xuICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gdG9SZWN0O1xuXG4gICAgICAgICAgaWYgKCF0aW1lKSB7XG4gICAgICAgICAgICB0aW1lID0gX3RoaXMub3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMuYW5pbWF0ZSh0YXJnZXQsIGFuaW1hdGluZ1JlY3QsIHRvUmVjdCwgdGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgIGFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgYW5pbWF0aW9uVGltZSA9IE1hdGgubWF4KGFuaW1hdGlvblRpbWUsIHRpbWUpO1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0aW9uUmVzZXRUaW1lcik7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGlvblJlc2V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRhcmdldC5hbmltYXRpb25UaW1lID0gMDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2RnJvbVJlY3QgPSBudWxsO1xuICAgICAgICAgICAgdGFyZ2V0LmZyb21SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC5wcmV2VG9SZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgIH0sIHRpbWUpO1xuICAgICAgICAgIHRhcmdldC50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSB0aW1lO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsZWFyVGltZW91dChhbmltYXRpb25DYWxsYmFja0lkKTtcblxuICAgICAgaWYgKCFhbmltYXRpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGlvbkNhbGxiYWNrSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICB9LCBhbmltYXRpb25UaW1lKTtcbiAgICAgIH1cblxuICAgICAgYW5pbWF0aW9uU3RhdGVzID0gW107XG4gICAgfSxcbiAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKHRhcmdldCwgY3VycmVudFJlY3QsIHRvUmVjdCwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICcnKTtcbiAgICAgICAgdmFyIGVsTWF0cml4ID0gbWF0cml4KHRoaXMuZWwpLFxuICAgICAgICAgICAgc2NhbGVYID0gZWxNYXRyaXggJiYgZWxNYXRyaXguYSxcbiAgICAgICAgICAgIHNjYWxlWSA9IGVsTWF0cml4ICYmIGVsTWF0cml4LmQsXG4gICAgICAgICAgICB0cmFuc2xhdGVYID0gKGN1cnJlbnRSZWN0LmxlZnQgLSB0b1JlY3QubGVmdCkgLyAoc2NhbGVYIHx8IDEpLFxuICAgICAgICAgICAgdHJhbnNsYXRlWSA9IChjdXJyZW50UmVjdC50b3AgLSB0b1JlY3QudG9wKSAvIChzY2FsZVkgfHwgMSk7XG4gICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gISF0cmFuc2xhdGVYO1xuICAgICAgICB0YXJnZXQuYW5pbWF0aW5nWSA9ICEhdHJhbnNsYXRlWTtcbiAgICAgICAgY3NzKHRhcmdldCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUzZCgnICsgdHJhbnNsYXRlWCArICdweCwnICsgdHJhbnNsYXRlWSArICdweCwwKScpO1xuICAgICAgICByZXBhaW50KHRhcmdldCk7IC8vIHJlcGFpbnRcblxuICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICd0cmFuc2Zvcm0gJyArIGR1cmF0aW9uICsgJ21zJyArICh0aGlzLm9wdGlvbnMuZWFzaW5nID8gJyAnICsgdGhpcy5vcHRpb25zLmVhc2luZyA6ICcnKSk7XG4gICAgICAgIGNzcyh0YXJnZXQsICd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICAgIHR5cGVvZiB0YXJnZXQuYW5pbWF0ZWQgPT09ICdudW1iZXInICYmIGNsZWFyVGltZW91dCh0YXJnZXQuYW5pbWF0ZWQpO1xuICAgICAgICB0YXJnZXQuYW5pbWF0ZWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNpdGlvbicsICcnKTtcbiAgICAgICAgICBjc3ModGFyZ2V0LCAndHJhbnNmb3JtJywgJycpO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRlZCA9IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5hbmltYXRpbmdYID0gZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFuaW1hdGluZ1kgPSBmYWxzZTtcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVwYWludCh0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldC5vZmZzZXRXaWR0aDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUmVhbFRpbWUoYW5pbWF0aW5nUmVjdCwgZnJvbVJlY3QsIHRvUmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGZyb21SZWN0LnRvcCAtIGFuaW1hdGluZ1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSBhbmltYXRpbmdSZWN0LmxlZnQsIDIpKSAvIE1hdGguc3FydChNYXRoLnBvdyhmcm9tUmVjdC50b3AgLSB0b1JlY3QudG9wLCAyKSArIE1hdGgucG93KGZyb21SZWN0LmxlZnQgLSB0b1JlY3QubGVmdCwgMikpICogb3B0aW9ucy5hbmltYXRpb247XG59XG5cbnZhciBwbHVnaW5zID0gW107XG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXRpYWxpemVCeURlZmF1bHQ6IHRydWVcbn07XG52YXIgUGx1Z2luTWFuYWdlciA9IHtcbiAgbW91bnQ6IGZ1bmN0aW9uIG1vdW50KHBsdWdpbikge1xuICAgIC8vIFNldCBkZWZhdWx0IHN0YXRpYyBwcm9wZXJ0aWVzXG4gICAgZm9yICh2YXIgb3B0aW9uIGluIGRlZmF1bHRzKSB7XG4gICAgICBpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkob3B0aW9uKSAmJiAhKG9wdGlvbiBpbiBwbHVnaW4pKSB7XG4gICAgICAgIHBsdWdpbltvcHRpb25dID0gZGVmYXVsdHNbb3B0aW9uXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgfSxcbiAgcGx1Z2luRXZlbnQ6IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUsIGV2dCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmV2ZW50Q2FuY2VsZWQgPSBmYWxzZTtcblxuICAgIGV2dC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5ldmVudENhbmNlbGVkID0gdHJ1ZTtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50TmFtZUdsb2JhbCA9IGV2ZW50TmFtZSArICdHbG9iYWwnO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBpZiAoIXNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSkgcmV0dXJuOyAvLyBGaXJlIGdsb2JhbCBldmVudHMgaWYgaXQgZXhpc3RzIGluIHRoaXMgc29ydGFibGVcblxuICAgICAgaWYgKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKSB7XG4gICAgICAgIHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXVtldmVudE5hbWVHbG9iYWxdKF9vYmplY3RTcHJlYWQoe1xuICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZVxuICAgICAgICB9LCBldnQpKTtcbiAgICAgIH0gLy8gT25seSBmaXJlIHBsdWdpbiBldmVudCBpZiBwbHVnaW4gaXMgZW5hYmxlZCBpbiB0aGlzIHNvcnRhYmxlLFxuICAgICAgLy8gYW5kIHBsdWdpbiBoYXMgZXZlbnQgZGVmaW5lZFxuXG5cbiAgICAgIGlmIChzb3J0YWJsZS5vcHRpb25zW3BsdWdpbi5wbHVnaW5OYW1lXSAmJiBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXSkge1xuICAgICAgICBzb3J0YWJsZVtwbHVnaW4ucGx1Z2luTmFtZV1bZXZlbnROYW1lXShfb2JqZWN0U3ByZWFkKHtcbiAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGVcbiAgICAgICAgfSwgZXZ0KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGluaXRpYWxpemVQbHVnaW5zOiBmdW5jdGlvbiBpbml0aWFsaXplUGx1Z2lucyhzb3J0YWJsZSwgZWwsIGRlZmF1bHRzLCBvcHRpb25zKSB7XG4gICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIHZhciBwbHVnaW5OYW1lID0gcGx1Z2luLnBsdWdpbk5hbWU7XG4gICAgICBpZiAoIXNvcnRhYmxlLm9wdGlvbnNbcGx1Z2luTmFtZV0gJiYgIXBsdWdpbi5pbml0aWFsaXplQnlEZWZhdWx0KSByZXR1cm47XG4gICAgICB2YXIgaW5pdGlhbGl6ZWQgPSBuZXcgcGx1Z2luKHNvcnRhYmxlLCBlbCwgc29ydGFibGUub3B0aW9ucyk7XG4gICAgICBpbml0aWFsaXplZC5zb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgaW5pdGlhbGl6ZWQub3B0aW9ucyA9IHNvcnRhYmxlLm9wdGlvbnM7XG4gICAgICBzb3J0YWJsZVtwbHVnaW5OYW1lXSA9IGluaXRpYWxpemVkOyAvLyBBZGQgZGVmYXVsdCBvcHRpb25zIGZyb20gcGx1Z2luXG5cbiAgICAgIF9leHRlbmRzKGRlZmF1bHRzLCBpbml0aWFsaXplZC5kZWZhdWx0cyk7XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBvcHRpb24gaW4gc29ydGFibGUub3B0aW9ucykge1xuICAgICAgaWYgKCFzb3J0YWJsZS5vcHRpb25zLmhhc093blByb3BlcnR5KG9wdGlvbikpIGNvbnRpbnVlO1xuICAgICAgdmFyIG1vZGlmaWVkID0gdGhpcy5tb2RpZnlPcHRpb24oc29ydGFibGUsIG9wdGlvbiwgc29ydGFibGUub3B0aW9uc1tvcHRpb25dKTtcblxuICAgICAgaWYgKHR5cGVvZiBtb2RpZmllZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc29ydGFibGUub3B0aW9uc1tvcHRpb25dID0gbW9kaWZpZWQ7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBnZXRFdmVudFByb3BlcnRpZXM6IGZ1bmN0aW9uIGdldEV2ZW50UHJvcGVydGllcyhuYW1lLCBzb3J0YWJsZSkge1xuICAgIHZhciBldmVudFByb3BlcnRpZXMgPSB7fTtcbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW4uZXZlbnRQcm9wZXJ0aWVzICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG5cbiAgICAgIF9leHRlbmRzKGV2ZW50UHJvcGVydGllcywgcGx1Z2luLmV2ZW50UHJvcGVydGllcy5jYWxsKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSwgbmFtZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBldmVudFByb3BlcnRpZXM7XG4gIH0sXG4gIG1vZGlmeU9wdGlvbjogZnVuY3Rpb24gbW9kaWZ5T3B0aW9uKHNvcnRhYmxlLCBuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBtb2RpZmllZFZhbHVlO1xuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAvLyBQbHVnaW4gbXVzdCBleGlzdCBvbiB0aGUgU29ydGFibGVcbiAgICAgIGlmICghc29ydGFibGVbcGx1Z2luLnBsdWdpbk5hbWVdKSByZXR1cm47IC8vIElmIHN0YXRpYyBvcHRpb24gbGlzdGVuZXIgZXhpc3RzIGZvciB0aGlzIG9wdGlvbiwgY2FsbCBpbiB0aGUgY29udGV4dCBvZiB0aGUgU29ydGFibGUncyBpbnN0YW5jZSBvZiB0aGlzIHBsdWdpblxuXG4gICAgICBpZiAocGx1Z2luLm9wdGlvbkxpc3RlbmVycyAmJiB0eXBlb2YgcGx1Z2luLm9wdGlvbkxpc3RlbmVyc1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtb2RpZmllZFZhbHVlID0gcGx1Z2luLm9wdGlvbkxpc3RlbmVyc1tuYW1lXS5jYWxsKHNvcnRhYmxlW3BsdWdpbi5wbHVnaW5OYW1lXSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtb2RpZmllZFZhbHVlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KF9yZWYpIHtcbiAgdmFyIHNvcnRhYmxlID0gX3JlZi5zb3J0YWJsZSxcbiAgICAgIHJvb3RFbCA9IF9yZWYucm9vdEVsLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIHRhcmdldEVsID0gX3JlZi50YXJnZXRFbCxcbiAgICAgIGNsb25lRWwgPSBfcmVmLmNsb25lRWwsXG4gICAgICB0b0VsID0gX3JlZi50b0VsLFxuICAgICAgZnJvbUVsID0gX3JlZi5mcm9tRWwsXG4gICAgICBvbGRJbmRleCA9IF9yZWYub2xkSW5kZXgsXG4gICAgICBuZXdJbmRleCA9IF9yZWYubmV3SW5kZXgsXG4gICAgICBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYub2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IF9yZWYubmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgICBvcmlnaW5hbEV2ZW50ID0gX3JlZi5vcmlnaW5hbEV2ZW50LFxuICAgICAgcHV0U29ydGFibGUgPSBfcmVmLnB1dFNvcnRhYmxlLFxuICAgICAgZXh0cmFFdmVudFByb3BlcnRpZXMgPSBfcmVmLmV4dHJhRXZlbnRQcm9wZXJ0aWVzO1xuICBzb3J0YWJsZSA9IHNvcnRhYmxlIHx8IHJvb3RFbCAmJiByb290RWxbZXhwYW5kb107XG4gIGlmICghc29ydGFibGUpIHJldHVybjtcbiAgdmFyIGV2dCxcbiAgICAgIG9wdGlvbnMgPSBzb3J0YWJsZS5vcHRpb25zLFxuICAgICAgb25OYW1lID0gJ29uJyArIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cigxKTsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KG5hbWUsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZ0LmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIGV2dC50byA9IHRvRWwgfHwgcm9vdEVsO1xuICBldnQuZnJvbSA9IGZyb21FbCB8fCByb290RWw7XG4gIGV2dC5pdGVtID0gdGFyZ2V0RWwgfHwgcm9vdEVsO1xuICBldnQuY2xvbmUgPSBjbG9uZUVsO1xuICBldnQub2xkSW5kZXggPSBvbGRJbmRleDtcbiAgZXZ0Lm5ld0luZGV4ID0gbmV3SW5kZXg7XG4gIGV2dC5vbGREcmFnZ2FibGVJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICBldnQubmV3RHJhZ2dhYmxlSW5kZXggPSBuZXdEcmFnZ2FibGVJbmRleDtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBldnQucHVsbE1vZGUgPSBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLmxhc3RQdXRNb2RlIDogdW5kZWZpbmVkO1xuXG4gIHZhciBhbGxFdmVudFByb3BlcnRpZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBleHRyYUV2ZW50UHJvcGVydGllcywgUGx1Z2luTWFuYWdlci5nZXRFdmVudFByb3BlcnRpZXMobmFtZSwgc29ydGFibGUpKTtcblxuICBmb3IgKHZhciBvcHRpb24gaW4gYWxsRXZlbnRQcm9wZXJ0aWVzKSB7XG4gICAgZXZ0W29wdGlvbl0gPSBhbGxFdmVudFByb3BlcnRpZXNbb3B0aW9uXTtcbiAgfVxuXG4gIGlmIChyb290RWwpIHtcbiAgICByb290RWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnNbb25OYW1lXSkge1xuICAgIG9wdGlvbnNbb25OYW1lXS5jYWxsKHNvcnRhYmxlLCBldnQpO1xuICB9XG59XG5cbnZhciBwbHVnaW5FdmVudCA9IGZ1bmN0aW9uIHBsdWdpbkV2ZW50KGV2ZW50TmFtZSwgc29ydGFibGUpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgb3JpZ2luYWxFdmVudCA9IF9yZWYuZXZ0LFxuICAgICAgZGF0YSA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJldnRcIl0pO1xuXG4gIFBsdWdpbk1hbmFnZXIucGx1Z2luRXZlbnQuYmluZChTb3J0YWJsZSkoZXZlbnROYW1lLCBzb3J0YWJsZSwgX29iamVjdFNwcmVhZCh7XG4gICAgZHJhZ0VsOiBkcmFnRWwsXG4gICAgcGFyZW50RWw6IHBhcmVudEVsLFxuICAgIGdob3N0RWw6IGdob3N0RWwsXG4gICAgcm9vdEVsOiByb290RWwsXG4gICAgbmV4dEVsOiBuZXh0RWwsXG4gICAgbGFzdERvd25FbDogbGFzdERvd25FbCxcbiAgICBjbG9uZUVsOiBjbG9uZUVsLFxuICAgIGNsb25lSGlkZGVuOiBjbG9uZUhpZGRlbixcbiAgICBkcmFnU3RhcnRlZDogbW92ZWQsXG4gICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlLFxuICAgIGFjdGl2ZVNvcnRhYmxlOiBTb3J0YWJsZS5hY3RpdmUsXG4gICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudCxcbiAgICBvbGRJbmRleDogb2xkSW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXg6IG9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgaGlkZUdob3N0Rm9yVGFyZ2V0OiBfaGlkZUdob3N0Rm9yVGFyZ2V0LFxuICAgIHVuaGlkZUdob3N0Rm9yVGFyZ2V0OiBfdW5oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgY2xvbmVOb3dIaWRkZW46IGZ1bmN0aW9uIGNsb25lTm93SGlkZGVuKCkge1xuICAgICAgY2xvbmVIaWRkZW4gPSB0cnVlO1xuICAgIH0sXG4gICAgY2xvbmVOb3dTaG93bjogZnVuY3Rpb24gY2xvbmVOb3dTaG93bigpIHtcbiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7XG4gICAgfSxcbiAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQ6IGZ1bmN0aW9uIGRpc3BhdGNoU29ydGFibGVFdmVudChuYW1lKSB7XG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogb3JpZ2luYWxFdmVudFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBkYXRhKSk7XG59O1xuXG5mdW5jdGlvbiBfZGlzcGF0Y2hFdmVudChpbmZvKSB7XG4gIGRpc3BhdGNoRXZlbnQoX29iamVjdFNwcmVhZCh7XG4gICAgcHV0U29ydGFibGU6IHB1dFNvcnRhYmxlLFxuICAgIGNsb25lRWw6IGNsb25lRWwsXG4gICAgdGFyZ2V0RWw6IGRyYWdFbCxcbiAgICByb290RWw6IHJvb3RFbCxcbiAgICBvbGRJbmRleDogb2xkSW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXg6IG9sZERyYWdnYWJsZUluZGV4LFxuICAgIG5ld0luZGV4OiBuZXdJbmRleCxcbiAgICBuZXdEcmFnZ2FibGVJbmRleDogbmV3RHJhZ2dhYmxlSW5kZXhcbiAgfSwgaW5mbykpO1xufVxuXG52YXIgZHJhZ0VsLFxuICAgIHBhcmVudEVsLFxuICAgIGdob3N0RWwsXG4gICAgcm9vdEVsLFxuICAgIG5leHRFbCxcbiAgICBsYXN0RG93bkVsLFxuICAgIGNsb25lRWwsXG4gICAgY2xvbmVIaWRkZW4sXG4gICAgb2xkSW5kZXgsXG4gICAgbmV3SW5kZXgsXG4gICAgb2xkRHJhZ2dhYmxlSW5kZXgsXG4gICAgbmV3RHJhZ2dhYmxlSW5kZXgsXG4gICAgYWN0aXZlR3JvdXAsXG4gICAgcHV0U29ydGFibGUsXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlLFxuICAgIGlnbm9yZU5leHRDbGljayA9IGZhbHNlLFxuICAgIHNvcnRhYmxlcyA9IFtdLFxuICAgIHRhcEV2dCxcbiAgICB0b3VjaEV2dCxcbiAgICBsYXN0RHgsXG4gICAgbGFzdER5LFxuICAgIHRhcERpc3RhbmNlTGVmdCxcbiAgICB0YXBEaXN0YW5jZVRvcCxcbiAgICBtb3ZlZCxcbiAgICBsYXN0VGFyZ2V0LFxuICAgIGxhc3REaXJlY3Rpb24sXG4gICAgcGFzdEZpcnN0SW52ZXJ0VGhyZXNoID0gZmFsc2UsXG4gICAgaXNDaXJjdW1zdGFudGlhbEludmVydCA9IGZhbHNlLFxuICAgIHRhcmdldE1vdmVEaXN0YW5jZSxcbiAgICAvLyBGb3IgcG9zaXRpb25pbmcgZ2hvc3QgYWJzb2x1dGVseVxuZ2hvc3RSZWxhdGl2ZVBhcmVudCxcbiAgICBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbCA9IFtdLFxuICAgIC8vIChsZWZ0LCB0b3ApXG5fc2lsZW50ID0gZmFsc2UsXG4gICAgc2F2ZWRJbnB1dENoZWNrZWQgPSBbXTtcbi8qKiBAY29uc3QgKi9cblxudmFyIGRvY3VtZW50RXhpc3RzID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcbiAgICBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSA9IElPUyxcbiAgICBDU1NGbG9hdFByb3BlcnR5ID0gRWRnZSB8fCBJRTExT3JMZXNzID8gJ2Nzc0Zsb2F0JyA6ICdmbG9hdCcsXG4gICAgLy8gVGhpcyB3aWxsIG5vdCBwYXNzIGZvciBJRTksIGJlY2F1c2UgSUU5IERuRCBvbmx5IHdvcmtzIG9uIGFuY2hvcnNcbnN1cHBvcnREcmFnZ2FibGUgPSBkb2N1bWVudEV4aXN0cyAmJiAhQ2hyb21lRm9yQW5kcm9pZCAmJiAhSU9TICYmICdkcmFnZ2FibGUnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgIHN1cHBvcnRDc3NQb2ludGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIWRvY3VtZW50RXhpc3RzKSByZXR1cm47IC8vIGZhbHNlIHdoZW4gPD0gSUUxMVxuXG4gIGlmIChJRTExT3JMZXNzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgneCcpO1xuICBlbC5zdHlsZS5jc3NUZXh0ID0gJ3BvaW50ZXItZXZlbnRzOmF1dG8nO1xuICByZXR1cm4gZWwuc3R5bGUucG9pbnRlckV2ZW50cyA9PT0gJ2F1dG8nO1xufSgpLFxuICAgIF9kZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCBvcHRpb25zKSB7XG4gIHZhciBlbENTUyA9IGNzcyhlbCksXG4gICAgICBlbFdpZHRoID0gcGFyc2VJbnQoZWxDU1Mud2lkdGgpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ0xlZnQpIC0gcGFyc2VJbnQoZWxDU1MucGFkZGluZ1JpZ2h0KSAtIHBhcnNlSW50KGVsQ1NTLmJvcmRlckxlZnRXaWR0aCkgLSBwYXJzZUludChlbENTUy5ib3JkZXJSaWdodFdpZHRoKSxcbiAgICAgIGNoaWxkMSA9IGdldENoaWxkKGVsLCAwLCBvcHRpb25zKSxcbiAgICAgIGNoaWxkMiA9IGdldENoaWxkKGVsLCAxLCBvcHRpb25zKSxcbiAgICAgIGZpcnN0Q2hpbGRDU1MgPSBjaGlsZDEgJiYgY3NzKGNoaWxkMSksXG4gICAgICBzZWNvbmRDaGlsZENTUyA9IGNoaWxkMiAmJiBjc3MoY2hpbGQyKSxcbiAgICAgIGZpcnN0Q2hpbGRXaWR0aCA9IGZpcnN0Q2hpbGRDU1MgJiYgcGFyc2VJbnQoZmlyc3RDaGlsZENTUy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KGZpcnN0Q2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDEpLndpZHRoLFxuICAgICAgc2Vjb25kQ2hpbGRXaWR0aCA9IHNlY29uZENoaWxkQ1NTICYmIHBhcnNlSW50KHNlY29uZENoaWxkQ1NTLm1hcmdpbkxlZnQpICsgcGFyc2VJbnQoc2Vjb25kQ2hpbGRDU1MubWFyZ2luUmlnaHQpICsgZ2V0UmVjdChjaGlsZDIpLndpZHRoO1xuXG4gIGlmIChlbENTUy5kaXNwbGF5ID09PSAnZmxleCcpIHtcbiAgICByZXR1cm4gZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbicgfHwgZWxDU1MuZmxleERpcmVjdGlvbiA9PT0gJ2NvbHVtbi1yZXZlcnNlJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoZWxDU1MuZGlzcGxheSA9PT0gJ2dyaWQnKSB7XG4gICAgcmV0dXJuIGVsQ1NTLmdyaWRUZW1wbGF0ZUNvbHVtbnMuc3BsaXQoJyAnKS5sZW5ndGggPD0gMSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICBpZiAoY2hpbGQxICYmIGZpcnN0Q2hpbGRDU1NbXCJmbG9hdFwiXSAmJiBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gIT09ICdub25lJykge1xuICAgIHZhciB0b3VjaGluZ1NpZGVDaGlsZDIgPSBmaXJzdENoaWxkQ1NTW1wiZmxvYXRcIl0gPT09ICdsZWZ0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgcmV0dXJuIGNoaWxkMiAmJiAoc2Vjb25kQ2hpbGRDU1MuY2xlYXIgPT09ICdib3RoJyB8fCBzZWNvbmRDaGlsZENTUy5jbGVhciA9PT0gdG91Y2hpbmdTaWRlQ2hpbGQyKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gIH1cblxuICByZXR1cm4gY2hpbGQxICYmIChmaXJzdENoaWxkQ1NTLmRpc3BsYXkgPT09ICdibG9jaycgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAnZmxleCcgfHwgZmlyc3RDaGlsZENTUy5kaXNwbGF5ID09PSAndGFibGUnIHx8IGZpcnN0Q2hpbGRDU1MuZGlzcGxheSA9PT0gJ2dyaWQnIHx8IGZpcnN0Q2hpbGRXaWR0aCA+PSBlbFdpZHRoICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgfHwgY2hpbGQyICYmIGVsQ1NTW0NTU0Zsb2F0UHJvcGVydHldID09PSAnbm9uZScgJiYgZmlyc3RDaGlsZFdpZHRoICsgc2Vjb25kQ2hpbGRXaWR0aCA+IGVsV2lkdGgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbn0sXG4gICAgX2RyYWdFbEluUm93Q29sdW1uID0gZnVuY3Rpb24gX2RyYWdFbEluUm93Q29sdW1uKGRyYWdSZWN0LCB0YXJnZXRSZWN0LCB2ZXJ0aWNhbCkge1xuICB2YXIgZHJhZ0VsUzFPcHAgPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LmxlZnQgOiBkcmFnUmVjdC50b3AsXG4gICAgICBkcmFnRWxTMk9wcCA9IHZlcnRpY2FsID8gZHJhZ1JlY3QucmlnaHQgOiBkcmFnUmVjdC5ib3R0b20sXG4gICAgICBkcmFnRWxPcHBMZW5ndGggPSB2ZXJ0aWNhbCA/IGRyYWdSZWN0LndpZHRoIDogZHJhZ1JlY3QuaGVpZ2h0LFxuICAgICAgdGFyZ2V0UzFPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QubGVmdCA6IHRhcmdldFJlY3QudG9wLFxuICAgICAgdGFyZ2V0UzJPcHAgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QucmlnaHQgOiB0YXJnZXRSZWN0LmJvdHRvbSxcbiAgICAgIHRhcmdldE9wcExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC53aWR0aCA6IHRhcmdldFJlY3QuaGVpZ2h0O1xuICByZXR1cm4gZHJhZ0VsUzFPcHAgPT09IHRhcmdldFMxT3BwIHx8IGRyYWdFbFMyT3BwID09PSB0YXJnZXRTMk9wcCB8fCBkcmFnRWxTMU9wcCArIGRyYWdFbE9wcExlbmd0aCAvIDIgPT09IHRhcmdldFMxT3BwICsgdGFyZ2V0T3BwTGVuZ3RoIC8gMjtcbn0sXG5cbi8qKlxuICogRGV0ZWN0cyBmaXJzdCBuZWFyZXN0IGVtcHR5IHNvcnRhYmxlIHRvIFggYW5kIFkgcG9zaXRpb24gdXNpbmcgZW1wdHlJbnNlcnRUaHJlc2hvbGQuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHggICAgICBYIHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHkgICAgICBZIHBvc2l0aW9uXG4gKiBAcmV0dXJuIHtIVE1MRWxlbWVudH0gICBFbGVtZW50IG9mIHRoZSBmaXJzdCBmb3VuZCBuZWFyZXN0IFNvcnRhYmxlXG4gKi9cbl9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSA9IGZ1bmN0aW9uIF9kZXRlY3ROZWFyZXN0RW1wdHlTb3J0YWJsZSh4LCB5KSB7XG4gIHZhciByZXQ7XG4gIHNvcnRhYmxlcy5zb21lKGZ1bmN0aW9uIChzb3J0YWJsZSkge1xuICAgIGlmIChsYXN0Q2hpbGQoc29ydGFibGUpKSByZXR1cm47XG4gICAgdmFyIHJlY3QgPSBnZXRSZWN0KHNvcnRhYmxlKSxcbiAgICAgICAgdGhyZXNob2xkID0gc29ydGFibGVbZXhwYW5kb10ub3B0aW9ucy5lbXB0eUluc2VydFRocmVzaG9sZCxcbiAgICAgICAgaW5zaWRlSG9yaXpvbnRhbGx5ID0geCA+PSByZWN0LmxlZnQgLSB0aHJlc2hvbGQgJiYgeCA8PSByZWN0LnJpZ2h0ICsgdGhyZXNob2xkLFxuICAgICAgICBpbnNpZGVWZXJ0aWNhbGx5ID0geSA+PSByZWN0LnRvcCAtIHRocmVzaG9sZCAmJiB5IDw9IHJlY3QuYm90dG9tICsgdGhyZXNob2xkO1xuXG4gICAgaWYgKHRocmVzaG9sZCAmJiBpbnNpZGVIb3Jpem9udGFsbHkgJiYgaW5zaWRlVmVydGljYWxseSkge1xuICAgICAgcmV0dXJuIHJldCA9IHNvcnRhYmxlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59LFxuICAgIF9wcmVwYXJlR3JvdXAgPSBmdW5jdGlvbiBfcHJlcGFyZUdyb3VwKG9wdGlvbnMpIHtcbiAgZnVuY3Rpb24gdG9Gbih2YWx1ZSwgcHVsbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIGRyYWdFbCwgZXZ0KSB7XG4gICAgICB2YXIgc2FtZUdyb3VwID0gdG8ub3B0aW9ucy5ncm91cC5uYW1lICYmIGZyb20ub3B0aW9ucy5ncm91cC5uYW1lICYmIHRvLm9wdGlvbnMuZ3JvdXAubmFtZSA9PT0gZnJvbS5vcHRpb25zLmdyb3VwLm5hbWU7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsICYmIChwdWxsIHx8IHNhbWVHcm91cCkpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBwdWxsIHZhbHVlXG4gICAgICAgIC8vIERlZmF1bHQgcHVsbCBhbmQgcHV0IHZhbHVlIGlmIHNhbWUgZ3JvdXBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAocHVsbCAmJiB2YWx1ZSA9PT0gJ2Nsb25lJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdG9Gbih2YWx1ZSh0bywgZnJvbSwgZHJhZ0VsLCBldnQpLCBwdWxsKSh0bywgZnJvbSwgZHJhZ0VsLCBldnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG90aGVyR3JvdXAgPSAocHVsbCA/IHRvIDogZnJvbSkub3B0aW9ucy5ncm91cC5uYW1lO1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZSA9PT0gb3RoZXJHcm91cCB8fCB2YWx1ZS5qb2luICYmIHZhbHVlLmluZGV4T2Yob3RoZXJHcm91cCkgPiAtMTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGdyb3VwID0ge307XG4gIHZhciBvcmlnaW5hbEdyb3VwID0gb3B0aW9ucy5ncm91cDtcblxuICBpZiAoIW9yaWdpbmFsR3JvdXAgfHwgX3R5cGVvZihvcmlnaW5hbEdyb3VwKSAhPSAnb2JqZWN0Jykge1xuICAgIG9yaWdpbmFsR3JvdXAgPSB7XG4gICAgICBuYW1lOiBvcmlnaW5hbEdyb3VwXG4gICAgfTtcbiAgfVxuXG4gIGdyb3VwLm5hbWUgPSBvcmlnaW5hbEdyb3VwLm5hbWU7XG4gIGdyb3VwLmNoZWNrUHVsbCA9IHRvRm4ob3JpZ2luYWxHcm91cC5wdWxsLCB0cnVlKTtcbiAgZ3JvdXAuY2hlY2tQdXQgPSB0b0ZuKG9yaWdpbmFsR3JvdXAucHV0KTtcbiAgZ3JvdXAucmV2ZXJ0Q2xvbmUgPSBvcmlnaW5hbEdyb3VwLnJldmVydENsb25lO1xuICBvcHRpb25zLmdyb3VwID0gZ3JvdXA7XG59LFxuICAgIF9oaWRlR2hvc3RGb3JUYXJnZXQgPSBmdW5jdGlvbiBfaGlkZUdob3N0Rm9yVGFyZ2V0KCkge1xuICBpZiAoIXN1cHBvcnRDc3NQb2ludGVyRXZlbnRzICYmIGdob3N0RWwpIHtcbiAgICBjc3MoZ2hvc3RFbCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICB9XG59LFxuICAgIF91bmhpZGVHaG9zdEZvclRhcmdldCA9IGZ1bmN0aW9uIF91bmhpZGVHaG9zdEZvclRhcmdldCgpIHtcbiAgaWYgKCFzdXBwb3J0Q3NzUG9pbnRlckV2ZW50cyAmJiBnaG9zdEVsKSB7XG4gICAgY3NzKGdob3N0RWwsICdkaXNwbGF5JywgJycpO1xuICB9XG59OyAvLyAjMTE4NCBmaXggLSBQcmV2ZW50IGNsaWNrIGV2ZW50IG9uIGZhbGxiYWNrIGlmIGRyYWdnZWQgYnV0IGl0ZW0gbm90IGNoYW5nZWQgcG9zaXRpb25cblxuXG5pZiAoZG9jdW1lbnRFeGlzdHMpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgaWYgKGlnbm9yZU5leHRDbGljaykge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldnQuc3RvcFByb3BhZ2F0aW9uICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gJiYgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgaWdub3JlTmV4dENsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cblxudmFyIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50ID0gZnVuY3Rpb24gbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQoZXZ0KSB7XG4gIGlmIChkcmFnRWwpIHtcbiAgICBldnQgPSBldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0O1xuXG4gICAgdmFyIG5lYXJlc3QgPSBfZGV0ZWN0TmVhcmVzdEVtcHR5U29ydGFibGUoZXZ0LmNsaWVudFgsIGV2dC5jbGllbnRZKTtcblxuICAgIGlmIChuZWFyZXN0KSB7XG4gICAgICAvLyBDcmVhdGUgaW1pdGF0aW9uIGV2ZW50XG4gICAgICB2YXIgZXZlbnQgPSB7fTtcblxuICAgICAgZm9yICh2YXIgaSBpbiBldnQpIHtcbiAgICAgICAgaWYgKGV2dC5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGV2ZW50W2ldID0gZXZ0W2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnRhcmdldCA9IGV2ZW50LnJvb3RFbCA9IG5lYXJlc3Q7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCA9IHZvaWQgMDtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbiA9IHZvaWQgMDtcblxuICAgICAgbmVhcmVzdFtleHBhbmRvXS5fb25EcmFnT3ZlcihldmVudCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgX2NoZWNrT3V0c2lkZVRhcmdldEVsID0gZnVuY3Rpb24gX2NoZWNrT3V0c2lkZVRhcmdldEVsKGV2dCkge1xuICBpZiAoZHJhZ0VsKSB7XG4gICAgZHJhZ0VsLnBhcmVudE5vZGVbZXhwYW5kb10uX2lzT3V0c2lkZVRoaXNFbChldnQudGFyZ2V0KTtcbiAgfVxufTtcbi8qKlxuICogQGNsYXNzICBTb3J0YWJsZVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9ICBlbFxuICogQHBhcmFtICB7T2JqZWN0fSAgICAgICBbb3B0aW9uc11cbiAqL1xuXG5cbmZ1bmN0aW9uIFNvcnRhYmxlKGVsLCBvcHRpb25zKSB7XG4gIGlmICghKGVsICYmIGVsLm5vZGVUeXBlICYmIGVsLm5vZGVUeXBlID09PSAxKSkge1xuICAgIHRocm93IFwiU29ydGFibGU6IGBlbGAgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKGVsKSk7XG4gIH1cblxuICB0aGlzLmVsID0gZWw7IC8vIHJvb3QgZWxlbWVudFxuXG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucyk7IC8vIEV4cG9ydCBpbnN0YW5jZVxuXG4gIGVsW2V4cGFuZG9dID0gdGhpcztcbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGdyb3VwOiBudWxsLFxuICAgIHNvcnQ6IHRydWUsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIHN0b3JlOiBudWxsLFxuICAgIGhhbmRsZTogbnVsbCxcbiAgICBkcmFnZ2FibGU6IC9eW3VvXWwkL2kudGVzdChlbC5ub2RlTmFtZSkgPyAnPmxpJyA6ICc+KicsXG4gICAgc3dhcFRocmVzaG9sZDogMSxcbiAgICAvLyBwZXJjZW50YWdlOyAwIDw9IHggPD0gMVxuICAgIGludmVydFN3YXA6IGZhbHNlLFxuICAgIC8vIGludmVydCBhbHdheXNcbiAgICBpbnZlcnRlZFN3YXBUaHJlc2hvbGQ6IG51bGwsXG4gICAgLy8gd2lsbCBiZSBzZXQgdG8gc2FtZSBhcyBzd2FwVGhyZXNob2xkIGlmIGRlZmF1bHRcbiAgICByZW1vdmVDbG9uZU9uSGlkZTogdHJ1ZSxcbiAgICBkaXJlY3Rpb246IGZ1bmN0aW9uIGRpcmVjdGlvbigpIHtcbiAgICAgIHJldHVybiBfZGV0ZWN0RGlyZWN0aW9uKGVsLCB0aGlzLm9wdGlvbnMpO1xuICAgIH0sXG4gICAgZ2hvc3RDbGFzczogJ3NvcnRhYmxlLWdob3N0JyxcbiAgICBjaG9zZW5DbGFzczogJ3NvcnRhYmxlLWNob3NlbicsXG4gICAgZHJhZ0NsYXNzOiAnc29ydGFibGUtZHJhZycsXG4gICAgaWdub3JlOiAnYSwgaW1nJyxcbiAgICBmaWx0ZXI6IG51bGwsXG4gICAgcHJldmVudE9uRmlsdGVyOiB0cnVlLFxuICAgIGFuaW1hdGlvbjogMCxcbiAgICBlYXNpbmc6IG51bGwsXG4gICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkcmFnRWwudGV4dENvbnRlbnQpO1xuICAgIH0sXG4gICAgZHJvcEJ1YmJsZTogZmFsc2UsXG4gICAgZHJhZ292ZXJCdWJibGU6IGZhbHNlLFxuICAgIGRhdGFJZEF0dHI6ICdkYXRhLWlkJyxcbiAgICBkZWxheTogMCxcbiAgICBkZWxheU9uVG91Y2hPbmx5OiBmYWxzZSxcbiAgICB0b3VjaFN0YXJ0VGhyZXNob2xkOiAoTnVtYmVyLnBhcnNlSW50ID8gTnVtYmVyIDogd2luZG93KS5wYXJzZUludCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgMTApIHx8IDEsXG4gICAgZm9yY2VGYWxsYmFjazogZmFsc2UsXG4gICAgZmFsbGJhY2tDbGFzczogJ3NvcnRhYmxlLWZhbGxiYWNrJyxcbiAgICBmYWxsYmFja09uQm9keTogZmFsc2UsXG4gICAgZmFsbGJhY2tUb2xlcmFuY2U6IDAsXG4gICAgZmFsbGJhY2tPZmZzZXQ6IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfSxcbiAgICBzdXBwb3J0UG9pbnRlcjogU29ydGFibGUuc3VwcG9ydFBvaW50ZXIgIT09IGZhbHNlICYmICdQb2ludGVyRXZlbnQnIGluIHdpbmRvdyxcbiAgICBlbXB0eUluc2VydFRocmVzaG9sZDogNVxuICB9O1xuICBQbHVnaW5NYW5hZ2VyLmluaXRpYWxpemVQbHVnaW5zKHRoaXMsIGVsLCBkZWZhdWx0cyk7IC8vIFNldCBkZWZhdWx0IG9wdGlvbnNcblxuICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgIShuYW1lIGluIG9wdGlvbnMpICYmIChvcHRpb25zW25hbWVdID0gZGVmYXVsdHNbbmFtZV0pO1xuICB9XG5cbiAgX3ByZXBhcmVHcm91cChvcHRpb25zKTsgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG5cblxuICBmb3IgKHZhciBmbiBpbiB0aGlzKSB7XG4gICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgfSAvLyBTZXR1cCBkcmFnIG1vZGVcblxuXG4gIHRoaXMubmF0aXZlRHJhZ2dhYmxlID0gb3B0aW9ucy5mb3JjZUZhbGxiYWNrID8gZmFsc2UgOiBzdXBwb3J0RHJhZ2dhYmxlO1xuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIC8vIFRvdWNoIHN0YXJ0IHRocmVzaG9sZCBjYW5ub3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBuYXRpdmUgZHJhZ3N0YXJ0IHRocmVzaG9sZFxuICAgIHRoaXMub3B0aW9ucy50b3VjaFN0YXJ0VGhyZXNob2xkID0gMTtcbiAgfSAvLyBCaW5kIGV2ZW50c1xuXG5cbiAgaWYgKG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICBvbihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gIH0gZWxzZSB7XG4gICAgb24oZWwsICdtb3VzZWRvd24nLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgICBvbihlbCwgJ3RvdWNoc3RhcnQnLCB0aGlzLl9vblRhcFN0YXJ0KTtcbiAgfVxuXG4gIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgIG9uKGVsLCAnZHJhZ292ZXInLCB0aGlzKTtcbiAgICBvbihlbCwgJ2RyYWdlbnRlcicsIHRoaXMpO1xuICB9XG5cbiAgc29ydGFibGVzLnB1c2godGhpcy5lbCk7IC8vIFJlc3RvcmUgc29ydGluZ1xuXG4gIG9wdGlvbnMuc3RvcmUgJiYgb3B0aW9ucy5zdG9yZS5nZXQgJiYgdGhpcy5zb3J0KG9wdGlvbnMuc3RvcmUuZ2V0KHRoaXMpIHx8IFtdKTsgLy8gQWRkIGFuaW1hdGlvbiBzdGF0ZSBtYW5hZ2VyXG5cbiAgX2V4dGVuZHModGhpcywgQW5pbWF0aW9uU3RhdGVNYW5hZ2VyKCkpO1xufVxuXG5Tb3J0YWJsZS5wcm90b3R5cGUgPVxuLyoqIEBsZW5kcyBTb3J0YWJsZS5wcm90b3R5cGUgKi9cbntcbiAgY29uc3RydWN0b3I6IFNvcnRhYmxlLFxuICBfaXNPdXRzaWRlVGhpc0VsOiBmdW5jdGlvbiBfaXNPdXRzaWRlVGhpc0VsKHRhcmdldCkge1xuICAgIGlmICghdGhpcy5lbC5jb250YWlucyh0YXJnZXQpICYmIHRhcmdldCAhPT0gdGhpcy5lbCkge1xuICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgfVxuICB9LFxuICBfZ2V0RGlyZWN0aW9uOiBmdW5jdGlvbiBfZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLmRpcmVjdGlvbi5jYWxsKHRoaXMsIGV2dCwgdGFyZ2V0LCBkcmFnRWwpIDogdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgfSxcbiAgX29uVGFwU3RhcnQ6IGZ1bmN0aW9uIF9vblRhcFN0YXJ0KFxuICAvKiogRXZlbnR8VG91Y2hFdmVudCAqL1xuICBldnQpIHtcbiAgICBpZiAoIWV2dC5jYW5jZWxhYmxlKSByZXR1cm47XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IHRoaXMuZWwsXG4gICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHByZXZlbnRPbkZpbHRlciA9IG9wdGlvbnMucHJldmVudE9uRmlsdGVyLFxuICAgICAgICB0eXBlID0gZXZ0LnR5cGUsXG4gICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgJiYgZXZ0LnRvdWNoZXNbMF0gfHwgZXZ0LnBvaW50ZXJUeXBlICYmIGV2dC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyAmJiBldnQsXG4gICAgICAgIHRhcmdldCA9ICh0b3VjaCB8fCBldnQpLnRhcmdldCxcbiAgICAgICAgb3JpZ2luYWxUYXJnZXQgPSBldnQudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgKGV2dC5wYXRoICYmIGV2dC5wYXRoWzBdIHx8IGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpWzBdKSB8fCB0YXJnZXQsXG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuXG4gICAgX3NhdmVJbnB1dENoZWNrZWRTdGF0ZShlbCk7IC8vIERvbid0IHRyaWdnZXIgc3RhcnQgZXZlbnQgd2hlbiBhbiBlbGVtZW50IGlzIGJlZW4gZHJhZ2dlZCwgb3RoZXJ3aXNlIHRoZSBldnQub2xkaW5kZXggYWx3YXlzIHdyb25nIHdoZW4gc2V0IG9wdGlvbi5ncm91cC5cblxuXG4gICAgaWYgKGRyYWdFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICgvbW91c2Vkb3dufHBvaW50ZXJkb3duLy50ZXN0KHR5cGUpICYmIGV2dC5idXR0b24gIT09IDAgfHwgb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuOyAvLyBvbmx5IGxlZnQgYnV0dG9uIGFuZCBlbmFibGVkXG4gICAgfSAvLyBjYW5jZWwgZG5kIGlmIG9yaWdpbmFsIHRhcmdldCBpcyBjb250ZW50IGVkaXRhYmxlXG5cblxuICAgIGlmIChvcmlnaW5hbFRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIGZhbHNlKTtcblxuICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0LmFuaW1hdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGxhc3REb3duRWwgPT09IHRhcmdldCkge1xuICAgICAgLy8gSWdub3JpbmcgZHVwbGljYXRlIGBkb3duYFxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZHJhZ2dlZCBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50XG5cblxuICAgIG9sZEluZGV4ID0gaW5kZXgodGFyZ2V0KTtcbiAgICBvbGREcmFnZ2FibGVJbmRleCA9IGluZGV4KHRhcmdldCwgb3B0aW9ucy5kcmFnZ2FibGUpOyAvLyBDaGVjayBmaWx0ZXJcblxuICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZmlsdGVyLmNhbGwodGhpcywgZXZ0LCB0YXJnZXQsIHRoaXMpKSB7XG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgcm9vdEVsOiBvcmlnaW5hbFRhcmdldCxcbiAgICAgICAgICBuYW1lOiAnZmlsdGVyJyxcbiAgICAgICAgICB0YXJnZXRFbDogdGFyZ2V0LFxuICAgICAgICAgIHRvRWw6IGVsLFxuICAgICAgICAgIGZyb21FbDogZWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGx1Z2luRXZlbnQoJ2ZpbHRlcicsIF90aGlzLCB7XG4gICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICAgIHByZXZlbnRPbkZpbHRlciAmJiBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuOyAvLyBjYW5jZWwgZG5kXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXIpIHtcbiAgICAgIGZpbHRlciA9IGZpbHRlci5zcGxpdCgnLCcpLnNvbWUoZnVuY3Rpb24gKGNyaXRlcmlhKSB7XG4gICAgICAgIGNyaXRlcmlhID0gY2xvc2VzdChvcmlnaW5hbFRhcmdldCwgY3JpdGVyaWEudHJpbSgpLCBlbCwgZmFsc2UpO1xuXG4gICAgICAgIGlmIChjcml0ZXJpYSkge1xuICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgICAgIHJvb3RFbDogY3JpdGVyaWEsXG4gICAgICAgICAgICBuYW1lOiAnZmlsdGVyJyxcbiAgICAgICAgICAgIHRhcmdldEVsOiB0YXJnZXQsXG4gICAgICAgICAgICBmcm9tRWw6IGVsLFxuICAgICAgICAgICAgdG9FbDogZWxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHBsdWdpbkV2ZW50KCdmaWx0ZXInLCBfdGhpcywge1xuICAgICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgcHJldmVudE9uRmlsdGVyICYmIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47IC8vIGNhbmNlbCBkbmRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5oYW5kbGUgJiYgIWNsb3Nlc3Qob3JpZ2luYWxUYXJnZXQsIG9wdGlvbnMuaGFuZGxlLCBlbCwgZmFsc2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcmVwYXJlIGBkcmFnc3RhcnRgXG5cblxuICAgIHRoaXMuX3ByZXBhcmVEcmFnU3RhcnQoZXZ0LCB0b3VjaCwgdGFyZ2V0KTtcbiAgfSxcbiAgX3ByZXBhcmVEcmFnU3RhcnQ6IGZ1bmN0aW9uIF9wcmVwYXJlRHJhZ1N0YXJ0KFxuICAvKiogRXZlbnQgKi9cbiAgZXZ0LFxuICAvKiogVG91Y2ggKi9cbiAgdG91Y2gsXG4gIC8qKiBIVE1MRWxlbWVudCAqL1xuICB0YXJnZXQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBlbCA9IF90aGlzLmVsLFxuICAgICAgICBvcHRpb25zID0gX3RoaXMub3B0aW9ucyxcbiAgICAgICAgb3duZXJEb2N1bWVudCA9IGVsLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIGRyYWdTdGFydEZuO1xuXG4gICAgaWYgKHRhcmdldCAmJiAhZHJhZ0VsICYmIHRhcmdldC5wYXJlbnROb2RlID09PSBlbCkge1xuICAgICAgdmFyIGRyYWdSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgcm9vdEVsID0gZWw7XG4gICAgICBkcmFnRWwgPSB0YXJnZXQ7XG4gICAgICBwYXJlbnRFbCA9IGRyYWdFbC5wYXJlbnROb2RlO1xuICAgICAgbmV4dEVsID0gZHJhZ0VsLm5leHRTaWJsaW5nO1xuICAgICAgbGFzdERvd25FbCA9IHRhcmdldDtcbiAgICAgIGFjdGl2ZUdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICAgIFNvcnRhYmxlLmRyYWdnZWQgPSBkcmFnRWw7XG4gICAgICB0YXBFdnQgPSB7XG4gICAgICAgIHRhcmdldDogZHJhZ0VsLFxuICAgICAgICBjbGllbnRYOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRYLFxuICAgICAgICBjbGllbnRZOiAodG91Y2ggfHwgZXZ0KS5jbGllbnRZXG4gICAgICB9O1xuICAgICAgdGFwRGlzdGFuY2VMZWZ0ID0gdGFwRXZ0LmNsaWVudFggLSBkcmFnUmVjdC5sZWZ0O1xuICAgICAgdGFwRGlzdGFuY2VUb3AgPSB0YXBFdnQuY2xpZW50WSAtIGRyYWdSZWN0LnRvcDtcbiAgICAgIHRoaXMuX2xhc3RYID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gKHRvdWNoIHx8IGV2dCkuY2xpZW50WTtcbiAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICdhbGwnO1xuXG4gICAgICBkcmFnU3RhcnRGbiA9IGZ1bmN0aW9uIGRyYWdTdGFydEZuKCkge1xuICAgICAgICBwbHVnaW5FdmVudCgnZGVsYXlFbmRlZCcsIF90aGlzLCB7XG4gICAgICAgICAgZXZ0OiBldnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICBfdGhpcy5fb25Ecm9wKCk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gRGVsYXllZCBkcmFnIGhhcyBiZWVuIHRyaWdnZXJlZFxuICAgICAgICAvLyB3ZSBjYW4gcmUtZW5hYmxlIHRoZSBldmVudHM6IHRvdWNobW92ZS9tb3VzZW1vdmVcblxuXG4gICAgICAgIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKTtcblxuICAgICAgICBpZiAoIUZpcmVGb3ggJiYgX3RoaXMubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgZHJhZ0VsLmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIH0gLy8gQmluZCB0aGUgZXZlbnRzOiBkcmFnc3RhcnQvZHJhZ2VuZFxuXG5cbiAgICAgICAgX3RoaXMuX3RyaWdnZXJEcmFnU3RhcnQoZXZ0LCB0b3VjaCk7IC8vIERyYWcgc3RhcnQgZXZlbnRcblxuXG4gICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICBzb3J0YWJsZTogX3RoaXMsXG4gICAgICAgICAgbmFtZTogJ2Nob29zZScsXG4gICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgIH0pOyAvLyBDaG9zZW4gaXRlbVxuXG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmNob3NlbkNsYXNzLCB0cnVlKTtcbiAgICAgIH07IC8vIERpc2FibGUgXCJkcmFnZ2FibGVcIlxuXG5cbiAgICAgIG9wdGlvbnMuaWdub3JlLnNwbGl0KCcsJykuZm9yRWFjaChmdW5jdGlvbiAoY3JpdGVyaWEpIHtcbiAgICAgICAgZmluZChkcmFnRWwsIGNyaXRlcmlhLnRyaW0oKSwgX2Rpc2FibGVEcmFnZ2FibGUpO1xuICAgICAgfSk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgICAgb24ob3duZXJEb2N1bWVudCwgJ3RvdWNobW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hlbmQnLCBfdGhpcy5fb25Ecm9wKTtcbiAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIF90aGlzLl9vbkRyb3ApOyAvLyBNYWtlIGRyYWdFbCBkcmFnZ2FibGUgKG11c3QgYmUgYmVmb3JlIGRlbGF5IGZvciBGaXJlRm94KVxuXG4gICAgICBpZiAoRmlyZUZveCAmJiB0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudG91Y2hTdGFydFRocmVzaG9sZCA9IDQ7XG4gICAgICAgIGRyYWdFbC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBwbHVnaW5FdmVudCgnZGVsYXlTdGFydCcsIHRoaXMsIHtcbiAgICAgICAgZXZ0OiBldnRcbiAgICAgIH0pOyAvLyBEZWxheSBpcyBpbXBvc3NpYmxlIGZvciBuYXRpdmUgRG5EIGluIEVkZ2Ugb3IgSUVcblxuICAgICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgKCFvcHRpb25zLmRlbGF5T25Ub3VjaE9ubHkgfHwgdG91Y2gpICYmICghdGhpcy5uYXRpdmVEcmFnZ2FibGUgfHwgIShFZGdlIHx8IElFMTFPckxlc3MpKSkge1xuICAgICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgICAgIHRoaXMuX29uRHJvcCgpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIElmIHRoZSB1c2VyIG1vdmVzIHRoZSBwb2ludGVyIG9yIGxldCBnbyB0aGUgY2xpY2sgb3IgdG91Y2hcbiAgICAgICAgLy8gYmVmb3JlIHRoZSBkZWxheSBoYXMgYmVlbiByZWFjaGVkOlxuICAgICAgICAvLyBkaXNhYmxlIHRoZSBkZWxheWVkIGRyYWdcblxuXG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX2Rpc2FibGVEZWxheWVkRHJhZyk7XG4gICAgICAgIG9uKG93bmVyRG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9kaXNhYmxlRGVsYXllZERyYWcpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICAgICAgb24ob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIF90aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgICAgICBvbihvd25lckRvY3VtZW50LCAndG91Y2htb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICAgIG9wdGlvbnMuc3VwcG9ydFBvaW50ZXIgJiYgb24ob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgX3RoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgICAgIF90aGlzLl9kcmFnU3RhcnRUaW1lciA9IHNldFRpbWVvdXQoZHJhZ1N0YXJ0Rm4sIG9wdGlvbnMuZGVsYXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ1N0YXJ0Rm4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIF9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXI6IGZ1bmN0aW9uIF9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIoXG4gIC8qKiBUb3VjaEV2ZW50fFBvaW50ZXJFdmVudCAqKi9cbiAgZSkge1xuICAgIHZhciB0b3VjaCA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG5cbiAgICBpZiAoTWF0aC5tYXgoTWF0aC5hYnModG91Y2guY2xpZW50WCAtIHRoaXMuX2xhc3RYKSwgTWF0aC5hYnModG91Y2guY2xpZW50WSAtIHRoaXMuX2xhc3RZKSkgPj0gTWF0aC5mbG9vcih0aGlzLm9wdGlvbnMudG91Y2hTdGFydFRocmVzaG9sZCAvICh0aGlzLm5hdGl2ZURyYWdnYWJsZSAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSkpIHtcbiAgICAgIHRoaXMuX2Rpc2FibGVEZWxheWVkRHJhZygpO1xuICAgIH1cbiAgfSxcbiAgX2Rpc2FibGVEZWxheWVkRHJhZzogZnVuY3Rpb24gX2Rpc2FibGVEZWxheWVkRHJhZygpIHtcbiAgICBkcmFnRWwgJiYgX2Rpc2FibGVEcmFnZ2FibGUoZHJhZ0VsKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fZHJhZ1N0YXJ0VGltZXIpO1xuXG4gICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7XG4gIH0sXG4gIF9kaXNhYmxlRGVsYXllZERyYWdFdmVudHM6IGZ1bmN0aW9uIF9kaXNhYmxlRGVsYXllZERyYWdFdmVudHMoKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoY2FuY2VsJywgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX2RlbGF5ZWREcmFnVG91Y2hNb3ZlSGFuZGxlcik7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICAgIG9mZihvd25lckRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9kZWxheWVkRHJhZ1RvdWNoTW92ZUhhbmRsZXIpO1xuICB9LFxuICBfdHJpZ2dlckRyYWdTdGFydDogZnVuY3Rpb24gX3RyaWdnZXJEcmFnU3RhcnQoXG4gIC8qKiBFdmVudCAqL1xuICBldnQsXG4gIC8qKiBUb3VjaCAqL1xuICB0b3VjaCkge1xuICAgIHRvdWNoID0gdG91Y2ggfHwgZXZ0LnBvaW50ZXJUeXBlID09ICd0b3VjaCcgJiYgZXZ0O1xuXG4gICAgaWYgKCF0aGlzLm5hdGl2ZURyYWdnYWJsZSB8fCB0b3VjaCkge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdXBwb3J0UG9pbnRlcikge1xuICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgICAgfSBlbHNlIGlmICh0b3VjaCkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fb25Ub3VjaE1vdmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvbihkcmFnRWwsICdkcmFnZW5kJywgdGhpcyk7XG4gICAgICBvbihyb290RWwsICdkcmFnc3RhcnQnLCB0aGlzLl9vbkRyYWdTdGFydCk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICAgICAgLy8gVGltZW91dCBuZWNjZXNzYXJ5IGZvciBJRTlcbiAgICAgICAgX25leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkb2N1bWVudC5zZWxlY3Rpb24uZW1wdHkoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICB9LFxuICBfZHJhZ1N0YXJ0ZWQ6IGZ1bmN0aW9uIF9kcmFnU3RhcnRlZChmYWxsYmFjaywgZXZ0KSB7XG5cbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gZmFsc2U7XG5cbiAgICBpZiAocm9vdEVsICYmIGRyYWdFbCkge1xuICAgICAgcGx1Z2luRXZlbnQoJ2RyYWdTdGFydGVkJywgdGhpcywge1xuICAgICAgICBldnQ6IGV2dFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvbihkb2N1bWVudCwgJ2RyYWdvdmVyJywgX2NoZWNrT3V0c2lkZVRhcmdldEVsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7IC8vIEFwcGx5IGVmZmVjdFxuXG4gICAgICAhZmFsbGJhY2sgJiYgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmRyYWdDbGFzcywgZmFsc2UpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmdob3N0Q2xhc3MsIHRydWUpO1xuICAgICAgU29ydGFibGUuYWN0aXZlID0gdGhpcztcbiAgICAgIGZhbGxiYWNrICYmIHRoaXMuX2FwcGVuZEdob3N0KCk7IC8vIERyYWcgc3RhcnQgZXZlbnRcblxuICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgbmFtZTogJ3N0YXJ0JyxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbnVsbGluZygpO1xuICAgIH1cbiAgfSxcbiAgX2VtdWxhdGVEcmFnT3ZlcjogZnVuY3Rpb24gX2VtdWxhdGVEcmFnT3ZlcigpIHtcbiAgICBpZiAodG91Y2hFdnQpIHtcbiAgICAgIHRoaXMuX2xhc3RYID0gdG91Y2hFdnQuY2xpZW50WDtcbiAgICAgIHRoaXMuX2xhc3RZID0gdG91Y2hFdnQuY2xpZW50WTtcblxuICAgICAgX2hpZGVHaG9zdEZvclRhcmdldCgpO1xuXG4gICAgICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaEV2dC5jbGllbnRYLCB0b3VjaEV2dC5jbGllbnRZKTtcbiAgICAgIHZhciBwYXJlbnQgPSB0YXJnZXQ7XG5cbiAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0LnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnNoYWRvd1Jvb3QuZWxlbWVudEZyb21Qb2ludCh0b3VjaEV2dC5jbGllbnRYLCB0b3VjaEV2dC5jbGllbnRZKTtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gcGFyZW50KSBicmVhaztcbiAgICAgICAgcGFyZW50ID0gdGFyZ2V0O1xuICAgICAgfVxuXG4gICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKHRhcmdldCk7XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmIChwYXJlbnRbZXhwYW5kb10pIHtcbiAgICAgICAgICAgIHZhciBpbnNlcnRlZCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGluc2VydGVkID0gcGFyZW50W2V4cGFuZG9dLl9vbkRyYWdPdmVyKHtcbiAgICAgICAgICAgICAgY2xpZW50WDogdG91Y2hFdnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgY2xpZW50WTogdG91Y2hFdnQuY2xpZW50WSxcbiAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGluc2VydGVkICYmICF0aGlzLm9wdGlvbnMuZHJhZ292ZXJCdWJibGUpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGFyZ2V0ID0gcGFyZW50OyAvLyBzdG9yZSBsYXN0IGVsZW1lbnRcbiAgICAgICAgfVxuICAgICAgICAvKiBqc2hpbnQgYm9zczp0cnVlICovXG4gICAgICAgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSk7XG4gICAgICB9XG5cbiAgICAgIF91bmhpZGVHaG9zdEZvclRhcmdldCgpO1xuICAgIH1cbiAgfSxcbiAgX29uVG91Y2hNb3ZlOiBmdW5jdGlvbiBfb25Ub3VjaE1vdmUoXG4gIC8qKlRvdWNoRXZlbnQqL1xuICBldnQpIHtcbiAgICBpZiAodGFwRXZ0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBmYWxsYmFja1RvbGVyYW5jZSA9IG9wdGlvbnMuZmFsbGJhY2tUb2xlcmFuY2UsXG4gICAgICAgICAgZmFsbGJhY2tPZmZzZXQgPSBvcHRpb25zLmZhbGxiYWNrT2Zmc2V0LFxuICAgICAgICAgIHRvdWNoID0gZXZ0LnRvdWNoZXMgPyBldnQudG91Y2hlc1swXSA6IGV2dCxcbiAgICAgICAgICBnaG9zdE1hdHJpeCA9IGdob3N0RWwgJiYgbWF0cml4KGdob3N0RWwsIHRydWUpLFxuICAgICAgICAgIHNjYWxlWCA9IGdob3N0RWwgJiYgZ2hvc3RNYXRyaXggJiYgZ2hvc3RNYXRyaXguYSxcbiAgICAgICAgICBzY2FsZVkgPSBnaG9zdEVsICYmIGdob3N0TWF0cml4ICYmIGdob3N0TWF0cml4LmQsXG4gICAgICAgICAgcmVsYXRpdmVTY3JvbGxPZmZzZXQgPSBQb3NpdGlvbkdob3N0QWJzb2x1dGVseSAmJiBnaG9zdFJlbGF0aXZlUGFyZW50ICYmIGdldFJlbGF0aXZlU2Nyb2xsT2Zmc2V0KGdob3N0UmVsYXRpdmVQYXJlbnQpLFxuICAgICAgICAgIGR4ID0gKHRvdWNoLmNsaWVudFggLSB0YXBFdnQuY2xpZW50WCArIGZhbGxiYWNrT2Zmc2V0LngpIC8gKHNjYWxlWCB8fCAxKSArIChyZWxhdGl2ZVNjcm9sbE9mZnNldCA/IHJlbGF0aXZlU2Nyb2xsT2Zmc2V0WzBdIC0gZ2hvc3RSZWxhdGl2ZVBhcmVudEluaXRpYWxTY3JvbGxbMF0gOiAwKSAvIChzY2FsZVggfHwgMSksXG4gICAgICAgICAgZHkgPSAodG91Y2guY2xpZW50WSAtIHRhcEV2dC5jbGllbnRZICsgZmFsbGJhY2tPZmZzZXQueSkgLyAoc2NhbGVZIHx8IDEpICsgKHJlbGF0aXZlU2Nyb2xsT2Zmc2V0ID8gcmVsYXRpdmVTY3JvbGxPZmZzZXRbMV0gLSBnaG9zdFJlbGF0aXZlUGFyZW50SW5pdGlhbFNjcm9sbFsxXSA6IDApIC8gKHNjYWxlWSB8fCAxKTsgLy8gb25seSBzZXQgdGhlIHN0YXR1cyB0byBkcmFnZ2luZywgd2hlbiB3ZSBhcmUgYWN0dWFsbHkgZHJhZ2dpbmdcblxuICAgICAgaWYgKCFTb3J0YWJsZS5hY3RpdmUgJiYgIWF3YWl0aW5nRHJhZ1N0YXJ0ZWQpIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrVG9sZXJhbmNlICYmIE1hdGgubWF4KE1hdGguYWJzKHRvdWNoLmNsaWVudFggLSB0aGlzLl9sYXN0WCksIE1hdGguYWJzKHRvdWNoLmNsaWVudFkgLSB0aGlzLl9sYXN0WSkpIDwgZmFsbGJhY2tUb2xlcmFuY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9vbkRyYWdTdGFydChldnQsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2hvc3RFbCkge1xuICAgICAgICBpZiAoZ2hvc3RNYXRyaXgpIHtcbiAgICAgICAgICBnaG9zdE1hdHJpeC5lICs9IGR4IC0gKGxhc3REeCB8fCAwKTtcbiAgICAgICAgICBnaG9zdE1hdHJpeC5mICs9IGR5IC0gKGxhc3REeSB8fCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnaG9zdE1hdHJpeCA9IHtcbiAgICAgICAgICAgIGE6IDEsXG4gICAgICAgICAgICBiOiAwLFxuICAgICAgICAgICAgYzogMCxcbiAgICAgICAgICAgIGQ6IDEsXG4gICAgICAgICAgICBlOiBkeCxcbiAgICAgICAgICAgIGY6IGR5XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjc3NNYXRyaXggPSBcIm1hdHJpeChcIi5jb25jYXQoZ2hvc3RNYXRyaXguYSwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5iLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmMsIFwiLFwiKS5jb25jYXQoZ2hvc3RNYXRyaXguZCwgXCIsXCIpLmNvbmNhdChnaG9zdE1hdHJpeC5lLCBcIixcIikuY29uY2F0KGdob3N0TWF0cml4LmYsIFwiKVwiKTtcbiAgICAgICAgY3NzKGdob3N0RWwsICd3ZWJraXRUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ21velRyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGNzcyhnaG9zdEVsLCAnbXNUcmFuc2Zvcm0nLCBjc3NNYXRyaXgpO1xuICAgICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybScsIGNzc01hdHJpeCk7XG4gICAgICAgIGxhc3REeCA9IGR4O1xuICAgICAgICBsYXN0RHkgPSBkeTtcbiAgICAgICAgdG91Y2hFdnQgPSB0b3VjaDtcbiAgICAgIH1cblxuICAgICAgZXZ0LmNhbmNlbGFibGUgJiYgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LFxuICBfYXBwZW5kR2hvc3Q6IGZ1bmN0aW9uIF9hcHBlbmRHaG9zdCgpIHtcbiAgICAvLyBCdWcgaWYgdXNpbmcgc2NhbGUoKTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjYzNzA1OFxuICAgIC8vIE5vdCBiZWluZyBhZGp1c3RlZCBmb3JcbiAgICBpZiAoIWdob3N0RWwpIHtcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLm9wdGlvbnMuZmFsbGJhY2tPbkJvZHkgPyBkb2N1bWVudC5ib2R5IDogcm9vdEVsLFxuICAgICAgICAgIHJlY3QgPSBnZXRSZWN0KGRyYWdFbCwgdHJ1ZSwgUG9zaXRpb25HaG9zdEFic29sdXRlbHksIHRydWUsIGNvbnRhaW5lciksXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gUG9zaXRpb24gYWJzb2x1dGVseVxuXG4gICAgICBpZiAoUG9zaXRpb25HaG9zdEFic29sdXRlbHkpIHtcbiAgICAgICAgLy8gR2V0IHJlbGF0aXZlbHkgcG9zaXRpb25lZCBwYXJlbnRcbiAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGNvbnRhaW5lcjtcblxuICAgICAgICB3aGlsZSAoY3NzKGdob3N0UmVsYXRpdmVQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJyAmJiBjc3MoZ2hvc3RSZWxhdGl2ZVBhcmVudCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2hvc3RSZWxhdGl2ZVBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdob3N0UmVsYXRpdmVQYXJlbnQgIT09IGRvY3VtZW50LmJvZHkgJiYgZ2hvc3RSZWxhdGl2ZVBhcmVudCAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgaWYgKGdob3N0UmVsYXRpdmVQYXJlbnQgPT09IGRvY3VtZW50KSBnaG9zdFJlbGF0aXZlUGFyZW50ID0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpO1xuICAgICAgICAgIHJlY3QudG9wICs9IGdob3N0UmVsYXRpdmVQYXJlbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgIHJlY3QubGVmdCArPSBnaG9zdFJlbGF0aXZlUGFyZW50LnNjcm9sbExlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2hvc3RSZWxhdGl2ZVBhcmVudCA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdob3N0UmVsYXRpdmVQYXJlbnRJbml0aWFsU2Nyb2xsID0gZ2V0UmVsYXRpdmVTY3JvbGxPZmZzZXQoZ2hvc3RSZWxhdGl2ZVBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIGdob3N0RWwgPSBkcmFnRWwuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICB0b2dnbGVDbGFzcyhnaG9zdEVsLCBvcHRpb25zLmZhbGxiYWNrQ2xhc3MsIHRydWUpO1xuICAgICAgdG9nZ2xlQ2xhc3MoZ2hvc3RFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIHRydWUpO1xuICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2l0aW9uJywgJycpO1xuICAgICAgY3NzKGdob3N0RWwsICd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ2JveC1zaXppbmcnLCAnYm9yZGVyLWJveCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdtYXJnaW4nLCAwKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAndG9wJywgcmVjdC50b3ApO1xuICAgICAgY3NzKGdob3N0RWwsICdsZWZ0JywgcmVjdC5sZWZ0KTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnd2lkdGgnLCByZWN0LndpZHRoKTtcbiAgICAgIGNzcyhnaG9zdEVsLCAnaGVpZ2h0JywgcmVjdC5oZWlnaHQpO1xuICAgICAgY3NzKGdob3N0RWwsICdvcGFjaXR5JywgJzAuOCcpO1xuICAgICAgY3NzKGdob3N0RWwsICdwb3NpdGlvbicsIFBvc2l0aW9uR2hvc3RBYnNvbHV0ZWx5ID8gJ2Fic29sdXRlJyA6ICdmaXhlZCcpO1xuICAgICAgY3NzKGdob3N0RWwsICd6SW5kZXgnLCAnMTAwMDAwJyk7XG4gICAgICBjc3MoZ2hvc3RFbCwgJ3BvaW50ZXJFdmVudHMnLCAnbm9uZScpO1xuICAgICAgU29ydGFibGUuZ2hvc3QgPSBnaG9zdEVsO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGdob3N0RWwpOyAvLyBTZXQgdHJhbnNmb3JtLW9yaWdpblxuXG4gICAgICBjc3MoZ2hvc3RFbCwgJ3RyYW5zZm9ybS1vcmlnaW4nLCB0YXBEaXN0YW5jZUxlZnQgLyBwYXJzZUludChnaG9zdEVsLnN0eWxlLndpZHRoKSAqIDEwMCArICclICcgKyB0YXBEaXN0YW5jZVRvcCAvIHBhcnNlSW50KGdob3N0RWwuc3R5bGUuaGVpZ2h0KSAqIDEwMCArICclJyk7XG4gICAgfVxuICB9LFxuICBfb25EcmFnU3RhcnQ6IGZ1bmN0aW9uIF9vbkRyYWdTdGFydChcbiAgLyoqRXZlbnQqL1xuICBldnQsXG4gIC8qKmJvb2xlYW4qL1xuICBmYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZGF0YVRyYW5zZmVyID0gZXZ0LmRhdGFUcmFuc2ZlcjtcbiAgICB2YXIgb3B0aW9ucyA9IF90aGlzLm9wdGlvbnM7XG4gICAgcGx1Z2luRXZlbnQoJ2RyYWdTdGFydCcsIHRoaXMsIHtcbiAgICAgIGV2dDogZXZ0XG4gICAgfSk7XG5cbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgdGhpcy5fb25Ecm9wKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwbHVnaW5FdmVudCgnc2V0dXBDbG9uZScsIHRoaXMpO1xuXG4gICAgaWYgKCFTb3J0YWJsZS5ldmVudENhbmNlbGVkKSB7XG4gICAgICBjbG9uZUVsID0gY2xvbmUoZHJhZ0VsKTtcbiAgICAgIGNsb25lRWwuZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICBjbG9uZUVsLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG5cbiAgICAgIHRoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICB0b2dnbGVDbGFzcyhjbG9uZUVsLCB0aGlzLm9wdGlvbnMuY2hvc2VuQ2xhc3MsIGZhbHNlKTtcbiAgICAgIFNvcnRhYmxlLmNsb25lID0gY2xvbmVFbDtcbiAgICB9IC8vICMxMTQzOiBJRnJhbWUgc3VwcG9ydCB3b3JrYXJvdW5kXG5cblxuICAgIF90aGlzLmNsb25lSWQgPSBfbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgcGx1Z2luRXZlbnQoJ2Nsb25lJywgX3RoaXMpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybjtcblxuICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmVFbCwgZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2Nsb25lJ1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgIWZhbGxiYWNrICYmIHRvZ2dsZUNsYXNzKGRyYWdFbCwgb3B0aW9ucy5kcmFnQ2xhc3MsIHRydWUpOyAvLyBTZXQgcHJvcGVyIGRyb3AgZXZlbnRzXG5cbiAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgIGlnbm9yZU5leHRDbGljayA9IHRydWU7XG4gICAgICBfdGhpcy5fbG9vcElkID0gc2V0SW50ZXJ2YWwoX3RoaXMuX2VtdWxhdGVEcmFnT3ZlciwgNTApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVbmRvIHdoYXQgd2FzIHNldCBpbiBfcHJlcGFyZURyYWdTdGFydCBiZWZvcmUgZHJhZyBzdGFydGVkXG4gICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZXVwJywgX3RoaXMuX29uRHJvcCk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIF90aGlzLl9vbkRyb3ApO1xuICAgICAgb2ZmKGRvY3VtZW50LCAndG91Y2hjYW5jZWwnLCBfdGhpcy5fb25Ecm9wKTtcblxuICAgICAgaWYgKGRhdGFUcmFuc2Zlcikge1xuICAgICAgICBkYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdtb3ZlJztcbiAgICAgICAgb3B0aW9ucy5zZXREYXRhICYmIG9wdGlvbnMuc2V0RGF0YS5jYWxsKF90aGlzLCBkYXRhVHJhbnNmZXIsIGRyYWdFbCk7XG4gICAgICB9XG5cbiAgICAgIG9uKGRvY3VtZW50LCAnZHJvcCcsIF90aGlzKTsgLy8gIzEyNzYgZml4OlxuXG4gICAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVooMCknKTtcbiAgICB9XG5cbiAgICBhd2FpdGluZ0RyYWdTdGFydGVkID0gdHJ1ZTtcbiAgICBfdGhpcy5fZHJhZ1N0YXJ0SWQgPSBfbmV4dFRpY2soX3RoaXMuX2RyYWdTdGFydGVkLmJpbmQoX3RoaXMsIGZhbGxiYWNrLCBldnQpKTtcbiAgICBvbihkb2N1bWVudCwgJ3NlbGVjdHN0YXJ0JywgX3RoaXMpO1xuICAgIG1vdmVkID0gdHJ1ZTtcblxuICAgIGlmIChTYWZhcmkpIHtcbiAgICAgIGNzcyhkb2N1bWVudC5ib2R5LCAndXNlci1zZWxlY3QnLCAnbm9uZScpO1xuICAgIH1cbiAgfSxcbiAgLy8gUmV0dXJucyB0cnVlIC0gaWYgbm8gZnVydGhlciBhY3Rpb24gaXMgbmVlZGVkIChlaXRoZXIgaW5zZXJ0ZWQgb3IgYW5vdGhlciBjb25kaXRpb24pXG4gIF9vbkRyYWdPdmVyOiBmdW5jdGlvbiBfb25EcmFnT3ZlcihcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICB2YXIgZWwgPSB0aGlzLmVsLFxuICAgICAgICB0YXJnZXQgPSBldnQudGFyZ2V0LFxuICAgICAgICBkcmFnUmVjdCxcbiAgICAgICAgdGFyZ2V0UmVjdCxcbiAgICAgICAgcmV2ZXJ0LFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBncm91cCA9IG9wdGlvbnMuZ3JvdXAsXG4gICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gU29ydGFibGUuYWN0aXZlLFxuICAgICAgICBpc093bmVyID0gYWN0aXZlR3JvdXAgPT09IGdyb3VwLFxuICAgICAgICBjYW5Tb3J0ID0gb3B0aW9ucy5zb3J0LFxuICAgICAgICBmcm9tU29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCBhY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgdmVydGljYWwsXG4gICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgY29tcGxldGVkRmlyZWQgPSBmYWxzZTtcblxuICAgIGlmIChfc2lsZW50KSByZXR1cm47XG5cbiAgICBmdW5jdGlvbiBkcmFnT3ZlckV2ZW50KG5hbWUsIGV4dHJhKSB7XG4gICAgICBwbHVnaW5FdmVudChuYW1lLCBfdGhpcywgX29iamVjdFNwcmVhZCh7XG4gICAgICAgIGV2dDogZXZ0LFxuICAgICAgICBpc093bmVyOiBpc093bmVyLFxuICAgICAgICBheGlzOiB2ZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCcsXG4gICAgICAgIHJldmVydDogcmV2ZXJ0LFxuICAgICAgICBkcmFnUmVjdDogZHJhZ1JlY3QsXG4gICAgICAgIHRhcmdldFJlY3Q6IHRhcmdldFJlY3QsXG4gICAgICAgIGNhblNvcnQ6IGNhblNvcnQsXG4gICAgICAgIGZyb21Tb3J0YWJsZTogZnJvbVNvcnRhYmxlLFxuICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWQsXG4gICAgICAgIG9uTW92ZTogZnVuY3Rpb24gb25Nb3ZlKHRhcmdldCwgYWZ0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gX29uTW92ZShyb290RWwsIGVsLCBkcmFnRWwsIGRyYWdSZWN0LCB0YXJnZXQsIGdldFJlY3QodGFyZ2V0KSwgZXZ0LCBhZnRlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZWQ6IGNoYW5nZWRcbiAgICAgIH0sIGV4dHJhKSk7XG4gICAgfSAvLyBDYXB0dXJlIGFuaW1hdGlvbiBzdGF0ZVxuXG5cbiAgICBmdW5jdGlvbiBjYXB0dXJlKCkge1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJBbmltYXRpb25DYXB0dXJlJyk7XG5cbiAgICAgIF90aGlzLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICBpZiAoX3RoaXMgIT09IGZyb21Tb3J0YWJsZSkge1xuICAgICAgICBmcm9tU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICB9XG4gICAgfSAvLyBSZXR1cm4gaW52b2NhdGlvbiB3aGVuIGRyYWdFbCBpcyBpbnNlcnRlZCAob3IgY29tcGxldGVkKVxuXG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZWQoaW5zZXJ0aW9uKSB7XG4gICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckNvbXBsZXRlZCcsIHtcbiAgICAgICAgaW5zZXJ0aW9uOiBpbnNlcnRpb25cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlLl9zaG93Q2xvbmUoX3RoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICAvLyBTZXQgZ2hvc3QgY2xhc3MgdG8gbmV3IHNvcnRhYmxlJ3MgZ2hvc3QgY2xhc3NcbiAgICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHB1dFNvcnRhYmxlID8gcHV0U29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzIDogYWN0aXZlU29ydGFibGUub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBvcHRpb25zLmdob3N0Q2xhc3MsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHB1dFNvcnRhYmxlICE9PSBfdGhpcyAmJiBfdGhpcyAhPT0gU29ydGFibGUuYWN0aXZlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfdGhpcztcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcyA9PT0gU29ydGFibGUuYWN0aXZlICYmIHB1dFNvcnRhYmxlKSB7XG4gICAgICAgICAgcHV0U29ydGFibGUgPSBudWxsO1xuICAgICAgICB9IC8vIEFuaW1hdGlvblxuXG5cbiAgICAgICAgaWYgKGZyb21Tb3J0YWJsZSA9PT0gX3RoaXMpIHtcbiAgICAgICAgICBfdGhpcy5faWdub3JlV2hpbGVBbmltYXRpbmcgPSB0YXJnZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5hbmltYXRlQWxsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkcmFnT3ZlckV2ZW50KCdkcmFnT3ZlckFuaW1hdGlvbkNvbXBsZXRlJyk7XG4gICAgICAgICAgX3RoaXMuX2lnbm9yZVdoaWxlQW5pbWF0aW5nID0gbnVsbDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF90aGlzICE9PSBmcm9tU29ydGFibGUpIHtcbiAgICAgICAgICBmcm9tU29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5faWdub3JlV2hpbGVBbmltYXRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IC8vIE51bGwgbGFzdFRhcmdldCBpZiBpdCBpcyBub3QgaW5zaWRlIGEgcHJldmlvdXNseSBzd2FwcGVkIGVsZW1lbnRcblxuXG4gICAgICBpZiAodGFyZ2V0ID09PSBkcmFnRWwgJiYgIWRyYWdFbC5hbmltYXRlZCB8fCB0YXJnZXQgPT09IGVsICYmICF0YXJnZXQuYW5pbWF0ZWQpIHtcbiAgICAgICAgbGFzdFRhcmdldCA9IG51bGw7XG4gICAgICB9IC8vIG5vIGJ1YmJsaW5nIGFuZCBub3QgZmFsbGJhY2tcblxuXG4gICAgICBpZiAoIW9wdGlvbnMuZHJhZ292ZXJCdWJibGUgJiYgIWV2dC5yb290RWwgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudCkge1xuICAgICAgICBkcmFnRWwucGFyZW50Tm9kZVtleHBhbmRvXS5faXNPdXRzaWRlVGhpc0VsKGV2dC50YXJnZXQpOyAvLyBEbyBub3QgZGV0ZWN0IGZvciBlbXB0eSBpbnNlcnQgaWYgYWxyZWFkeSBpbnNlcnRlZFxuXG5cbiAgICAgICAgIWluc2VydGlvbiAmJiBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudChldnQpO1xuICAgICAgfVxuXG4gICAgICAhb3B0aW9ucy5kcmFnb3ZlckJ1YmJsZSAmJiBldnQuc3RvcFByb3BhZ2F0aW9uICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybiBjb21wbGV0ZWRGaXJlZCA9IHRydWU7XG4gICAgfSAvLyBDYWxsIHdoZW4gZHJhZ0VsIGhhcyBiZWVuIGluc2VydGVkXG5cblxuICAgIGZ1bmN0aW9uIGNoYW5nZWQoKSB7XG4gICAgICBuZXdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG4gICAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuXG4gICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHNvcnRhYmxlOiBfdGhpcyxcbiAgICAgICAgbmFtZTogJ2NoYW5nZScsXG4gICAgICAgIHRvRWw6IGVsLFxuICAgICAgICBuZXdJbmRleDogbmV3SW5kZXgsXG4gICAgICAgIG5ld0RyYWdnYWJsZUluZGV4OiBuZXdEcmFnZ2FibGVJbmRleCxcbiAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZXZ0LnByZXZlbnREZWZhdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHRhcmdldCA9IGNsb3Nlc3QodGFyZ2V0LCBvcHRpb25zLmRyYWdnYWJsZSwgZWwsIHRydWUpO1xuICAgIGRyYWdPdmVyRXZlbnQoJ2RyYWdPdmVyJyk7XG4gICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcblxuICAgIGlmIChkcmFnRWwuY29udGFpbnMoZXZ0LnRhcmdldCkgfHwgdGFyZ2V0LmFuaW1hdGVkICYmIHRhcmdldC5hbmltYXRpbmdYICYmIHRhcmdldC5hbmltYXRpbmdZIHx8IF90aGlzLl9pZ25vcmVXaGlsZUFuaW1hdGluZyA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZ25vcmVOZXh0Q2xpY2sgPSBmYWxzZTtcblxuICAgIGlmIChhY3RpdmVTb3J0YWJsZSAmJiAhb3B0aW9ucy5kaXNhYmxlZCAmJiAoaXNPd25lciA/IGNhblNvcnQgfHwgKHJldmVydCA9ICFyb290RWwuY29udGFpbnMoZHJhZ0VsKSkgLy8gUmV2ZXJ0aW5nIGl0ZW0gaW50byB0aGUgb3JpZ2luYWwgbGlzdFxuICAgIDogcHV0U29ydGFibGUgPT09IHRoaXMgfHwgKHRoaXMubGFzdFB1dE1vZGUgPSBhY3RpdmVHcm91cC5jaGVja1B1bGwodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkgJiYgZ3JvdXAuY2hlY2tQdXQodGhpcywgYWN0aXZlU29ydGFibGUsIGRyYWdFbCwgZXZ0KSkpIHtcbiAgICAgIHZlcnRpY2FsID0gdGhpcy5fZ2V0RGlyZWN0aW9uKGV2dCwgdGFyZ2V0KSA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIGRyYWdSZWN0ID0gZ2V0UmVjdChkcmFnRWwpO1xuICAgICAgZHJhZ092ZXJFdmVudCgnZHJhZ092ZXJWYWxpZCcpO1xuICAgICAgaWYgKFNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHJldHVybiBjb21wbGV0ZWRGaXJlZDtcblxuICAgICAgaWYgKHJldmVydCkge1xuICAgICAgICBwYXJlbnRFbCA9IHJvb3RFbDsgLy8gYWN0dWFsaXphdGlvblxuXG4gICAgICAgIGNhcHR1cmUoKTtcblxuICAgICAgICB0aGlzLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgICBkcmFnT3ZlckV2ZW50KCdyZXZlcnQnKTtcblxuICAgICAgICBpZiAoIVNvcnRhYmxlLmV2ZW50Q2FuY2VsZWQpIHtcbiAgICAgICAgICBpZiAobmV4dEVsKSB7XG4gICAgICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dEVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm9vdEVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsTGFzdENoaWxkID0gbGFzdENoaWxkKGVsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICAgIGlmICghZWxMYXN0Q2hpbGQgfHwgX2dob3N0SXNMYXN0KGV2dCwgdmVydGljYWwsIHRoaXMpICYmICFlbExhc3RDaGlsZC5hbmltYXRlZCkge1xuICAgICAgICAvLyBJZiBhbHJlYWR5IGF0IGVuZCBvZiBsaXN0OiBEbyBub3QgaW5zZXJ0XG4gICAgICAgIGlmIChlbExhc3RDaGlsZCA9PT0gZHJhZ0VsKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH0gLy8gYXNzaWduIHRhcmdldCBvbmx5IGlmIGNvbmRpdGlvbiBpcyB0cnVlXG5cblxuICAgICAgICBpZiAoZWxMYXN0Q2hpbGQgJiYgZWwgPT09IGV2dC50YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXQgPSBlbExhc3RDaGlsZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRSZWN0ID0gZ2V0UmVjdCh0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsICEhdGFyZ2V0KSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBjYXB0dXJlKCk7XG4gICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICBwYXJlbnRFbCA9IGVsOyAvLyBhY3R1YWxpemF0aW9uXG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQucGFyZW50Tm9kZSA9PT0gZWwpIHtcbiAgICAgICAgdGFyZ2V0UmVjdCA9IGdldFJlY3QodGFyZ2V0KTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IDAsXG4gICAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAsXG4gICAgICAgICAgICBkaWZmZXJlbnRMZXZlbCA9IGRyYWdFbC5wYXJlbnROb2RlICE9PSBlbCxcbiAgICAgICAgICAgIGRpZmZlcmVudFJvd0NvbCA9ICFfZHJhZ0VsSW5Sb3dDb2x1bW4oZHJhZ0VsLmFuaW1hdGVkICYmIGRyYWdFbC50b1JlY3QgfHwgZHJhZ1JlY3QsIHRhcmdldC5hbmltYXRlZCAmJiB0YXJnZXQudG9SZWN0IHx8IHRhcmdldFJlY3QsIHZlcnRpY2FsKSxcbiAgICAgICAgICAgIHNpZGUxID0gdmVydGljYWwgPyAndG9wJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgIHNjcm9sbGVkUGFzdFRvcCA9IGlzU2Nyb2xsZWRQYXN0KHRhcmdldCwgJ3RvcCcsICd0b3AnKSB8fCBpc1Njcm9sbGVkUGFzdChkcmFnRWwsICd0b3AnLCAndG9wJyksXG4gICAgICAgICAgICBzY3JvbGxCZWZvcmUgPSBzY3JvbGxlZFBhc3RUb3AgPyBzY3JvbGxlZFBhc3RUb3Auc2Nyb2xsVG9wIDogdm9pZCAwO1xuXG4gICAgICAgIGlmIChsYXN0VGFyZ2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICB0YXJnZXRCZWZvcmVGaXJzdFN3YXAgPSB0YXJnZXRSZWN0W3NpZGUxXTtcbiAgICAgICAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICAgICAgICBpc0NpcmN1bXN0YW50aWFsSW52ZXJ0ID0gIWRpZmZlcmVudFJvd0NvbCAmJiBvcHRpb25zLmludmVydFN3YXAgfHwgZGlmZmVyZW50TGV2ZWw7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3Rpb24gPSBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIGRpZmZlcmVudFJvd0NvbCA/IDEgOiBvcHRpb25zLnN3YXBUaHJlc2hvbGQsIG9wdGlvbnMuaW52ZXJ0ZWRTd2FwVGhyZXNob2xkID09IG51bGwgPyBvcHRpb25zLnN3YXBUaHJlc2hvbGQgOiBvcHRpb25zLmludmVydGVkU3dhcFRocmVzaG9sZCwgaXNDaXJjdW1zdGFudGlhbEludmVydCwgbGFzdFRhcmdldCA9PT0gdGFyZ2V0KTtcbiAgICAgICAgdmFyIHNpYmxpbmc7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAhPT0gMCkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHRhcmdldCBpcyBiZXNpZGUgZHJhZ0VsIGluIHJlc3BlY3RpdmUgZGlyZWN0aW9uIChpZ25vcmluZyBoaWRkZW4gZWxlbWVudHMpXG4gICAgICAgICAgdmFyIGRyYWdJbmRleCA9IGluZGV4KGRyYWdFbCk7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBkcmFnSW5kZXggLT0gZGlyZWN0aW9uO1xuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudEVsLmNoaWxkcmVuW2RyYWdJbmRleF07XG4gICAgICAgICAgfSB3aGlsZSAoc2libGluZyAmJiAoY3NzKHNpYmxpbmcsICdkaXNwbGF5JykgPT09ICdub25lJyB8fCBzaWJsaW5nID09PSBnaG9zdEVsKSk7XG4gICAgICAgIH0gLy8gSWYgZHJhZ0VsIGlzIGFscmVhZHkgYmVzaWRlIHRhcmdldDogRG8gbm90IGluc2VydFxuXG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gMCB8fCBzaWJsaW5nID09PSB0YXJnZXQpIHtcbiAgICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIGxhc3REaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHZhciBuZXh0U2libGluZyA9IHRhcmdldC5uZXh0RWxlbWVudFNpYmxpbmcsXG4gICAgICAgICAgICBhZnRlciA9IGZhbHNlO1xuICAgICAgICBhZnRlciA9IGRpcmVjdGlvbiA9PT0gMTtcblxuICAgICAgICB2YXIgbW92ZVZlY3RvciA9IF9vbk1vdmUocm9vdEVsLCBlbCwgZHJhZ0VsLCBkcmFnUmVjdCwgdGFyZ2V0LCB0YXJnZXRSZWN0LCBldnQsIGFmdGVyKTtcblxuICAgICAgICBpZiAobW92ZVZlY3RvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAobW92ZVZlY3RvciA9PT0gMSB8fCBtb3ZlVmVjdG9yID09PSAtMSkge1xuICAgICAgICAgICAgYWZ0ZXIgPSBtb3ZlVmVjdG9yID09PSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9zaWxlbnQgPSB0cnVlO1xuICAgICAgICAgIHNldFRpbWVvdXQoX3Vuc2lsZW50LCAzMCk7XG4gICAgICAgICAgY2FwdHVyZSgpO1xuXG4gICAgICAgICAgaWYgKGFmdGVyICYmICFuZXh0U2libGluZykge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZHJhZ0VsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgYWZ0ZXIgPyBuZXh0U2libGluZyA6IHRhcmdldCk7XG4gICAgICAgICAgfSAvLyBVbmRvIGNocm9tZSdzIHNjcm9sbCBhZGp1c3RtZW50IChoYXMgbm8gZWZmZWN0IG9uIG90aGVyIGJyb3dzZXJzKVxuXG5cbiAgICAgICAgICBpZiAoc2Nyb2xsZWRQYXN0VG9wKSB7XG4gICAgICAgICAgICBzY3JvbGxCeShzY3JvbGxlZFBhc3RUb3AsIDAsIHNjcm9sbEJlZm9yZSAtIHNjcm9sbGVkUGFzdFRvcC5zY3JvbGxUb3ApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhcmVudEVsID0gZHJhZ0VsLnBhcmVudE5vZGU7IC8vIGFjdHVhbGl6YXRpb25cbiAgICAgICAgICAvLyBtdXN0IGJlIGRvbmUgYmVmb3JlIGFuaW1hdGlvblxuXG4gICAgICAgICAgaWYgKHRhcmdldEJlZm9yZUZpcnN0U3dhcCAhPT0gdW5kZWZpbmVkICYmICFpc0NpcmN1bXN0YW50aWFsSW52ZXJ0KSB7XG4gICAgICAgICAgICB0YXJnZXRNb3ZlRGlzdGFuY2UgPSBNYXRoLmFicyh0YXJnZXRCZWZvcmVGaXJzdFN3YXAgLSBnZXRSZWN0KHRhcmdldClbc2lkZTFdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGFuZ2VkKCk7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZWwuY29udGFpbnMoZHJhZ0VsKSkge1xuICAgICAgICByZXR1cm4gY29tcGxldGVkKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIF9pZ25vcmVXaGlsZUFuaW1hdGluZzogbnVsbCxcbiAgX29mZk1vdmVFdmVudHM6IGZ1bmN0aW9uIF9vZmZNb3ZlRXZlbnRzKCkge1xuICAgIG9mZihkb2N1bWVudCwgJ21vdXNlbW92ZScsIHRoaXMuX29uVG91Y2hNb3ZlKTtcbiAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9vblRvdWNoTW92ZSk7XG4gICAgb2ZmKGRvY3VtZW50LCAnZHJhZ292ZXInLCBuZWFyZXN0RW1wdHlJbnNlcnREZXRlY3RFdmVudCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgbmVhcmVzdEVtcHR5SW5zZXJ0RGV0ZWN0RXZlbnQpO1xuICAgIG9mZihkb2N1bWVudCwgJ3RvdWNobW92ZScsIG5lYXJlc3RFbXB0eUluc2VydERldGVjdEV2ZW50KTtcbiAgfSxcbiAgX29mZlVwRXZlbnRzOiBmdW5jdGlvbiBfb2ZmVXBFdmVudHMoKSB7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPSB0aGlzLmVsLm93bmVyRG9jdW1lbnQ7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ecm9wKTtcbiAgICBvZmYob3duZXJEb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKG93bmVyRG9jdW1lbnQsICd0b3VjaGNhbmNlbCcsIHRoaXMuX29uRHJvcCk7XG4gICAgb2ZmKGRvY3VtZW50LCAnc2VsZWN0c3RhcnQnLCB0aGlzKTtcbiAgfSxcbiAgX29uRHJvcDogZnVuY3Rpb24gX29uRHJvcChcbiAgLyoqRXZlbnQqL1xuICBldnQpIHtcbiAgICB2YXIgZWwgPSB0aGlzLmVsLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkcmFnZ2VkIGVsZW1lbnQgd2l0aGluIGl0cyBwYXJlbnRcblxuICAgIG5ld0luZGV4ID0gaW5kZXgoZHJhZ0VsKTtcbiAgICBuZXdEcmFnZ2FibGVJbmRleCA9IGluZGV4KGRyYWdFbCwgb3B0aW9ucy5kcmFnZ2FibGUpO1xuICAgIHBsdWdpbkV2ZW50KCdkcm9wJywgdGhpcywge1xuICAgICAgZXZ0OiBldnRcbiAgICB9KTtcbiAgICBwYXJlbnRFbCA9IGRyYWdFbCAmJiBkcmFnRWwucGFyZW50Tm9kZTsgLy8gR2V0IGFnYWluIGFmdGVyIHBsdWdpbiBldmVudFxuXG4gICAgbmV3SW5kZXggPSBpbmRleChkcmFnRWwpO1xuICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gaW5kZXgoZHJhZ0VsLCBvcHRpb25zLmRyYWdnYWJsZSk7XG5cbiAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkge1xuICAgICAgdGhpcy5fbnVsbGluZygpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXRpbmdEcmFnU3RhcnRlZCA9IGZhbHNlO1xuICAgIGlzQ2lyY3Vtc3RhbnRpYWxJbnZlcnQgPSBmYWxzZTtcbiAgICBwYXN0Rmlyc3RJbnZlcnRUaHJlc2ggPSBmYWxzZTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2xvb3BJZCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RyYWdTdGFydFRpbWVyKTtcblxuICAgIF9jYW5jZWxOZXh0VGljayh0aGlzLmNsb25lSWQpO1xuXG4gICAgX2NhbmNlbE5leHRUaWNrKHRoaXMuX2RyYWdTdGFydElkKTsgLy8gVW5iaW5kIGV2ZW50c1xuXG5cbiAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2Ryb3AnLCB0aGlzKTtcbiAgICAgIG9mZihlbCwgJ2RyYWdzdGFydCcsIHRoaXMuX29uRHJhZ1N0YXJ0KTtcbiAgICB9XG5cbiAgICB0aGlzLl9vZmZNb3ZlRXZlbnRzKCk7XG5cbiAgICB0aGlzLl9vZmZVcEV2ZW50cygpO1xuXG4gICAgaWYgKFNhZmFyaSkge1xuICAgICAgY3NzKGRvY3VtZW50LmJvZHksICd1c2VyLXNlbGVjdCcsICcnKTtcbiAgICB9XG5cbiAgICBjc3MoZHJhZ0VsLCAndHJhbnNmb3JtJywgJycpO1xuXG4gICAgaWYgKGV2dCkge1xuICAgICAgaWYgKG1vdmVkKSB7XG4gICAgICAgIGV2dC5jYW5jZWxhYmxlICYmIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAhb3B0aW9ucy5kcm9wQnViYmxlICYmIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgZ2hvc3RFbCAmJiBnaG9zdEVsLnBhcmVudE5vZGUgJiYgZ2hvc3RFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGdob3N0RWwpO1xuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICAvLyBSZW1vdmUgY2xvbmUocylcbiAgICAgICAgY2xvbmVFbCAmJiBjbG9uZUVsLnBhcmVudE5vZGUgJiYgY2xvbmVFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lRWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICAgIGlmICh0aGlzLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICAgIG9mZihkcmFnRWwsICdkcmFnZW5kJywgdGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfZGlzYWJsZURyYWdnYWJsZShkcmFnRWwpO1xuXG4gICAgICAgIGRyYWdFbC5zdHlsZVsnd2lsbC1jaGFuZ2UnXSA9ICcnOyAvLyBSZW1vdmUgY2xhc3Nlc1xuICAgICAgICAvLyBnaG9zdENsYXNzIGlzIGFkZGVkIGluIGRyYWdTdGFydGVkXG5cbiAgICAgICAgaWYgKG1vdmVkICYmICFhd2FpdGluZ0RyYWdTdGFydGVkKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZHJhZ0VsLCBwdXRTb3J0YWJsZSA/IHB1dFNvcnRhYmxlLm9wdGlvbnMuZ2hvc3RDbGFzcyA6IHRoaXMub3B0aW9ucy5naG9zdENsYXNzLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnRWwsIHRoaXMub3B0aW9ucy5jaG9zZW5DbGFzcywgZmFsc2UpOyAvLyBEcmFnIHN0b3AgZXZlbnRcblxuICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgbmFtZTogJ3VuY2hvb3NlJyxcbiAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICBuZXdJbmRleDogbnVsbCxcbiAgICAgICAgICBuZXdEcmFnZ2FibGVJbmRleDogbnVsbCxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJvb3RFbCAhPT0gcGFyZW50RWwpIHtcbiAgICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgLy8gQWRkIGV2ZW50XG4gICAgICAgICAgICBfZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgIHJvb3RFbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG5hbWU6ICdhZGQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7IC8vIFJlbW92ZSBldmVudFxuXG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgIG5hbWU6ICdyZW1vdmUnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgICB9KTsgLy8gZHJhZyBmcm9tIG9uZSBsaXN0IGFuZCBkcm9wIGludG8gYW5vdGhlclxuXG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgcm9vdEVsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgbmFtZTogJ3NvcnQnLFxuICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgZnJvbUVsOiByb290RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgdG9FbDogcGFyZW50RWwsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHV0U29ydGFibGUgJiYgcHV0U29ydGFibGUuc2F2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChuZXdJbmRleCAhPT0gb2xkSW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChuZXdJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgIC8vIGRyYWcgJiBkcm9wIHdpdGhpbiB0aGUgc2FtZSBsaXN0XG4gICAgICAgICAgICAgIF9kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgICAgICBzb3J0YWJsZTogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgICAgIHNvcnRhYmxlOiB0aGlzLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdzb3J0JyxcbiAgICAgICAgICAgICAgICB0b0VsOiBwYXJlbnRFbCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldnRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFNvcnRhYmxlLmFjdGl2ZSkge1xuICAgICAgICAgIC8qIGpzaGludCBlcW51bGw6dHJ1ZSAqL1xuICAgICAgICAgIGlmIChuZXdJbmRleCA9PSBudWxsIHx8IG5ld0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgbmV3SW5kZXggPSBvbGRJbmRleDtcbiAgICAgICAgICAgIG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkRHJhZ2dhYmxlSW5kZXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX2Rpc3BhdGNoRXZlbnQoe1xuICAgICAgICAgICAgc29ydGFibGU6IHRoaXMsXG4gICAgICAgICAgICBuYW1lOiAnZW5kJyxcbiAgICAgICAgICAgIHRvRWw6IHBhcmVudEVsLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZ0XG4gICAgICAgICAgfSk7IC8vIFNhdmUgc29ydGluZ1xuXG5cbiAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX251bGxpbmcoKTtcbiAgfSxcbiAgX251bGxpbmc6IGZ1bmN0aW9uIF9udWxsaW5nKCkge1xuICAgIHBsdWdpbkV2ZW50KCdudWxsaW5nJywgdGhpcyk7XG4gICAgcm9vdEVsID0gZHJhZ0VsID0gcGFyZW50RWwgPSBnaG9zdEVsID0gbmV4dEVsID0gY2xvbmVFbCA9IGxhc3REb3duRWwgPSBjbG9uZUhpZGRlbiA9IHRhcEV2dCA9IHRvdWNoRXZ0ID0gbW92ZWQgPSBuZXdJbmRleCA9IG5ld0RyYWdnYWJsZUluZGV4ID0gb2xkSW5kZXggPSBvbGREcmFnZ2FibGVJbmRleCA9IGxhc3RUYXJnZXQgPSBsYXN0RGlyZWN0aW9uID0gcHV0U29ydGFibGUgPSBhY3RpdmVHcm91cCA9IFNvcnRhYmxlLmRyYWdnZWQgPSBTb3J0YWJsZS5naG9zdCA9IFNvcnRhYmxlLmNsb25lID0gU29ydGFibGUuYWN0aXZlID0gbnVsbDtcbiAgICBzYXZlZElucHV0Q2hlY2tlZC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwuY2hlY2tlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gbGFzdER4ID0gbGFzdER5ID0gMDtcbiAgfSxcbiAgaGFuZGxlRXZlbnQ6IGZ1bmN0aW9uIGhhbmRsZUV2ZW50KFxuICAvKipFdmVudCovXG4gIGV2dCkge1xuICAgIHN3aXRjaCAoZXZ0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2Ryb3AnOlxuICAgICAgY2FzZSAnZHJhZ2VuZCc6XG4gICAgICAgIHRoaXMuX29uRHJvcChldnQpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkcmFnZW50ZXInOlxuICAgICAgY2FzZSAnZHJhZ292ZXInOlxuICAgICAgICBpZiAoZHJhZ0VsKSB7XG4gICAgICAgICAgdGhpcy5fb25EcmFnT3ZlcihldnQpO1xuXG4gICAgICAgICAgX2dsb2JhbERyYWdPdmVyKGV2dCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0c3RhcnQnOlxuICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXJpYWxpemVzIHRoZSBpdGVtIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5nLlxuICAgKiBAcmV0dXJucyB7U3RyaW5nW119XG4gICAqL1xuICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHZhciBvcmRlciA9IFtdLFxuICAgICAgICBlbCxcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmVsLmNoaWxkcmVuLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICBlbCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICBpZiAoY2xvc2VzdChlbCwgb3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKSkge1xuICAgICAgICBvcmRlci5wdXNoKGVsLmdldEF0dHJpYnV0ZShvcHRpb25zLmRhdGFJZEF0dHIpIHx8IF9nZW5lcmF0ZUlkKGVsKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yZGVyO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTb3J0cyB0aGUgZWxlbWVudHMgYWNjb3JkaW5nIHRvIHRoZSBhcnJheS5cbiAgICogQHBhcmFtICB7U3RyaW5nW119ICBvcmRlciAgb3JkZXIgb2YgdGhlIGl0ZW1zXG4gICAqL1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KG9yZGVyKSB7XG4gICAgdmFyIGl0ZW1zID0ge30sXG4gICAgICAgIHJvb3RFbCA9IHRoaXMuZWw7XG4gICAgdGhpcy50b0FycmF5KCkuZm9yRWFjaChmdW5jdGlvbiAoaWQsIGkpIHtcbiAgICAgIHZhciBlbCA9IHJvb3RFbC5jaGlsZHJlbltpXTtcblxuICAgICAgaWYgKGNsb3Nlc3QoZWwsIHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHJvb3RFbCwgZmFsc2UpKSB7XG4gICAgICAgIGl0ZW1zW2lkXSA9IGVsO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICBpZiAoaXRlbXNbaWRdKSB7XG4gICAgICAgIHJvb3RFbC5yZW1vdmVDaGlsZChpdGVtc1tpZF0pO1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoaXRlbXNbaWRdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogU2F2ZSB0aGUgY3VycmVudCBzb3J0aW5nXG4gICAqL1xuICBzYXZlOiBmdW5jdGlvbiBzYXZlKCkge1xuICAgIHZhciBzdG9yZSA9IHRoaXMub3B0aW9ucy5zdG9yZTtcbiAgICBzdG9yZSAmJiBzdG9yZS5zZXQgJiYgc3RvcmUuc2V0KHRoaXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yIGJ5IHRlc3RpbmcgdGhlIGVsZW1lbnQgaXRzZWxmIGFuZCB0cmF2ZXJzaW5nIHVwIHRocm91Z2ggaXRzIGFuY2VzdG9ycyBpbiB0aGUgRE9NIHRyZWUuXG4gICAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gIGVsXG4gICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgIFtzZWxlY3Rvcl0gIGRlZmF1bHQ6IGBvcHRpb25zLmRyYWdnYWJsZWBcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fG51bGx9XG4gICAqL1xuICBjbG9zZXN0OiBmdW5jdGlvbiBjbG9zZXN0JDEoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGNsb3Nlc3QoZWwsIHNlbGVjdG9yIHx8IHRoaXMub3B0aW9ucy5kcmFnZ2FibGUsIHRoaXMuZWwsIGZhbHNlKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0L2dldCBvcHRpb25cbiAgICogQHBhcmFtICAge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0gICB7Kn0gICAgICBbdmFsdWVdXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgb3B0aW9uOiBmdW5jdGlvbiBvcHRpb24obmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4gb3B0aW9uc1tuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1vZGlmaWVkVmFsdWUgPSBQbHVnaW5NYW5hZ2VyLm1vZGlmeU9wdGlvbih0aGlzLCBuYW1lLCB2YWx1ZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgbW9kaWZpZWRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG1vZGlmaWVkVmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lID09PSAnZ3JvdXAnKSB7XG4gICAgICAgIF9wcmVwYXJlR3JvdXAob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZXN0cm95XG4gICAqL1xuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHBsdWdpbkV2ZW50KCdkZXN0cm95JywgdGhpcyk7XG4gICAgdmFyIGVsID0gdGhpcy5lbDtcbiAgICBlbFtleHBhbmRvXSA9IG51bGw7XG4gICAgb2ZmKGVsLCAnbW91c2Vkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG4gICAgb2ZmKGVsLCAndG91Y2hzdGFydCcsIHRoaXMuX29uVGFwU3RhcnQpO1xuICAgIG9mZihlbCwgJ3BvaW50ZXJkb3duJywgdGhpcy5fb25UYXBTdGFydCk7XG5cbiAgICBpZiAodGhpcy5uYXRpdmVEcmFnZ2FibGUpIHtcbiAgICAgIG9mZihlbCwgJ2RyYWdvdmVyJywgdGhpcyk7XG4gICAgICBvZmYoZWwsICdkcmFnZW50ZXInLCB0aGlzKTtcbiAgICB9IC8vIFJlbW92ZSBkcmFnZ2FibGUgYXR0cmlidXRlc1xuXG5cbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkcmFnZ2FibGVdJyksIGZ1bmN0aW9uIChlbCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkcmFnZ2FibGUnKTtcbiAgICB9KTtcblxuICAgIHRoaXMuX29uRHJvcCgpO1xuXG4gICAgdGhpcy5fZGlzYWJsZURlbGF5ZWREcmFnRXZlbnRzKCk7XG5cbiAgICBzb3J0YWJsZXMuc3BsaWNlKHNvcnRhYmxlcy5pbmRleE9mKHRoaXMuZWwpLCAxKTtcbiAgICB0aGlzLmVsID0gZWwgPSBudWxsO1xuICB9LFxuICBfaGlkZUNsb25lOiBmdW5jdGlvbiBfaGlkZUNsb25lKCkge1xuICAgIGlmICghY2xvbmVIaWRkZW4pIHtcbiAgICAgIHBsdWdpbkV2ZW50KCdoaWRlQ2xvbmUnLCB0aGlzKTtcbiAgICAgIGlmIChTb3J0YWJsZS5ldmVudENhbmNlbGVkKSByZXR1cm47XG4gICAgICBjc3MoY2xvbmVFbCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlICYmIGNsb25lRWwucGFyZW50Tm9kZSkge1xuICAgICAgICBjbG9uZUVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGNsb25lSGlkZGVuID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIF9zaG93Q2xvbmU6IGZ1bmN0aW9uIF9zaG93Q2xvbmUocHV0U29ydGFibGUpIHtcbiAgICBpZiAocHV0U29ydGFibGUubGFzdFB1dE1vZGUgIT09ICdjbG9uZScpIHtcbiAgICAgIHRoaXMuX2hpZGVDbG9uZSgpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGNsb25lSGlkZGVuKSB7XG4gICAgICBwbHVnaW5FdmVudCgnc2hvd0Nsb25lJywgdGhpcyk7XG4gICAgICBpZiAoU29ydGFibGUuZXZlbnRDYW5jZWxlZCkgcmV0dXJuOyAvLyBzaG93IGNsb25lIGF0IGRyYWdFbCBvciBvcmlnaW5hbCBwb3NpdGlvblxuXG4gICAgICBpZiAocm9vdEVsLmNvbnRhaW5zKGRyYWdFbCkgJiYgIXRoaXMub3B0aW9ucy5ncm91cC5yZXZlcnRDbG9uZSkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIGRyYWdFbCk7XG4gICAgICB9IGVsc2UgaWYgKG5leHRFbCkge1xuICAgICAgICByb290RWwuaW5zZXJ0QmVmb3JlKGNsb25lRWwsIG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290RWwuYXBwZW5kQ2hpbGQoY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZ3JvdXAucmV2ZXJ0Q2xvbmUpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKGRyYWdFbCwgY2xvbmVFbCk7XG4gICAgICB9XG5cbiAgICAgIGNzcyhjbG9uZUVsLCAnZGlzcGxheScsICcnKTtcbiAgICAgIGNsb25lSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfZ2xvYmFsRHJhZ092ZXIoXG4vKipFdmVudCovXG5ldnQpIHtcbiAgaWYgKGV2dC5kYXRhVHJhbnNmZXIpIHtcbiAgICBldnQuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnbW92ZSc7XG4gIH1cblxuICBldnQuY2FuY2VsYWJsZSAmJiBldnQucHJldmVudERlZmF1bHQoKTtcbn1cblxuZnVuY3Rpb24gX29uTW92ZShmcm9tRWwsIHRvRWwsIGRyYWdFbCwgZHJhZ1JlY3QsIHRhcmdldEVsLCB0YXJnZXRSZWN0LCBvcmlnaW5hbEV2ZW50LCB3aWxsSW5zZXJ0QWZ0ZXIpIHtcbiAgdmFyIGV2dCxcbiAgICAgIHNvcnRhYmxlID0gZnJvbUVsW2V4cGFuZG9dLFxuICAgICAgb25Nb3ZlRm4gPSBzb3J0YWJsZS5vcHRpb25zLm9uTW92ZSxcbiAgICAgIHJldFZhbDsgLy8gU3VwcG9ydCBmb3IgbmV3IEN1c3RvbUV2ZW50IGZlYXR1cmVcblxuICBpZiAod2luZG93LkN1c3RvbUV2ZW50ICYmICFJRTExT3JMZXNzICYmICFFZGdlKSB7XG4gICAgZXZ0ID0gbmV3IEN1c3RvbUV2ZW50KCdtb3ZlJywge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldnQuaW5pdEV2ZW50KCdtb3ZlJywgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBldnQudG8gPSB0b0VsO1xuICBldnQuZnJvbSA9IGZyb21FbDtcbiAgZXZ0LmRyYWdnZWQgPSBkcmFnRWw7XG4gIGV2dC5kcmFnZ2VkUmVjdCA9IGRyYWdSZWN0O1xuICBldnQucmVsYXRlZCA9IHRhcmdldEVsIHx8IHRvRWw7XG4gIGV2dC5yZWxhdGVkUmVjdCA9IHRhcmdldFJlY3QgfHwgZ2V0UmVjdCh0b0VsKTtcbiAgZXZ0LndpbGxJbnNlcnRBZnRlciA9IHdpbGxJbnNlcnRBZnRlcjtcbiAgZXZ0Lm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICBmcm9tRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuXG4gIGlmIChvbk1vdmVGbikge1xuICAgIHJldFZhbCA9IG9uTW92ZUZuLmNhbGwoc29ydGFibGUsIGV2dCwgb3JpZ2luYWxFdmVudCk7XG4gIH1cblxuICByZXR1cm4gcmV0VmFsO1xufVxuXG5mdW5jdGlvbiBfZGlzYWJsZURyYWdnYWJsZShlbCkge1xuICBlbC5kcmFnZ2FibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gX3Vuc2lsZW50KCkge1xuICBfc2lsZW50ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIF9naG9zdElzTGFzdChldnQsIHZlcnRpY2FsLCBzb3J0YWJsZSkge1xuICB2YXIgcmVjdCA9IGdldFJlY3QobGFzdENoaWxkKHNvcnRhYmxlLmVsLCBzb3J0YWJsZS5vcHRpb25zLmRyYWdnYWJsZSkpO1xuICB2YXIgc3BhY2VyID0gMTA7XG4gIHJldHVybiB2ZXJ0aWNhbCA/IGV2dC5jbGllbnRYID4gcmVjdC5yaWdodCArIHNwYWNlciB8fCBldnQuY2xpZW50WCA8PSByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC5ib3R0b20gJiYgZXZ0LmNsaWVudFggPj0gcmVjdC5sZWZ0IDogZXZ0LmNsaWVudFggPiByZWN0LnJpZ2h0ICYmIGV2dC5jbGllbnRZID4gcmVjdC50b3AgfHwgZXZ0LmNsaWVudFggPD0gcmVjdC5yaWdodCAmJiBldnQuY2xpZW50WSA+IHJlY3QuYm90dG9tICsgc3BhY2VyO1xufVxuXG5mdW5jdGlvbiBfZ2V0U3dhcERpcmVjdGlvbihldnQsIHRhcmdldCwgdGFyZ2V0UmVjdCwgdmVydGljYWwsIHN3YXBUaHJlc2hvbGQsIGludmVydGVkU3dhcFRocmVzaG9sZCwgaW52ZXJ0U3dhcCwgaXNMYXN0VGFyZ2V0KSB7XG4gIHZhciBtb3VzZU9uQXhpcyA9IHZlcnRpY2FsID8gZXZ0LmNsaWVudFkgOiBldnQuY2xpZW50WCxcbiAgICAgIHRhcmdldExlbmd0aCA9IHZlcnRpY2FsID8gdGFyZ2V0UmVjdC5oZWlnaHQgOiB0YXJnZXRSZWN0LndpZHRoLFxuICAgICAgdGFyZ2V0UzEgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QudG9wIDogdGFyZ2V0UmVjdC5sZWZ0LFxuICAgICAgdGFyZ2V0UzIgPSB2ZXJ0aWNhbCA/IHRhcmdldFJlY3QuYm90dG9tIDogdGFyZ2V0UmVjdC5yaWdodCxcbiAgICAgIGludmVydCA9IGZhbHNlO1xuXG4gIGlmICghaW52ZXJ0U3dhcCkge1xuICAgIC8vIE5ldmVyIGludmVydCBvciBjcmVhdGUgZHJhZ0VsIHNoYWRvdyB3aGVuIHRhcmdldCBtb3ZlbWVuZXQgY2F1c2VzIG1vdXNlIHRvIG1vdmUgcGFzdCB0aGUgZW5kIG9mIHJlZ3VsYXIgc3dhcFRocmVzaG9sZFxuICAgIGlmIChpc0xhc3RUYXJnZXQgJiYgdGFyZ2V0TW92ZURpc3RhbmNlIDwgdGFyZ2V0TGVuZ3RoICogc3dhcFRocmVzaG9sZCkge1xuICAgICAgLy8gbXVsdGlwbGllZCBvbmx5IGJ5IHN3YXBUaHJlc2hvbGQgYmVjYXVzZSBtb3VzZSB3aWxsIGFscmVhZHkgYmUgaW5zaWRlIHRhcmdldCBieSAoMSAtIHRocmVzaG9sZCkgKiB0YXJnZXRMZW5ndGggLyAyXG4gICAgICAvLyBjaGVjayBpZiBwYXN0IGZpcnN0IGludmVydCB0aHJlc2hvbGQgb24gc2lkZSBvcHBvc2l0ZSBvZiBsYXN0RGlyZWN0aW9uXG4gICAgICBpZiAoIXBhc3RGaXJzdEludmVydFRocmVzaCAmJiAobGFzdERpcmVjdGlvbiA9PT0gMSA/IG1vdXNlT25BeGlzID4gdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIDogbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqIGludmVydGVkU3dhcFRocmVzaG9sZCAvIDIpKSB7XG4gICAgICAgIC8vIHBhc3QgZmlyc3QgaW52ZXJ0IHRocmVzaG9sZCwgZG8gbm90IHJlc3RyaWN0IGludmVydGVkIHRocmVzaG9sZCB0byBkcmFnRWwgc2hhZG93XG4gICAgICAgIHBhc3RGaXJzdEludmVydFRocmVzaCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFzdEZpcnN0SW52ZXJ0VGhyZXNoKSB7XG4gICAgICAgIC8vIGRyYWdFbCBzaGFkb3cgKHRhcmdldCBtb3ZlIGRpc3RhbmNlIHNoYWRvdylcbiAgICAgICAgaWYgKGxhc3REaXJlY3Rpb24gPT09IDEgPyBtb3VzZU9uQXhpcyA8IHRhcmdldFMxICsgdGFyZ2V0TW92ZURpc3RhbmNlIC8vIG92ZXIgZHJhZ0VsIHNoYWRvd1xuICAgICAgICA6IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRNb3ZlRGlzdGFuY2UpIHtcbiAgICAgICAgICByZXR1cm4gLWxhc3REaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmVydCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlZ3VsYXJcbiAgICAgIGlmIChtb3VzZU9uQXhpcyA+IHRhcmdldFMxICsgdGFyZ2V0TGVuZ3RoICogKDEgLSBzd2FwVGhyZXNob2xkKSAvIDIgJiYgbW91c2VPbkF4aXMgPCB0YXJnZXRTMiAtIHRhcmdldExlbmd0aCAqICgxIC0gc3dhcFRocmVzaG9sZCkgLyAyKSB7XG4gICAgICAgIHJldHVybiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW52ZXJ0ID0gaW52ZXJ0IHx8IGludmVydFN3YXA7XG5cbiAgaWYgKGludmVydCkge1xuICAgIC8vIEludmVydCBvZiByZWd1bGFyXG4gICAgaWYgKG1vdXNlT25BeGlzIDwgdGFyZ2V0UzEgKyB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyIHx8IG1vdXNlT25BeGlzID4gdGFyZ2V0UzIgLSB0YXJnZXRMZW5ndGggKiBpbnZlcnRlZFN3YXBUaHJlc2hvbGQgLyAyKSB7XG4gICAgICByZXR1cm4gbW91c2VPbkF4aXMgPiB0YXJnZXRTMSArIHRhcmdldExlbmd0aCAvIDIgPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG4vKipcbiAqIEdldHMgdGhlIGRpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkIHJlbGF0aXZlIHRvIHRhcmdldCBpbiBvcmRlciB0byBtYWtlIGl0XG4gKiBzZWVtIHRoYXQgZHJhZ0VsIGhhcyBiZWVuIFwiaW5zZXJ0ZWRcIiBpbnRvIHRoYXQgZWxlbWVudCdzIHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtIVE1MRWxlbWVudH0gdGFyZ2V0ICAgICAgIFRoZSB0YXJnZXQgd2hvc2UgcG9zaXRpb24gZHJhZ0VsIGlzIGJlaW5nIGluc2VydGVkIGF0XG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgIERpcmVjdGlvbiBkcmFnRWwgbXVzdCBiZSBzd2FwcGVkXG4gKi9cblxuXG5mdW5jdGlvbiBfZ2V0SW5zZXJ0RGlyZWN0aW9uKHRhcmdldCkge1xuICBpZiAoaW5kZXgoZHJhZ0VsKSA8IGluZGV4KHRhcmdldCkpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn1cbi8qKlxuICogR2VuZXJhdGUgaWRcbiAqIEBwYXJhbSAgIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gX2dlbmVyYXRlSWQoZWwpIHtcbiAgdmFyIHN0ciA9IGVsLnRhZ05hbWUgKyBlbC5jbGFzc05hbWUgKyBlbC5zcmMgKyBlbC5ocmVmICsgZWwudGV4dENvbnRlbnQsXG4gICAgICBpID0gc3RyLmxlbmd0aCxcbiAgICAgIHN1bSA9IDA7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHN1bSArPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuXG4gIHJldHVybiBzdW0udG9TdHJpbmcoMzYpO1xufVxuXG5mdW5jdGlvbiBfc2F2ZUlucHV0Q2hlY2tlZFN0YXRlKHJvb3QpIHtcbiAgc2F2ZWRJbnB1dENoZWNrZWQubGVuZ3RoID0gMDtcbiAgdmFyIGlucHV0cyA9IHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7XG4gIHZhciBpZHggPSBpbnB1dHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpZHgtLSkge1xuICAgIHZhciBlbCA9IGlucHV0c1tpZHhdO1xuICAgIGVsLmNoZWNrZWQgJiYgc2F2ZWRJbnB1dENoZWNrZWQucHVzaChlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX25leHRUaWNrKGZuKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZuLCAwKTtcbn1cblxuZnVuY3Rpb24gX2NhbmNlbE5leHRUaWNrKGlkKSB7XG4gIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufSAvLyBGaXhlZCAjOTczOlxuXG5cbmlmIChkb2N1bWVudEV4aXN0cykge1xuICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChldnQpIHtcbiAgICBpZiAoKFNvcnRhYmxlLmFjdGl2ZSB8fCBhd2FpdGluZ0RyYWdTdGFydGVkKSAmJiBldnQuY2FuY2VsYWJsZSkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9KTtcbn0gLy8gRXhwb3J0IHV0aWxzXG5cblxuU29ydGFibGUudXRpbHMgPSB7XG4gIG9uOiBvbixcbiAgb2ZmOiBvZmYsXG4gIGNzczogY3NzLFxuICBmaW5kOiBmaW5kLFxuICBpczogZnVuY3Rpb24gaXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuICEhY2xvc2VzdChlbCwgc2VsZWN0b3IsIGVsLCBmYWxzZSk7XG4gIH0sXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0aHJvdHRsZTogdGhyb3R0bGUsXG4gIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gIHRvZ2dsZUNsYXNzOiB0b2dnbGVDbGFzcyxcbiAgY2xvbmU6IGNsb25lLFxuICBpbmRleDogaW5kZXgsXG4gIG5leHRUaWNrOiBfbmV4dFRpY2ssXG4gIGNhbmNlbE5leHRUaWNrOiBfY2FuY2VsTmV4dFRpY2ssXG4gIGRldGVjdERpcmVjdGlvbjogX2RldGVjdERpcmVjdGlvbixcbiAgZ2V0Q2hpbGQ6IGdldENoaWxkXG59O1xuLyoqXG4gKiBHZXQgdGhlIFNvcnRhYmxlIGluc3RhbmNlIG9mIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50XG4gKiBAcmV0dXJuIHtTb3J0YWJsZXx1bmRlZmluZWR9ICAgICAgICAgVGhlIGluc3RhbmNlIG9mIFNvcnRhYmxlXG4gKi9cblxuU29ydGFibGUuZ2V0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnRbZXhwYW5kb107XG59O1xuLyoqXG4gKiBNb3VudCBhIHBsdWdpbiB0byBTb3J0YWJsZVxuICogQHBhcmFtICB7Li4uU29ydGFibGVQbHVnaW58U29ydGFibGVQbHVnaW5bXX0gcGx1Z2lucyAgICAgICBQbHVnaW5zIGJlaW5nIG1vdW50ZWRcbiAqL1xuXG5cblNvcnRhYmxlLm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGx1Z2lucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKHBsdWdpbnNbMF0uY29uc3RydWN0b3IgPT09IEFycmF5KSBwbHVnaW5zID0gcGx1Z2luc1swXTtcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICBpZiAoIXBsdWdpbi5wcm90b3R5cGUgfHwgIXBsdWdpbi5wcm90b3R5cGUuY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IFwiU29ydGFibGU6IE1vdW50ZWQgcGx1Z2luIG11c3QgYmUgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgbm90IFwiLmNvbmNhdCh7fS50b1N0cmluZy5jYWxsKHBsdWdpbikpO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW4udXRpbHMpIFNvcnRhYmxlLnV0aWxzID0gX29iamVjdFNwcmVhZCh7fSwgU29ydGFibGUudXRpbHMsIHBsdWdpbi51dGlscyk7XG4gICAgUGx1Z2luTWFuYWdlci5tb3VudChwbHVnaW4pO1xuICB9KTtcbn07XG4vKipcbiAqIENyZWF0ZSBzb3J0YWJsZSBpbnN0YW5jZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gIGVsXG4gKiBAcGFyYW0ge09iamVjdH0gICAgICBbb3B0aW9uc11cbiAqL1xuXG5cblNvcnRhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFNvcnRhYmxlKGVsLCBvcHRpb25zKTtcbn07IC8vIEV4cG9ydFxuXG5cblNvcnRhYmxlLnZlcnNpb24gPSB2ZXJzaW9uO1xuXG52YXIgYXV0b1Njcm9sbHMgPSBbXSxcbiAgICBzY3JvbGxFbCxcbiAgICBzY3JvbGxSb290RWwsXG4gICAgc2Nyb2xsaW5nID0gZmFsc2UsXG4gICAgbGFzdEF1dG9TY3JvbGxYLFxuICAgIGxhc3RBdXRvU2Nyb2xsWSxcbiAgICB0b3VjaEV2dCQxLFxuICAgIHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsO1xuXG5mdW5jdGlvbiBBdXRvU2Nyb2xsUGx1Z2luKCkge1xuICBmdW5jdGlvbiBBdXRvU2Nyb2xsKCkge1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBzY3JvbGw6IHRydWUsXG4gICAgICBzY3JvbGxTZW5zaXRpdml0eTogMzAsXG4gICAgICBzY3JvbGxTcGVlZDogMTAsXG4gICAgICBidWJibGVTY3JvbGw6IHRydWVcbiAgICB9OyAvLyBCaW5kIGFsbCBwcml2YXRlIG1ldGhvZHNcblxuICAgIGZvciAodmFyIGZuIGluIHRoaXMpIHtcbiAgICAgIGlmIChmbi5jaGFyQXQoMCkgPT09ICdfJyAmJiB0eXBlb2YgdGhpc1tmbl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1tmbl0gPSB0aGlzW2ZuXS5iaW5kKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEF1dG9TY3JvbGwucHJvdG90eXBlID0ge1xuICAgIGRyYWdTdGFydGVkOiBmdW5jdGlvbiBkcmFnU3RhcnRlZChfcmVmKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFdmVudCA9IF9yZWYub3JpZ2luYWxFdmVudDtcblxuICAgICAgaWYgKHRoaXMuc29ydGFibGUubmF0aXZlRHJhZ2dhYmxlKSB7XG4gICAgICAgIG9uKGRvY3VtZW50LCAnZHJhZ292ZXInLCB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3BvaW50ZXJtb3ZlJywgdGhpcy5faGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbEV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgICBvbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZUZhbGxiYWNrQXV0b1Njcm9sbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckNvbXBsZXRlZDogZnVuY3Rpb24gZHJhZ092ZXJDb21wbGV0ZWQoX3JlZjIpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV2ZW50ID0gX3JlZjIub3JpZ2luYWxFdmVudDtcblxuICAgICAgLy8gRm9yIHdoZW4gYnViYmxpbmcgaXMgY2FuY2VsZWQgYW5kIHVzaW5nIGZhbGxiYWNrIChmYWxsYmFjayAndG91Y2htb3ZlJyBhbHdheXMgcmVhY2hlZClcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRyYWdPdmVyQnViYmxlICYmICFvcmlnaW5hbEV2ZW50LnJvb3RFbCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVBdXRvU2Nyb2xsKG9yaWdpbmFsRXZlbnQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcCgpIHtcbiAgICAgIGlmICh0aGlzLnNvcnRhYmxlLm5hdGl2ZURyYWdnYWJsZSkge1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdkcmFnb3ZlcicsIHRoaXMuX2hhbmRsZUF1dG9TY3JvbGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2ZmKGRvY3VtZW50LCAncG9pbnRlcm1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgICBvZmYoZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVGYWxsYmFja0F1dG9TY3JvbGwpO1xuICAgICAgfVxuXG4gICAgICBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCk7XG4gICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICBjYW5jZWxUaHJvdHRsZSgpO1xuICAgIH0sXG4gICAgbnVsbGluZzogZnVuY3Rpb24gbnVsbGluZygpIHtcbiAgICAgIHRvdWNoRXZ0JDEgPSBzY3JvbGxSb290RWwgPSBzY3JvbGxFbCA9IHNjcm9sbGluZyA9IHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsID0gbGFzdEF1dG9TY3JvbGxYID0gbGFzdEF1dG9TY3JvbGxZID0gbnVsbDtcbiAgICAgIGF1dG9TY3JvbGxzLmxlbmd0aCA9IDA7XG4gICAgfSxcbiAgICBfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsOiBmdW5jdGlvbiBfaGFuZGxlRmFsbGJhY2tBdXRvU2Nyb2xsKGV2dCkge1xuICAgICAgdGhpcy5faGFuZGxlQXV0b1Njcm9sbChldnQsIHRydWUpO1xuICAgIH0sXG4gICAgX2hhbmRsZUF1dG9TY3JvbGw6IGZ1bmN0aW9uIF9oYW5kbGVBdXRvU2Nyb2xsKGV2dCwgZmFsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciB4ID0gKGV2dC50b3VjaGVzID8gZXZ0LnRvdWNoZXNbMF0gOiBldnQpLmNsaWVudFgsXG4gICAgICAgICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgICAgICAgIGVsZW0gPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgdG91Y2hFdnQkMSA9IGV2dDsgLy8gSUUgZG9lcyBub3Qgc2VlbSB0byBoYXZlIG5hdGl2ZSBhdXRvc2Nyb2xsLFxuICAgICAgLy8gRWRnZSdzIGF1dG9zY3JvbGwgc2VlbXMgdG9vIGNvbmRpdGlvbmFsLFxuICAgICAgLy8gTUFDT1MgU2FmYXJpIGRvZXMgbm90IGhhdmUgYXV0b3Njcm9sbCxcbiAgICAgIC8vIEZpcmVmb3ggYW5kIENocm9tZSBhcmUgZ29vZFxuXG4gICAgICBpZiAoZmFsbGJhY2sgfHwgRWRnZSB8fCBJRTExT3JMZXNzIHx8IFNhZmFyaSkge1xuICAgICAgICBhdXRvU2Nyb2xsKGV2dCwgdGhpcy5vcHRpb25zLCBlbGVtLCBmYWxsYmFjayk7IC8vIExpc3RlbmVyIGZvciBwb2ludGVyIGVsZW1lbnQgY2hhbmdlXG5cbiAgICAgICAgdmFyIG9nRWxlbVNjcm9sbGVyID0gZ2V0UGFyZW50QXV0b1Njcm9sbEVsZW1lbnQoZWxlbSwgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKHNjcm9sbGluZyAmJiAoIXBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsIHx8IHggIT09IGxhc3RBdXRvU2Nyb2xsWCB8fCB5ICE9PSBsYXN0QXV0b1Njcm9sbFkpKSB7XG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgJiYgY2xlYXJQb2ludGVyRWxlbUNoYW5nZWRJbnRlcnZhbCgpOyAvLyBEZXRlY3QgZm9yIHBvaW50ZXIgZWxlbSBjaGFuZ2UsIGVtdWxhdGluZyBuYXRpdmUgRG5EIGJlaGF2aW91clxuXG4gICAgICAgICAgcG9pbnRlckVsZW1DaGFuZ2VkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbSA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoeCwgeSksIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAobmV3RWxlbSAhPT0gb2dFbGVtU2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgb2dFbGVtU2Nyb2xsZXIgPSBuZXdFbGVtO1xuICAgICAgICAgICAgICBjbGVhckF1dG9TY3JvbGxzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF1dG9TY3JvbGwoZXZ0LCBfdGhpcy5vcHRpb25zLCBuZXdFbGVtLCBmYWxsYmFjayk7XG4gICAgICAgICAgfSwgMTApO1xuICAgICAgICAgIGxhc3RBdXRvU2Nyb2xsWCA9IHg7XG4gICAgICAgICAgbGFzdEF1dG9TY3JvbGxZID0geTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgRG5EIGlzIGVuYWJsZWQgKGFuZCBicm93c2VyIGhhcyBnb29kIGF1dG9zY3JvbGxpbmcpLCBmaXJzdCBhdXRvc2Nyb2xsIHdpbGwgYWxyZWFkeSBzY3JvbGwsIHNvIGdldCBwYXJlbnQgYXV0b3Njcm9sbCBvZiBmaXJzdCBhdXRvc2Nyb2xsXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmJ1YmJsZVNjcm9sbCB8fCBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChlbGVtLCB0cnVlKSA9PT0gZ2V0V2luZG93U2Nyb2xsaW5nRWxlbWVudCgpKSB7XG4gICAgICAgICAgY2xlYXJBdXRvU2Nyb2xscygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF1dG9TY3JvbGwoZXZ0LCB0aGlzLm9wdGlvbnMsIGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGVsZW0sIGZhbHNlKSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKEF1dG9TY3JvbGwsIHtcbiAgICBwbHVnaW5OYW1lOiAnc2Nyb2xsJyxcbiAgICBpbml0aWFsaXplQnlEZWZhdWx0OiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhckF1dG9TY3JvbGxzKCkge1xuICBhdXRvU2Nyb2xscy5mb3JFYWNoKGZ1bmN0aW9uIChhdXRvU2Nyb2xsKSB7XG4gICAgY2xlYXJJbnRlcnZhbChhdXRvU2Nyb2xsLnBpZCk7XG4gIH0pO1xuICBhdXRvU2Nyb2xscyA9IFtdO1xufVxuXG5mdW5jdGlvbiBjbGVhclBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKCkge1xuICBjbGVhckludGVydmFsKHBvaW50ZXJFbGVtQ2hhbmdlZEludGVydmFsKTtcbn1cblxudmFyIGF1dG9TY3JvbGwgPSB0aHJvdHRsZShmdW5jdGlvbiAoZXZ0LCBvcHRpb25zLCByb290RWwsIGlzRmFsbGJhY2spIHtcbiAgLy8gQnVnOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD01MDU1MjFcbiAgaWYgKCFvcHRpb25zLnNjcm9sbCkgcmV0dXJuO1xuICB2YXIgeCA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRYLFxuICAgICAgeSA9IChldnQudG91Y2hlcyA/IGV2dC50b3VjaGVzWzBdIDogZXZ0KS5jbGllbnRZLFxuICAgICAgc2VucyA9IG9wdGlvbnMuc2Nyb2xsU2Vuc2l0aXZpdHksXG4gICAgICBzcGVlZCA9IG9wdGlvbnMuc2Nyb2xsU3BlZWQsXG4gICAgICB3aW5TY3JvbGxlciA9IGdldFdpbmRvd1Njcm9sbGluZ0VsZW1lbnQoKTtcbiAgdmFyIHNjcm9sbFRoaXNJbnN0YW5jZSA9IGZhbHNlLFxuICAgICAgc2Nyb2xsQ3VzdG9tRm47IC8vIE5ldyBzY3JvbGwgcm9vdCwgc2V0IHNjcm9sbEVsXG5cbiAgaWYgKHNjcm9sbFJvb3RFbCAhPT0gcm9vdEVsKSB7XG4gICAgc2Nyb2xsUm9vdEVsID0gcm9vdEVsO1xuICAgIGNsZWFyQXV0b1Njcm9sbHMoKTtcbiAgICBzY3JvbGxFbCA9IG9wdGlvbnMuc2Nyb2xsO1xuICAgIHNjcm9sbEN1c3RvbUZuID0gb3B0aW9ucy5zY3JvbGxGbjtcblxuICAgIGlmIChzY3JvbGxFbCA9PT0gdHJ1ZSkge1xuICAgICAgc2Nyb2xsRWwgPSBnZXRQYXJlbnRBdXRvU2Nyb2xsRWxlbWVudChyb290RWwsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsYXllcnNPdXQgPSAwO1xuICB2YXIgY3VycmVudFBhcmVudCA9IHNjcm9sbEVsO1xuXG4gIGRvIHtcbiAgICB2YXIgZWwgPSBjdXJyZW50UGFyZW50LFxuICAgICAgICByZWN0ID0gZ2V0UmVjdChlbCksXG4gICAgICAgIHRvcCA9IHJlY3QudG9wLFxuICAgICAgICBib3R0b20gPSByZWN0LmJvdHRvbSxcbiAgICAgICAgbGVmdCA9IHJlY3QubGVmdCxcbiAgICAgICAgcmlnaHQgPSByZWN0LnJpZ2h0LFxuICAgICAgICB3aWR0aCA9IHJlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0LFxuICAgICAgICBjYW5TY3JvbGxYID0gdm9pZCAwLFxuICAgICAgICBjYW5TY3JvbGxZID0gdm9pZCAwLFxuICAgICAgICBzY3JvbGxXaWR0aCA9IGVsLnNjcm9sbFdpZHRoLFxuICAgICAgICBzY3JvbGxIZWlnaHQgPSBlbC5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGVsQ1NTID0gY3NzKGVsKSxcbiAgICAgICAgc2Nyb2xsUG9zWCA9IGVsLnNjcm9sbExlZnQsXG4gICAgICAgIHNjcm9sbFBvc1kgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICBpZiAoZWwgPT09IHdpblNjcm9sbGVyKSB7XG4gICAgICBjYW5TY3JvbGxYID0gd2lkdGggPCBzY3JvbGxXaWR0aCAmJiAoZWxDU1Mub3ZlcmZsb3dYID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dYID09PSAnc2Nyb2xsJyB8fCBlbENTUy5vdmVyZmxvd1ggPT09ICd2aXNpYmxlJyk7XG4gICAgICBjYW5TY3JvbGxZID0gaGVpZ2h0IDwgc2Nyb2xsSGVpZ2h0ICYmIChlbENTUy5vdmVyZmxvd1kgPT09ICdhdXRvJyB8fCBlbENTUy5vdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IGVsQ1NTLm92ZXJmbG93WSA9PT0gJ3Zpc2libGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuU2Nyb2xsWCA9IHdpZHRoIDwgc2Nyb2xsV2lkdGggJiYgKGVsQ1NTLm92ZXJmbG93WCA9PT0gJ2F1dG8nIHx8IGVsQ1NTLm92ZXJmbG93WCA9PT0gJ3Njcm9sbCcpO1xuICAgICAgY2FuU2Nyb2xsWSA9IGhlaWdodCA8IHNjcm9sbEhlaWdodCAmJiAoZWxDU1Mub3ZlcmZsb3dZID09PSAnYXV0bycgfHwgZWxDU1Mub3ZlcmZsb3dZID09PSAnc2Nyb2xsJyk7XG4gICAgfVxuXG4gICAgdmFyIHZ4ID0gY2FuU2Nyb2xsWCAmJiAoTWF0aC5hYnMocmlnaHQgLSB4KSA8PSBzZW5zICYmIHNjcm9sbFBvc1ggKyB3aWR0aCA8IHNjcm9sbFdpZHRoKSAtIChNYXRoLmFicyhsZWZ0IC0geCkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1gpO1xuICAgIHZhciB2eSA9IGNhblNjcm9sbFkgJiYgKE1hdGguYWJzKGJvdHRvbSAtIHkpIDw9IHNlbnMgJiYgc2Nyb2xsUG9zWSArIGhlaWdodCA8IHNjcm9sbEhlaWdodCkgLSAoTWF0aC5hYnModG9wIC0geSkgPD0gc2VucyAmJiAhIXNjcm9sbFBvc1kpO1xuXG4gICAgaWYgKCFhdXRvU2Nyb2xsc1tsYXllcnNPdXRdKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBsYXllcnNPdXQ7IGkrKykge1xuICAgICAgICBpZiAoIWF1dG9TY3JvbGxzW2ldKSB7XG4gICAgICAgICAgYXV0b1Njcm9sbHNbaV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhdXRvU2Nyb2xsc1tsYXllcnNPdXRdLnZ4ICE9IHZ4IHx8IGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgIT0gdnkgfHwgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5lbCAhPT0gZWwpIHtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0uZWwgPSBlbDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnggPSB2eDtcbiAgICAgIGF1dG9TY3JvbGxzW2xheWVyc091dF0udnkgPSB2eTtcbiAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQpO1xuXG4gICAgICBpZiAodnggIT0gMCB8fCB2eSAhPSAwKSB7XG4gICAgICAgIHNjcm9sbFRoaXNJbnN0YW5jZSA9IHRydWU7XG4gICAgICAgIC8qIGpzaGludCBsb29wZnVuYzp0cnVlICovXG5cbiAgICAgICAgYXV0b1Njcm9sbHNbbGF5ZXJzT3V0XS5waWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gZW11bGF0ZSBkcmFnIG92ZXIgZHVyaW5nIGF1dG9zY3JvbGwgKGZhbGxiYWNrKSwgZW11bGF0aW5nIG5hdGl2ZSBEbkQgYmVoYXZpb3VyXG4gICAgICAgICAgaWYgKGlzRmFsbGJhY2sgJiYgdGhpcy5sYXllciA9PT0gMCkge1xuICAgICAgICAgICAgU29ydGFibGUuYWN0aXZlLl9vblRvdWNoTW92ZSh0b3VjaEV2dCQxKTsgLy8gVG8gbW92ZSBnaG9zdCBpZiBpdCBpcyBwb3NpdGlvbmVkIGFic29sdXRlbHlcblxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzY3JvbGxPZmZzZXRZID0gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnkgPyBhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS52eSAqIHNwZWVkIDogMDtcbiAgICAgICAgICB2YXIgc2Nyb2xsT2Zmc2V0WCA9IGF1dG9TY3JvbGxzW3RoaXMubGF5ZXJdLnZ4ID8gYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0udnggKiBzcGVlZCA6IDA7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHNjcm9sbEN1c3RvbUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsQ3VzdG9tRm4uY2FsbChTb3J0YWJsZS5kcmFnZ2VkLnBhcmVudE5vZGVbZXhwYW5kb10sIHNjcm9sbE9mZnNldFgsIHNjcm9sbE9mZnNldFksIGV2dCwgdG91Y2hFdnQkMSwgYXV0b1Njcm9sbHNbdGhpcy5sYXllcl0uZWwpICE9PSAnY29udGludWUnKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzY3JvbGxCeShhdXRvU2Nyb2xsc1t0aGlzLmxheWVyXS5lbCwgc2Nyb2xsT2Zmc2V0WCwgc2Nyb2xsT2Zmc2V0WSk7XG4gICAgICAgIH0uYmluZCh7XG4gICAgICAgICAgbGF5ZXI6IGxheWVyc091dFxuICAgICAgICB9KSwgMjQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxheWVyc091dCsrO1xuICB9IHdoaWxlIChvcHRpb25zLmJ1YmJsZVNjcm9sbCAmJiBjdXJyZW50UGFyZW50ICE9PSB3aW5TY3JvbGxlciAmJiAoY3VycmVudFBhcmVudCA9IGdldFBhcmVudEF1dG9TY3JvbGxFbGVtZW50KGN1cnJlbnRQYXJlbnQsIGZhbHNlKSkpO1xuXG4gIHNjcm9sbGluZyA9IHNjcm9sbFRoaXNJbnN0YW5jZTsgLy8gaW4gY2FzZSBhbm90aGVyIGZ1bmN0aW9uIGNhdGNoZXMgc2Nyb2xsaW5nIGFzIGZhbHNlIGluIGJldHdlZW4gd2hlbiBpdCBpcyBub3Rcbn0sIDMwKTtcblxudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKF9yZWYpIHtcbiAgdmFyIG9yaWdpbmFsRXZlbnQgPSBfcmVmLm9yaWdpbmFsRXZlbnQsXG4gICAgICBwdXRTb3J0YWJsZSA9IF9yZWYucHV0U29ydGFibGUsXG4gICAgICBkcmFnRWwgPSBfcmVmLmRyYWdFbCxcbiAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZi5hY3RpdmVTb3J0YWJsZSxcbiAgICAgIGRpc3BhdGNoU29ydGFibGVFdmVudCA9IF9yZWYuZGlzcGF0Y2hTb3J0YWJsZUV2ZW50LFxuICAgICAgaGlkZUdob3N0Rm9yVGFyZ2V0ID0gX3JlZi5oaWRlR2hvc3RGb3JUYXJnZXQsXG4gICAgICB1bmhpZGVHaG9zdEZvclRhcmdldCA9IF9yZWYudW5oaWRlR2hvc3RGb3JUYXJnZXQ7XG4gIGlmICghb3JpZ2luYWxFdmVudCkgcmV0dXJuO1xuICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IGFjdGl2ZVNvcnRhYmxlO1xuICBoaWRlR2hvc3RGb3JUYXJnZXQoKTtcbiAgdmFyIHRvdWNoID0gb3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcyAmJiBvcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IG9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBvcmlnaW5hbEV2ZW50O1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcbiAgdW5oaWRlR2hvc3RGb3JUYXJnZXQoKTtcblxuICBpZiAodG9Tb3J0YWJsZSAmJiAhdG9Tb3J0YWJsZS5lbC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdzcGlsbCcpO1xuICAgIHRoaXMub25TcGlsbCh7XG4gICAgICBkcmFnRWw6IGRyYWdFbCxcbiAgICAgIHB1dFNvcnRhYmxlOiBwdXRTb3J0YWJsZVxuICAgIH0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBSZXZlcnQoKSB7fVxuXG5SZXZlcnQucHJvdG90eXBlID0ge1xuICBzdGFydEluZGV4OiBudWxsLFxuICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmMikge1xuICAgIHZhciBvbGREcmFnZ2FibGVJbmRleCA9IF9yZWYyLm9sZERyYWdnYWJsZUluZGV4O1xuICAgIHRoaXMuc3RhcnRJbmRleCA9IG9sZERyYWdnYWJsZUluZGV4O1xuICB9LFxuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWYzKSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWYzLmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZTtcbiAgICB0aGlzLnNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgaWYgKHB1dFNvcnRhYmxlKSB7XG4gICAgICBwdXRTb3J0YWJsZS5jYXB0dXJlQW5pbWF0aW9uU3RhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBnZXRDaGlsZCh0aGlzLnNvcnRhYmxlLmVsLCB0aGlzLnN0YXJ0SW5kZXgsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAobmV4dFNpYmxpbmcpIHtcbiAgICAgIHRoaXMuc29ydGFibGUuZWwuaW5zZXJ0QmVmb3JlKGRyYWdFbCwgbmV4dFNpYmxpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNvcnRhYmxlLmVsLmFwcGVuZENoaWxkKGRyYWdFbCk7XG4gICAgfVxuXG4gICAgdGhpcy5zb3J0YWJsZS5hbmltYXRlQWxsKCk7XG5cbiAgICBpZiAocHV0U29ydGFibGUpIHtcbiAgICAgIHB1dFNvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICB9XG4gIH0sXG4gIGRyb3A6IGRyb3Bcbn07XG5cbl9leHRlbmRzKFJldmVydCwge1xuICBwbHVnaW5OYW1lOiAncmV2ZXJ0T25TcGlsbCdcbn0pO1xuXG5mdW5jdGlvbiBSZW1vdmUoKSB7fVxuXG5SZW1vdmUucHJvdG90eXBlID0ge1xuICBvblNwaWxsOiBmdW5jdGlvbiBvblNwaWxsKF9yZWY0KSB7XG4gICAgdmFyIGRyYWdFbCA9IF9yZWY0LmRyYWdFbCxcbiAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmNC5wdXRTb3J0YWJsZTtcbiAgICB2YXIgcGFyZW50U29ydGFibGUgPSBwdXRTb3J0YWJsZSB8fCB0aGlzLnNvcnRhYmxlO1xuICAgIHBhcmVudFNvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgIGRyYWdFbC5wYXJlbnROb2RlICYmIGRyYWdFbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRyYWdFbCk7XG4gICAgcGFyZW50U29ydGFibGUuYW5pbWF0ZUFsbCgpO1xuICB9LFxuICBkcm9wOiBkcm9wXG59O1xuXG5fZXh0ZW5kcyhSZW1vdmUsIHtcbiAgcGx1Z2luTmFtZTogJ3JlbW92ZU9uU3BpbGwnXG59KTtcblxudmFyIGxhc3RTd2FwRWw7XG5cbmZ1bmN0aW9uIFN3YXBQbHVnaW4oKSB7XG4gIGZ1bmN0aW9uIFN3YXAoKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IHtcbiAgICAgIHN3YXBDbGFzczogJ3NvcnRhYmxlLXN3YXAtaGlnaGxpZ2h0J1xuICAgIH07XG4gIH1cblxuICBTd2FwLnByb3RvdHlwZSA9IHtcbiAgICBkcmFnU3RhcnQ6IGZ1bmN0aW9uIGRyYWdTdGFydChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ0VsID0gX3JlZi5kcmFnRWw7XG4gICAgICBsYXN0U3dhcEVsID0gZHJhZ0VsO1xuICAgIH0sXG4gICAgZHJhZ092ZXJWYWxpZDogZnVuY3Rpb24gZHJhZ092ZXJWYWxpZChfcmVmMikge1xuICAgICAgdmFyIGNvbXBsZXRlZCA9IF9yZWYyLmNvbXBsZXRlZCxcbiAgICAgICAgICB0YXJnZXQgPSBfcmVmMi50YXJnZXQsXG4gICAgICAgICAgb25Nb3ZlID0gX3JlZjIub25Nb3ZlLFxuICAgICAgICAgIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjIuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgY2hhbmdlZCA9IF9yZWYyLmNoYW5nZWQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjIuY2FuY2VsO1xuICAgICAgaWYgKCFhY3RpdmVTb3J0YWJsZS5vcHRpb25zLnN3YXApIHJldHVybjtcbiAgICAgIHZhciBlbCA9IHRoaXMuc29ydGFibGUuZWwsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IGVsKSB7XG4gICAgICAgIHZhciBwcmV2U3dhcEVsID0gbGFzdFN3YXBFbDtcblxuICAgICAgICBpZiAob25Nb3ZlKHRhcmdldCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3ModGFyZ2V0LCBvcHRpb25zLnN3YXBDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgbGFzdFN3YXBFbCA9IHRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2U3dhcEVsICYmIHByZXZTd2FwRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhwcmV2U3dhcEVsLCBvcHRpb25zLnN3YXBDbGFzcywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoYW5nZWQoKTtcbiAgICAgIGNvbXBsZXRlZCh0cnVlKTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgZHJvcDogZnVuY3Rpb24gZHJvcChfcmVmMykge1xuICAgICAgdmFyIGFjdGl2ZVNvcnRhYmxlID0gX3JlZjMuYWN0aXZlU29ydGFibGUsXG4gICAgICAgICAgcHV0U29ydGFibGUgPSBfcmVmMy5wdXRTb3J0YWJsZSxcbiAgICAgICAgICBkcmFnRWwgPSBfcmVmMy5kcmFnRWw7XG4gICAgICB2YXIgdG9Tb3J0YWJsZSA9IHB1dFNvcnRhYmxlIHx8IHRoaXMuc29ydGFibGU7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgIGxhc3RTd2FwRWwgJiYgdG9nZ2xlQ2xhc3MobGFzdFN3YXBFbCwgb3B0aW9ucy5zd2FwQ2xhc3MsIGZhbHNlKTtcblxuICAgICAgaWYgKGxhc3RTd2FwRWwgJiYgKG9wdGlvbnMuc3dhcCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5vcHRpb25zLnN3YXApKSB7XG4gICAgICAgIGlmIChkcmFnRWwgIT09IGxhc3RTd2FwRWwpIHtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIGlmICh0b1NvcnRhYmxlICE9PSBhY3RpdmVTb3J0YWJsZSkgYWN0aXZlU29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG4gICAgICAgICAgc3dhcE5vZGVzKGRyYWdFbCwgbGFzdFN3YXBFbCk7XG4gICAgICAgICAgdG9Tb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgICAgaWYgKHRvU29ydGFibGUgIT09IGFjdGl2ZVNvcnRhYmxlKSBhY3RpdmVTb3J0YWJsZS5hbmltYXRlQWxsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmc6IGZ1bmN0aW9uIG51bGxpbmcoKSB7XG4gICAgICBsYXN0U3dhcEVsID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyhTd2FwLCB7XG4gICAgcGx1Z2luTmFtZTogJ3N3YXAnLFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3dhcEl0ZW06IGxhc3RTd2FwRWxcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3dhcE5vZGVzKG4xLCBuMikge1xuICB2YXIgcDEgPSBuMS5wYXJlbnROb2RlLFxuICAgICAgcDIgPSBuMi5wYXJlbnROb2RlLFxuICAgICAgaTEsXG4gICAgICBpMjtcbiAgaWYgKCFwMSB8fCAhcDIgfHwgcDEuaXNFcXVhbE5vZGUobjIpIHx8IHAyLmlzRXF1YWxOb2RlKG4xKSkgcmV0dXJuO1xuICBpMSA9IGluZGV4KG4xKTtcbiAgaTIgPSBpbmRleChuMik7XG5cbiAgaWYgKHAxLmlzRXF1YWxOb2RlKHAyKSAmJiBpMSA8IGkyKSB7XG4gICAgaTIrKztcbiAgfVxuXG4gIHAxLmluc2VydEJlZm9yZShuMiwgcDEuY2hpbGRyZW5baTFdKTtcbiAgcDIuaW5zZXJ0QmVmb3JlKG4xLCBwMi5jaGlsZHJlbltpMl0pO1xufVxuXG52YXIgbXVsdGlEcmFnRWxlbWVudHMgPSBbXSxcbiAgICBtdWx0aURyYWdDbG9uZXMgPSBbXSxcbiAgICBsYXN0TXVsdGlEcmFnU2VsZWN0LFxuICAgIC8vIGZvciBzZWxlY3Rpb24gd2l0aCBtb2RpZmllciBrZXkgZG93biAoU0hJRlQpXG5tdWx0aURyYWdTb3J0YWJsZSxcbiAgICBpbml0aWFsRm9sZGluZyA9IGZhbHNlLFxuICAgIC8vIEluaXRpYWwgbXVsdGktZHJhZyBmb2xkIHdoZW4gZHJhZyBzdGFydGVkXG5mb2xkaW5nID0gZmFsc2UsXG4gICAgLy8gRm9sZGluZyBhbnkgb3RoZXIgdGltZVxuZHJhZ1N0YXJ0ZWQgPSBmYWxzZSxcbiAgICBkcmFnRWwkMSxcbiAgICBjbG9uZXNGcm9tUmVjdCxcbiAgICBjbG9uZXNIaWRkZW47XG5cbmZ1bmN0aW9uIE11bHRpRHJhZ1BsdWdpbigpIHtcbiAgZnVuY3Rpb24gTXVsdGlEcmFnKHNvcnRhYmxlKSB7XG4gICAgLy8gQmluZCBhbGwgcHJpdmF0ZSBtZXRob2RzXG4gICAgZm9yICh2YXIgZm4gaW4gdGhpcykge1xuICAgICAgaWYgKGZuLmNoYXJBdCgwKSA9PT0gJ18nICYmIHR5cGVvZiB0aGlzW2ZuXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzW2ZuXSA9IHRoaXNbZm5dLmJpbmQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNvcnRhYmxlLm9wdGlvbnMuc3VwcG9ydFBvaW50ZXIpIHtcbiAgICAgIG9uKGRvY3VtZW50LCAncG9pbnRlcnVwJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcpO1xuICAgIH1cblxuICAgIG9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMuX2NoZWNrS2V5RG93bik7XG4gICAgb24oZG9jdW1lbnQsICdrZXl1cCcsIHRoaXMuX2NoZWNrS2V5VXApO1xuICAgIHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgICBzZWxlY3RlZENsYXNzOiAnc29ydGFibGUtc2VsZWN0ZWQnLFxuICAgICAgbXVsdGlEcmFnS2V5OiBudWxsLFxuICAgICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhVHJhbnNmZXIsIGRyYWdFbCkge1xuICAgICAgICB2YXIgZGF0YSA9ICcnO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgZGF0YSArPSAoIWkgPyAnJyA6ICcsICcpICsgbXVsdGlEcmFnRWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gZHJhZ0VsLnRleHRDb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVRyYW5zZmVyLnNldERhdGEoJ1RleHQnLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgTXVsdGlEcmFnLnByb3RvdHlwZSA9IHtcbiAgICBtdWx0aURyYWdLZXlEb3duOiBmYWxzZSxcbiAgICBpc011bHRpRHJhZzogZmFsc2UsXG4gICAgZGVsYXlTdGFydEdsb2JhbDogZnVuY3Rpb24gZGVsYXlTdGFydEdsb2JhbChfcmVmKSB7XG4gICAgICB2YXIgZHJhZ2dlZCA9IF9yZWYuZHJhZ0VsO1xuICAgICAgZHJhZ0VsJDEgPSBkcmFnZ2VkO1xuICAgIH0sXG4gICAgZGVsYXlFbmRlZDogZnVuY3Rpb24gZGVsYXlFbmRlZCgpIHtcbiAgICAgIHRoaXMuaXNNdWx0aURyYWcgPSB+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSk7XG4gICAgfSxcbiAgICBzZXR1cENsb25lOiBmdW5jdGlvbiBzZXR1cENsb25lKF9yZWYyKSB7XG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmMi5zb3J0YWJsZSxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmMi5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdWx0aURyYWdFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMucHVzaChjbG9uZShtdWx0aURyYWdFbGVtZW50c1tpXSkpO1xuICAgICAgICBtdWx0aURyYWdDbG9uZXNbaV0uc29ydGFibGVJbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzW2ldLnNvcnRhYmxlSW5kZXg7XG4gICAgICAgIG11bHRpRHJhZ0Nsb25lc1tpXS5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgbXVsdGlEcmFnQ2xvbmVzW2ldLnN0eWxlWyd3aWxsLWNoYW5nZSddID0gJyc7XG4gICAgICAgIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHNbaV0gPT09IGRyYWdFbCQxICYmIHRvZ2dsZUNsYXNzKG11bHRpRHJhZ0Nsb25lc1tpXSwgdGhpcy5vcHRpb25zLmNob3NlbkNsYXNzLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHNvcnRhYmxlLl9oaWRlQ2xvbmUoKTtcblxuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoX3JlZjMpIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYzLnNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYzLnJvb3RFbCxcbiAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQgPSBfcmVmMy5kaXNwYXRjaFNvcnRhYmxlRXZlbnQsXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjMuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnJlbW92ZUNsb25lT25IaWRlKSB7XG4gICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggJiYgbXVsdGlEcmFnU29ydGFibGUgPT09IHNvcnRhYmxlKSB7XG4gICAgICAgICAgaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKHRydWUsIHJvb3RFbCk7XG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50KCdjbG9uZScpO1xuICAgICAgICAgIGNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93Q2xvbmU6IGZ1bmN0aW9uIHNob3dDbG9uZShfcmVmNCkge1xuICAgICAgdmFyIGNsb25lTm93U2hvd24gPSBfcmVmNC5jbG9uZU5vd1Nob3duLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY0LnJvb3RFbCxcbiAgICAgICAgICBjYW5jZWwgPSBfcmVmNC5jYW5jZWw7XG4gICAgICBpZiAoIXRoaXMuaXNNdWx0aURyYWcpIHJldHVybjtcbiAgICAgIGluc2VydE11bHRpRHJhZ0Nsb25lcyhmYWxzZSwgcm9vdEVsKTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICBjc3MoY2xvbmUsICdkaXNwbGF5JywgJycpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZU5vd1Nob3duKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSBmYWxzZTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH0sXG4gICAgaGlkZUNsb25lOiBmdW5jdGlvbiBoaWRlQ2xvbmUoX3JlZjUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWY1LnNvcnRhYmxlLFxuICAgICAgICAgIGNsb25lTm93SGlkZGVuID0gX3JlZjUuY2xvbmVOb3dIaWRkZW4sXG4gICAgICAgICAgY2FuY2VsID0gX3JlZjUuY2FuY2VsO1xuICAgICAgaWYgKCF0aGlzLmlzTXVsdGlEcmFnKSByZXR1cm47XG4gICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgY3NzKGNsb25lLCAnZGlzcGxheScsICdub25lJyk7XG5cbiAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMucmVtb3ZlQ2xvbmVPbkhpZGUgJiYgY2xvbmUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsb25lTm93SGlkZGVuKCk7XG4gICAgICBjbG9uZXNIaWRkZW4gPSB0cnVlO1xuICAgICAgY2FuY2VsKCk7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRHbG9iYWw6IGZ1bmN0aW9uIGRyYWdTdGFydEdsb2JhbChfcmVmNikge1xuICAgICAgdmFyIHNvcnRhYmxlID0gX3JlZjYuc29ydGFibGU7XG5cbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZyAmJiBtdWx0aURyYWdTb3J0YWJsZSkge1xuICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG4gICAgICB9XG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICB9KTsgLy8gU29ydCBtdWx0aS1kcmFnIGVsZW1lbnRzXG5cbiAgICAgIG11bHRpRHJhZ0VsZW1lbnRzID0gbXVsdGlEcmFnRWxlbWVudHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5zb3J0YWJsZUluZGV4IC0gYi5zb3J0YWJsZUluZGV4O1xuICAgICAgfSk7XG4gICAgICBkcmFnU3RhcnRlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkcmFnU3RhcnRlZDogZnVuY3Rpb24gZHJhZ1N0YXJ0ZWQoX3JlZjcpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc29ydGFibGUgPSBfcmVmNy5zb3J0YWJsZTtcbiAgICAgIGlmICghdGhpcy5pc011bHRpRHJhZykgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNvcnQpIHtcbiAgICAgICAgLy8gQ2FwdHVyZSByZWN0cyxcbiAgICAgICAgLy8gaGlkZSBtdWx0aSBkcmFnIGVsZW1lbnRzIChieSBwb3NpdGlvbmluZyB0aGVtIGFic29sdXRlKSxcbiAgICAgICAgLy8gc2V0IG11bHRpIGRyYWcgZWxlbWVudHMgcmVjdHMgdG8gZHJhZ1JlY3QsXG4gICAgICAgIC8vIHNob3cgbXVsdGkgZHJhZyBlbGVtZW50cyxcbiAgICAgICAgLy8gYW5pbWF0ZSB0byByZWN0cyxcbiAgICAgICAgLy8gdW5zZXQgcmVjdHMgJiByZW1vdmUgZnJvbSBET01cbiAgICAgICAgc29ydGFibGUuY2FwdHVyZUFuaW1hdGlvblN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pIHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICAgICAgICAgIGNzcyhtdWx0aURyYWdFbGVtZW50LCAncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxLCBmYWxzZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG11bHRpRHJhZ0VsZW1lbnQgPT09IGRyYWdFbCQxKSByZXR1cm47XG4gICAgICAgICAgICBzZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQsIGRyYWdSZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb2xkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBpbml0aWFsRm9sZGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc29ydGFibGUuYW5pbWF0ZUFsbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoX3RoaXMyLm9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgdW5zZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFJlbW92ZSBhbGwgYXV4aWxpYXJ5IG11bHRpZHJhZyBpdGVtcyBmcm9tIGVsLCBpZiBzb3J0aW5nIGVuYWJsZWRcblxuXG4gICAgICAgIGlmIChfdGhpczIub3B0aW9ucy5zb3J0KSB7XG4gICAgICAgICAgcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkcmFnT3ZlcjogZnVuY3Rpb24gZHJhZ092ZXIoX3JlZjgpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBfcmVmOC50YXJnZXQsXG4gICAgICAgICAgY29tcGxldGVkID0gX3JlZjguY29tcGxldGVkLFxuICAgICAgICAgIGNhbmNlbCA9IF9yZWY4LmNhbmNlbDtcblxuICAgICAgaWYgKGZvbGRpbmcgJiYgfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YodGFyZ2V0KSkge1xuICAgICAgICBjb21wbGV0ZWQoZmFsc2UpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJldmVydDogZnVuY3Rpb24gcmV2ZXJ0KF9yZWY5KSB7XG4gICAgICB2YXIgZnJvbVNvcnRhYmxlID0gX3JlZjkuZnJvbVNvcnRhYmxlLFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWY5LnJvb3RFbCxcbiAgICAgICAgICBzb3J0YWJsZSA9IF9yZWY5LnNvcnRhYmxlLFxuICAgICAgICAgIGRyYWdSZWN0ID0gX3JlZjkuZHJhZ1JlY3Q7XG5cbiAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIFNldHVwIHVuZm9sZCBhbmltYXRpb25cbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgIHNvcnRhYmxlLmFkZEFuaW1hdGlvblN0YXRlKHtcbiAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgIHJlY3Q6IGZvbGRpbmcgPyBnZXRSZWN0KG11bHRpRHJhZ0VsZW1lbnQpIDogZHJhZ1JlY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB1bnNldFJlY3QobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudC5mcm9tUmVjdCA9IGRyYWdSZWN0O1xuICAgICAgICAgIGZyb21Tb3J0YWJsZS5yZW1vdmVBbmltYXRpb25TdGF0ZShtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvbGRpbmcgPSBmYWxzZTtcbiAgICAgICAgaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoIXRoaXMub3B0aW9ucy5yZW1vdmVDbG9uZU9uSGlkZSwgcm9vdEVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQ29tcGxldGVkOiBmdW5jdGlvbiBkcmFnT3ZlckNvbXBsZXRlZChfcmVmMTApIHtcbiAgICAgIHZhciBzb3J0YWJsZSA9IF9yZWYxMC5zb3J0YWJsZSxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjEwLmlzT3duZXIsXG4gICAgICAgICAgaW5zZXJ0aW9uID0gX3JlZjEwLmluc2VydGlvbixcbiAgICAgICAgICBhY3RpdmVTb3J0YWJsZSA9IF9yZWYxMC5hY3RpdmVTb3J0YWJsZSxcbiAgICAgICAgICBwYXJlbnRFbCA9IF9yZWYxMC5wYXJlbnRFbCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMC5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgIC8vIENsb25lcyBtdXN0IGJlIGhpZGRlbiBiZWZvcmUgZm9sZGluZyBhbmltYXRpb24gdG8gY2FwdHVyZSBkcmFnUmVjdEFic29sdXRlIHByb3Blcmx5XG4gICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgYWN0aXZlU29ydGFibGUuX2hpZGVDbG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdGlhbEZvbGRpbmcgPSBmYWxzZTsgLy8gSWYgbGVhdmluZyBzb3J0OmZhbHNlIHJvb3QsIG9yIGFscmVhZHkgZm9sZGluZyAtIEZvbGQgdG8gbmV3IGxvY2F0aW9uXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEgJiYgKGZvbGRpbmcgfHwgIWlzT3duZXIgJiYgIWFjdGl2ZVNvcnRhYmxlLm9wdGlvbnMuc29ydCAmJiAhcHV0U29ydGFibGUpKSB7XG4gICAgICAgICAgLy8gRm9sZDogU2V0IGFsbCBtdWx0aSBkcmFnIGVsZW1lbnRzJ3MgcmVjdHMgdG8gZHJhZ0VsJ3MgcmVjdCB3aGVuIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGludmlzaWJsZVxuICAgICAgICAgIHZhciBkcmFnUmVjdEFic29sdXRlID0gZ2V0UmVjdChkcmFnRWwkMSwgZmFsc2UsIHRydWUsIHRydWUpO1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50ID09PSBkcmFnRWwkMSkgcmV0dXJuO1xuICAgICAgICAgICAgc2V0UmVjdChtdWx0aURyYWdFbGVtZW50LCBkcmFnUmVjdEFic29sdXRlKTsgLy8gTW92ZSBlbGVtZW50KHMpIHRvIGVuZCBvZiBwYXJlbnRFbCBzbyB0aGF0IGl0IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIG11bHRpLWRyYWcgY2xvbmVzIGluc2VydGlvbiBpZiB0aGV5IGFyZSBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gd2hpbGUgZm9sZGluZywgYW5kIHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgdGhlbSBhZ2FpbiBiZWNhdXNlIG9sZCBzb3J0YWJsZSB3aWxsIG5vIGxvbmdlciBiZSBmcm9tU29ydGFibGVcblxuICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZm9sZGluZyA9IHRydWU7XG4gICAgICAgIH0gLy8gQ2xvbmVzIG11c3QgYmUgc2hvd24gKGFuZCBjaGVjayB0byByZW1vdmUgbXVsdGkgZHJhZ3MpIGFmdGVyIGZvbGRpbmcgd2hlbiBpbnRlcmZlcmluZyBtdWx0aURyYWdFbGVtZW50cyBhcmUgbW92ZWQgb3V0XG5cblxuICAgICAgICBpZiAoIWlzT3duZXIpIHtcbiAgICAgICAgICAvLyBPbmx5IHJlbW92ZSBpZiBub3QgZm9sZGluZyAoZm9sZGluZyB3aWxsIHJlbW92ZSB0aGVtIGFueXdheXMpXG4gICAgICAgICAgaWYgKCFmb2xkaW5nKSB7XG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtdWx0aURyYWdFbGVtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgY2xvbmVzSGlkZGVuQmVmb3JlID0gY2xvbmVzSGlkZGVuO1xuXG4gICAgICAgICAgICBhY3RpdmVTb3J0YWJsZS5fc2hvd0Nsb25lKHNvcnRhYmxlKTsgLy8gVW5mb2xkIGFuaW1hdGlvbiBmb3IgY2xvbmVzIGlmIHNob3dpbmcgZnJvbSBoaWRkZW5cblxuXG4gICAgICAgICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWNsb25lc0hpZGRlbiAmJiBjbG9uZXNIaWRkZW5CZWZvcmUpIHtcbiAgICAgICAgICAgICAgbXVsdGlEcmFnQ2xvbmVzLmZvckVhY2goZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuYWRkQW5pbWF0aW9uU3RhdGUoe1xuICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBjbG9uZSxcbiAgICAgICAgICAgICAgICAgIHJlY3Q6IGNsb25lc0Zyb21SZWN0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2xvbmUuZnJvbVJlY3QgPSBjbG9uZXNGcm9tUmVjdDtcbiAgICAgICAgICAgICAgICBjbG9uZS50aGlzQW5pbWF0aW9uRHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aXZlU29ydGFibGUuX3Nob3dDbG9uZShzb3J0YWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkcmFnT3ZlckFuaW1hdGlvbkNhcHR1cmU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ2FwdHVyZShfcmVmMTEpIHtcbiAgICAgIHZhciBkcmFnUmVjdCA9IF9yZWYxMS5kcmFnUmVjdCxcbiAgICAgICAgICBpc093bmVyID0gX3JlZjExLmlzT3duZXIsXG4gICAgICAgICAgYWN0aXZlU29ydGFibGUgPSBfcmVmMTEuYWN0aXZlU29ydGFibGU7XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnQudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aXZlU29ydGFibGUub3B0aW9ucy5hbmltYXRpb24gJiYgIWlzT3duZXIgJiYgYWN0aXZlU29ydGFibGUubXVsdGlEcmFnLmlzTXVsdGlEcmFnKSB7XG4gICAgICAgIGNsb25lc0Zyb21SZWN0ID0gX2V4dGVuZHMoe30sIGRyYWdSZWN0KTtcbiAgICAgICAgdmFyIGRyYWdNYXRyaXggPSBtYXRyaXgoZHJhZ0VsJDEsIHRydWUpO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC50b3AgLT0gZHJhZ01hdHJpeC5mO1xuICAgICAgICBjbG9uZXNGcm9tUmVjdC5sZWZ0IC09IGRyYWdNYXRyaXguZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGU6IGZ1bmN0aW9uIGRyYWdPdmVyQW5pbWF0aW9uQ29tcGxldGUoKSB7XG4gICAgICBpZiAoZm9sZGluZykge1xuICAgICAgICBmb2xkaW5nID0gZmFsc2U7XG4gICAgICAgIHJlbW92ZU11bHRpRHJhZ0VsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkcm9wOiBmdW5jdGlvbiBkcm9wKF9yZWYxMikge1xuICAgICAgdmFyIGV2dCA9IF9yZWYxMi5vcmlnaW5hbEV2ZW50LFxuICAgICAgICAgIHJvb3RFbCA9IF9yZWYxMi5yb290RWwsXG4gICAgICAgICAgcGFyZW50RWwgPSBfcmVmMTIucGFyZW50RWwsXG4gICAgICAgICAgc29ydGFibGUgPSBfcmVmMTIuc29ydGFibGUsXG4gICAgICAgICAgZGlzcGF0Y2hTb3J0YWJsZUV2ZW50ID0gX3JlZjEyLmRpc3BhdGNoU29ydGFibGVFdmVudCxcbiAgICAgICAgICBvbGRJbmRleCA9IF9yZWYxMi5vbGRJbmRleCxcbiAgICAgICAgICBwdXRTb3J0YWJsZSA9IF9yZWYxMi5wdXRTb3J0YWJsZTtcbiAgICAgIHZhciB0b1NvcnRhYmxlID0gcHV0U29ydGFibGUgfHwgdGhpcy5zb3J0YWJsZTtcbiAgICAgIGlmICghZXZ0KSByZXR1cm47XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBjaGlsZHJlbiA9IHBhcmVudEVsLmNoaWxkcmVuOyAvLyBNdWx0aS1kcmFnIHNlbGVjdGlvblxuXG4gICAgICBpZiAoIWRyYWdTdGFydGVkKSB7XG4gICAgICAgIGlmIChvcHRpb25zLm11bHRpRHJhZ0tleSAmJiAhdGhpcy5tdWx0aURyYWdLZXlEb3duKSB7XG4gICAgICAgICAgdGhpcy5fZGVzZWxlY3RNdWx0aURyYWcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRvZ2dsZUNsYXNzKGRyYWdFbCQxLCBvcHRpb25zLnNlbGVjdGVkQ2xhc3MsICF+bXVsdGlEcmFnRWxlbWVudHMuaW5kZXhPZihkcmFnRWwkMSkpO1xuXG4gICAgICAgIGlmICghfm11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpKSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChkcmFnRWwkMSk7XG4gICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgdGFyZ2V0RWw6IGRyYWdFbCQxLFxuICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgIH0pOyAvLyBNb2RpZmllciBhY3RpdmF0ZWQsIHNlbGVjdCBmcm9tIGxhc3QgdG8gZHJhZ0VsXG5cbiAgICAgICAgICBpZiAoZXZ0LnNoaWZ0S2V5ICYmIGxhc3RNdWx0aURyYWdTZWxlY3QgJiYgc29ydGFibGUuZWwuY29udGFpbnMobGFzdE11bHRpRHJhZ1NlbGVjdCkpIHtcbiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSBpbmRleChsYXN0TXVsdGlEcmFnU2VsZWN0KSxcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleChkcmFnRWwkMSk7XG5cbiAgICAgICAgICAgIGlmICh+bGFzdEluZGV4ICYmIH5jdXJyZW50SW5kZXggJiYgbGFzdEluZGV4ICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgLy8gTXVzdCBpbmNsdWRlIGxhc3RNdWx0aURyYWdTZWxlY3QgKHNlbGVjdCBpdCksIGluIGNhc2UgbW9kaWZpZWQgc2VsZWN0aW9uIGZyb20gbm8gc2VsZWN0aW9uXG4gICAgICAgICAgICAgIC8vIChidXQgcHJldmlvdXMgc2VsZWN0aW9uIGV4aXN0ZWQpXG4gICAgICAgICAgICAgIHZhciBuLCBpO1xuXG4gICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpID0gbGFzdEluZGV4O1xuICAgICAgICAgICAgICAgIG4gPSBjdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICBuID0gbGFzdEluZGV4ICsgMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZvciAoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGNoaWxkcmVuW2ldKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3MoY2hpbGRyZW5baV0sIG9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgICAgICAgICBzb3J0YWJsZTogc29ydGFibGUsXG4gICAgICAgICAgICAgICAgICByb290RWw6IHJvb3RFbCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0RWw6IGNoaWxkcmVuW2ldLFxuICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdnQ6IGV2dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3RNdWx0aURyYWdTZWxlY3QgPSBkcmFnRWwkMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHRvU29ydGFibGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZHJhZ0VsJDEpLCAxKTtcbiAgICAgICAgICBsYXN0TXVsdGlEcmFnU2VsZWN0ID0gbnVsbDtcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICAgIHNvcnRhYmxlOiBzb3J0YWJsZSxcbiAgICAgICAgICAgIHJvb3RFbDogcm9vdEVsLFxuICAgICAgICAgICAgbmFtZTogJ2Rlc2VsZWN0JyxcbiAgICAgICAgICAgIHRhcmdldEVsOiBkcmFnRWwkMSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBNdWx0aS1kcmFnIGRyb3BcblxuXG4gICAgICBpZiAoZHJhZ1N0YXJ0ZWQgJiYgdGhpcy5pc011bHRpRHJhZykge1xuICAgICAgICAvLyBEbyBub3QgXCJ1bmZvbGRcIiBhZnRlciBhcm91bmQgZHJhZ0VsIGlmIHJldmVydGVkXG4gICAgICAgIGlmICgocGFyZW50RWxbZXhwYW5kb10ub3B0aW9ucy5zb3J0IHx8IHBhcmVudEVsICE9PSByb290RWwpICYmIG11bHRpRHJhZ0VsZW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB2YXIgZHJhZ1JlY3QgPSBnZXRSZWN0KGRyYWdFbCQxKSxcbiAgICAgICAgICAgICAgbXVsdGlEcmFnSW5kZXggPSBpbmRleChkcmFnRWwkMSwgJzpub3QoLicgKyB0aGlzLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcyArICcpJyk7XG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZyAmJiBvcHRpb25zLmFuaW1hdGlvbikgZHJhZ0VsJDEudGhpc0FuaW1hdGlvbkR1cmF0aW9uID0gbnVsbDtcbiAgICAgICAgICB0b1NvcnRhYmxlLmNhcHR1cmVBbmltYXRpb25TdGF0ZSgpO1xuXG4gICAgICAgICAgaWYgKCFpbml0aWFsRm9sZGluZykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgIGRyYWdFbCQxLmZyb21SZWN0ID0gZHJhZ1JlY3Q7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBtdWx0aURyYWdFbGVtZW50LnRoaXNBbmltYXRpb25EdXJhdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudCAhPT0gZHJhZ0VsJDEpIHtcbiAgICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZm9sZGluZyA/IGdldFJlY3QobXVsdGlEcmFnRWxlbWVudCkgOiBkcmFnUmVjdDtcbiAgICAgICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQuZnJvbVJlY3QgPSByZWN0OyAvLyBQcmVwYXJlIHVuZm9sZCBhbmltYXRpb25cblxuICAgICAgICAgICAgICAgICAgdG9Tb3J0YWJsZS5hZGRBbmltYXRpb25TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbXVsdGlEcmFnRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgcmVjdDogcmVjdFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gLy8gTXVsdGkgZHJhZyBlbGVtZW50cyBhcmUgbm90IG5lY2Vzc2FyaWx5IHJlbW92ZWQgZnJvbSB0aGUgRE9NIG9uIGRyb3AsIHNvIHRvIHJlaW5zZXJ0XG4gICAgICAgICAgICAvLyBwcm9wZXJseSB0aGV5IG11c3QgYWxsIGJlIHJlbW92ZWRcblxuXG4gICAgICAgICAgICByZW1vdmVNdWx0aURyYWdFbGVtZW50cygpO1xuICAgICAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAobXVsdGlEcmFnRWxlbWVudCkge1xuICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bbXVsdGlEcmFnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIGNoaWxkcmVuW211bHRpRHJhZ0luZGV4XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50RWwuYXBwZW5kQ2hpbGQobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBtdWx0aURyYWdJbmRleCsrO1xuICAgICAgICAgICAgfSk7IC8vIElmIGluaXRpYWwgZm9sZGluZyBpcyBkb25lLCB0aGUgZWxlbWVudHMgbWF5IGhhdmUgY2hhbmdlZCBwb3NpdGlvbiBiZWNhdXNlIHRoZXkgYXJlIG5vd1xuICAgICAgICAgICAgLy8gdW5mb2xkaW5nIGFyb3VuZCBkcmFnRWwsIGV2ZW4gdGhvdWdoIGRyYWdFbCBtYXkgbm90IGhhdmUgaGlzIGluZGV4IGNoYW5nZWQsIHNvIHVwZGF0ZSBldmVudFxuICAgICAgICAgICAgLy8gbXVzdCBiZSBmaXJlZCBoZXJlIGFzIFNvcnRhYmxlIHdpbGwgbm90LlxuXG4gICAgICAgICAgICBpZiAob2xkSW5kZXggPT09IGluZGV4KGRyYWdFbCQxKSkge1xuICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAobXVsdGlEcmFnRWxlbWVudC5zb3J0YWJsZUluZGV4ICE9PSBpbmRleChtdWx0aURyYWdFbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFNvcnRhYmxlRXZlbnQoJ3VwZGF0ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBNdXN0IGJlIGRvbmUgYWZ0ZXIgY2FwdHVyaW5nIGluZGl2aWR1YWwgcmVjdHMgKHNjcm9sbCBiYXIpXG5cblxuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHVuc2V0UmVjdChtdWx0aURyYWdFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0b1NvcnRhYmxlLmFuaW1hdGVBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG11bHRpRHJhZ1NvcnRhYmxlID0gdG9Tb3J0YWJsZTtcbiAgICAgIH0gLy8gUmVtb3ZlIGNsb25lcyBpZiBuZWNlc3NhcnlcblxuXG4gICAgICBpZiAocm9vdEVsID09PSBwYXJlbnRFbCB8fCBwdXRTb3J0YWJsZSAmJiBwdXRTb3J0YWJsZS5sYXN0UHV0TW9kZSAhPT0gJ2Nsb25lJykge1xuICAgICAgICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICBjbG9uZS5wYXJlbnROb2RlICYmIGNsb25lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG51bGxpbmdHbG9iYWw6IGZ1bmN0aW9uIG51bGxpbmdHbG9iYWwoKSB7XG4gICAgICB0aGlzLmlzTXVsdGlEcmFnID0gZHJhZ1N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgIG11bHRpRHJhZ0Nsb25lcy5sZW5ndGggPSAwO1xuICAgIH0sXG4gICAgZGVzdHJveUdsb2JhbDogZnVuY3Rpb24gZGVzdHJveUdsb2JhbCgpIHtcbiAgICAgIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgIG9mZihkb2N1bWVudCwgJ3BvaW50ZXJ1cCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9kZXNlbGVjdE11bHRpRHJhZyk7XG4gICAgICBvZmYoZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX2Rlc2VsZWN0TXVsdGlEcmFnKTtcbiAgICAgIG9mZihkb2N1bWVudCwgJ2tleWRvd24nLCB0aGlzLl9jaGVja0tleURvd24pO1xuICAgICAgb2ZmKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLl9jaGVja0tleVVwKTtcbiAgICB9LFxuICAgIF9kZXNlbGVjdE11bHRpRHJhZzogZnVuY3Rpb24gX2Rlc2VsZWN0TXVsdGlEcmFnKGV2dCkge1xuICAgICAgaWYgKHR5cGVvZiBkcmFnU3RhcnRlZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkcmFnU3RhcnRlZCkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHNlbGVjdGlvbiBpcyBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAhPT0gdGhpcy5zb3J0YWJsZSkgcmV0dXJuOyAvLyBPbmx5IGRlc2VsZWN0IGlmIHRhcmdldCBpcyBub3QgaXRlbSBpbiB0aGlzIHNvcnRhYmxlXG5cbiAgICAgIGlmIChldnQgJiYgY2xvc2VzdChldnQudGFyZ2V0LCB0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlLCB0aGlzLnNvcnRhYmxlLmVsLCBmYWxzZSkpIHJldHVybjsgLy8gT25seSBkZXNlbGVjdCBpZiBsZWZ0IGNsaWNrXG5cbiAgICAgIGlmIChldnQgJiYgZXZ0LmJ1dHRvbiAhPT0gMCkgcmV0dXJuO1xuXG4gICAgICB3aGlsZSAobXVsdGlEcmFnRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbCA9IG11bHRpRHJhZ0VsZW1lbnRzWzBdO1xuICAgICAgICB0b2dnbGVDbGFzcyhlbCwgdGhpcy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc2hpZnQoKTtcbiAgICAgICAgZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgc29ydGFibGU6IHRoaXMuc29ydGFibGUsXG4gICAgICAgICAgcm9vdEVsOiB0aGlzLnNvcnRhYmxlLmVsLFxuICAgICAgICAgIG5hbWU6ICdkZXNlbGVjdCcsXG4gICAgICAgICAgdGFyZ2V0RWw6IGVsLFxuICAgICAgICAgIG9yaWdpbmFsRXZ0OiBldnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfY2hlY2tLZXlEb3duOiBmdW5jdGlvbiBfY2hlY2tLZXlEb3duKGV2dCkge1xuICAgICAgaWYgKGV2dC5rZXkgPT09IHRoaXMub3B0aW9ucy5tdWx0aURyYWdLZXkpIHtcbiAgICAgICAgdGhpcy5tdWx0aURyYWdLZXlEb3duID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9jaGVja0tleVVwOiBmdW5jdGlvbiBfY2hlY2tLZXlVcChldnQpIHtcbiAgICAgIGlmIChldnQua2V5ID09PSB0aGlzLm9wdGlvbnMubXVsdGlEcmFnS2V5KSB7XG4gICAgICAgIHRoaXMubXVsdGlEcmFnS2V5RG93biA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzKE11bHRpRHJhZywge1xuICAgIC8vIFN0YXRpYyBtZXRob2RzICYgcHJvcGVydGllc1xuICAgIHBsdWdpbk5hbWU6ICdtdWx0aURyYWcnLFxuICAgIHV0aWxzOiB7XG4gICAgICAvKipcclxuICAgICAgICogU2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtXHJcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBzZWxlY3RlZFxyXG4gICAgICAgKi9cbiAgICAgIHNlbGVjdDogZnVuY3Rpb24gc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb107XG4gICAgICAgIGlmICghc29ydGFibGUgfHwgIXNvcnRhYmxlLm9wdGlvbnMubXVsdGlEcmFnIHx8IH5tdWx0aURyYWdFbGVtZW50cy5pbmRleE9mKGVsKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChtdWx0aURyYWdTb3J0YWJsZSAmJiBtdWx0aURyYWdTb3J0YWJsZSAhPT0gc29ydGFibGUpIHtcbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZS5tdWx0aURyYWcuX2Rlc2VsZWN0TXVsdGlEcmFnKCk7XG5cbiAgICAgICAgICBtdWx0aURyYWdTb3J0YWJsZSA9IHNvcnRhYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlQ2xhc3MoZWwsIHNvcnRhYmxlLm9wdGlvbnMuc2VsZWN0ZWRDbGFzcywgdHJ1ZSk7XG4gICAgICAgIG11bHRpRHJhZ0VsZW1lbnRzLnB1c2goZWwpO1xuICAgICAgfSxcblxuICAgICAgLyoqXHJcbiAgICAgICAqIERlc2VsZWN0cyB0aGUgcHJvdmlkZWQgbXVsdGktZHJhZyBpdGVtXHJcbiAgICAgICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbCAgICBUaGUgZWxlbWVudCB0byBiZSBkZXNlbGVjdGVkXHJcbiAgICAgICAqL1xuICAgICAgZGVzZWxlY3Q6IGZ1bmN0aW9uIGRlc2VsZWN0KGVsKSB7XG4gICAgICAgIHZhciBzb3J0YWJsZSA9IGVsLnBhcmVudE5vZGVbZXhwYW5kb10sXG4gICAgICAgICAgICBpbmRleCA9IG11bHRpRHJhZ0VsZW1lbnRzLmluZGV4T2YoZWwpO1xuICAgICAgICBpZiAoIXNvcnRhYmxlIHx8ICFzb3J0YWJsZS5vcHRpb25zLm11bHRpRHJhZyB8fCAhfmluZGV4KSByZXR1cm47XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsLCBzb3J0YWJsZS5vcHRpb25zLnNlbGVjdGVkQ2xhc3MsIGZhbHNlKTtcbiAgICAgICAgbXVsdGlEcmFnRWxlbWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV2ZW50UHJvcGVydGllczogZnVuY3Rpb24gZXZlbnRQcm9wZXJ0aWVzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBvbGRJbmRpY2llcyA9IFtdLFxuICAgICAgICAgIG5ld0luZGljaWVzID0gW107XG4gICAgICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50KSB7XG4gICAgICAgIG9sZEluZGljaWVzLnB1c2goe1xuICAgICAgICAgIG11bHRpRHJhZ0VsZW1lbnQ6IG11bHRpRHJhZ0VsZW1lbnQsXG4gICAgICAgICAgaW5kZXg6IG11bHRpRHJhZ0VsZW1lbnQuc29ydGFibGVJbmRleFxuICAgICAgICB9KTsgLy8gbXVsdGlEcmFnRWxlbWVudHMgd2lsbCBhbHJlYWR5IGJlIHNvcnRlZCBpZiBmb2xkaW5nXG5cbiAgICAgICAgdmFyIG5ld0luZGV4O1xuXG4gICAgICAgIGlmIChmb2xkaW5nICYmIG11bHRpRHJhZ0VsZW1lbnQgIT09IGRyYWdFbCQxKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChmb2xkaW5nKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBpbmRleChtdWx0aURyYWdFbGVtZW50LCAnOm5vdCguJyArIF90aGlzMy5vcHRpb25zLnNlbGVjdGVkQ2xhc3MgKyAnKScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4ID0gaW5kZXgobXVsdGlEcmFnRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdJbmRpY2llcy5wdXNoKHtcbiAgICAgICAgICBtdWx0aURyYWdFbGVtZW50OiBtdWx0aURyYWdFbGVtZW50LFxuICAgICAgICAgIGluZGV4OiBuZXdJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IF90b0NvbnN1bWFibGVBcnJheShtdWx0aURyYWdFbGVtZW50cyksXG4gICAgICAgIGNsb25lczogW10uY29uY2F0KG11bHRpRHJhZ0Nsb25lcyksXG4gICAgICAgIG9sZEluZGljaWVzOiBvbGRJbmRpY2llcyxcbiAgICAgICAgbmV3SW5kaWNpZXM6IG5ld0luZGljaWVzXG4gICAgICB9O1xuICAgIH0sXG4gICAgb3B0aW9uTGlzdGVuZXJzOiB7XG4gICAgICBtdWx0aURyYWdLZXk6IGZ1bmN0aW9uIG11bHRpRHJhZ0tleShrZXkpIHtcbiAgICAgICAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2N0cmwnKSB7XG4gICAgICAgICAga2V5ID0gJ0NvbnRyb2wnO1xuICAgICAgICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAga2V5ID0ga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cigxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnRWxlbWVudHMoY2xvbmVzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChtdWx0aURyYWdFbGVtZW50LCBpKSB7XG4gICAgdmFyIHRhcmdldCA9IHJvb3RFbC5jaGlsZHJlblttdWx0aURyYWdFbGVtZW50LnNvcnRhYmxlSW5kZXggKyAoY2xvbmVzSW5zZXJ0ZWQgPyBOdW1iZXIoaSkgOiAwKV07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICByb290RWwuaW5zZXJ0QmVmb3JlKG11bHRpRHJhZ0VsZW1lbnQsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChtdWx0aURyYWdFbGVtZW50KTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXHJcbiAqIEluc2VydCBtdWx0aS1kcmFnIGNsb25lc1xyXG4gKiBAcGFyYW0gIHtbQm9vbGVhbl19IGVsZW1lbnRzSW5zZXJ0ZWQgIFdoZXRoZXIgdGhlIG11bHRpLWRyYWcgZWxlbWVudHMgYXJlIGluc2VydGVkXHJcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSByb290RWxcclxuICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0TXVsdGlEcmFnQ2xvbmVzKGVsZW1lbnRzSW5zZXJ0ZWQsIHJvb3RFbCkge1xuICBtdWx0aURyYWdDbG9uZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xvbmUsIGkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gcm9vdEVsLmNoaWxkcmVuW2Nsb25lLnNvcnRhYmxlSW5kZXggKyAoZWxlbWVudHNJbnNlcnRlZCA/IE51bWJlcihpKSA6IDApXTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJvb3RFbC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRhcmdldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RFbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTXVsdGlEcmFnRWxlbWVudHMoKSB7XG4gIG11bHRpRHJhZ0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKG11bHRpRHJhZ0VsZW1lbnQpIHtcbiAgICBpZiAobXVsdGlEcmFnRWxlbWVudCA9PT0gZHJhZ0VsJDEpIHJldHVybjtcbiAgICBtdWx0aURyYWdFbGVtZW50LnBhcmVudE5vZGUgJiYgbXVsdGlEcmFnRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG11bHRpRHJhZ0VsZW1lbnQpO1xuICB9KTtcbn1cblxuU29ydGFibGUubW91bnQobmV3IEF1dG9TY3JvbGxQbHVnaW4oKSk7XG5Tb3J0YWJsZS5tb3VudChSZW1vdmUsIFJldmVydCk7XG5cbmV4cG9ydCBkZWZhdWx0IFNvcnRhYmxlO1xuZXhwb3J0IHsgTXVsdGlEcmFnUGx1Z2luIGFzIE11bHRpRHJhZywgU29ydGFibGUsIFN3YXBQbHVnaW4gYXMgU3dhcCB9O1xuIiwiLyoqXG4gICogdnVlLWNsYXNzLWNvbXBvbmVudCB2Ny4yLjNcbiAgKiAoYykgMjAxNS1wcmVzZW50IEV2YW4gWW91XG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbi8vIFRoZSByYXRpb25hbCBiZWhpbmQgdGhlIHZlcmJvc2UgUmVmbGVjdC1mZWF0dXJlIGNoZWNrIGJlbG93IGlzIHRoZSBmYWN0IHRoYXQgdGhlcmUgYXJlIHBvbHlmaWxsc1xuLy8gd2hpY2ggYWRkIGFuIGltcGxlbWVudGF0aW9uIGZvciBSZWZsZWN0LmRlZmluZU1ldGFkYXRhIGJ1dCBub3QgZm9yIFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzLlxuLy8gV2l0aG91dCB0aGlzIGNoZWNrIGNvbnN1bWVycyB3aWxsIGVuY291bnRlciBoYXJkIHRvIHRyYWNrIGRvd24gcnVudGltZSBlcnJvcnMuXG5mdW5jdGlvbiByZWZsZWN0aW9uSXNTdXBwb3J0ZWQoKSB7XG4gIHJldHVybiB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YSAmJiBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cztcbn1cbmZ1bmN0aW9uIGNvcHlSZWZsZWN0aW9uTWV0YWRhdGEodG8sIGZyb20pIHtcbiAgZm9yd2FyZE1ldGFkYXRhKHRvLCBmcm9tKTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZnJvbS5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZvcndhcmRNZXRhZGF0YSh0by5wcm90b3R5cGUsIGZyb20ucHJvdG90eXBlLCBrZXkpO1xuICB9KTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZnJvbSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgZm9yd2FyZE1ldGFkYXRhKHRvLCBmcm9tLCBrZXkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZE1ldGFkYXRhKHRvLCBmcm9tLCBwcm9wZXJ0eUtleSkge1xuICB2YXIgbWV0YUtleXMgPSBwcm9wZXJ0eUtleSA/IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKGZyb20sIHByb3BlcnR5S2V5KSA6IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKGZyb20pO1xuICBtZXRhS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRhS2V5KSB7XG4gICAgdmFyIG1ldGFkYXRhID0gcHJvcGVydHlLZXkgPyBSZWZsZWN0LmdldE93bk1ldGFkYXRhKG1ldGFLZXksIGZyb20sIHByb3BlcnR5S2V5KSA6IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEobWV0YUtleSwgZnJvbSk7XG5cbiAgICBpZiAocHJvcGVydHlLZXkpIHtcbiAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEobWV0YUtleSwgbWV0YWRhdGEsIHRvLCBwcm9wZXJ0eUtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEobWV0YUtleSwgbWV0YWRhdGEsIHRvKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZmFrZUFycmF5ID0ge1xuICBfX3Byb3RvX186IFtdXG59O1xudmFyIGhhc1Byb3RvID0gZmFrZUFycmF5IGluc3RhbmNlb2YgQXJyYXk7XG5mdW5jdGlvbiBjcmVhdGVEZWNvcmF0b3IoZmFjdG9yeSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBpbmRleCkge1xuICAgIHZhciBDdG9yID0gdHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJyA/IHRhcmdldCA6IHRhcmdldC5jb25zdHJ1Y3RvcjtcblxuICAgIGlmICghQ3Rvci5fX2RlY29yYXRvcnNfXykge1xuICAgICAgQ3Rvci5fX2RlY29yYXRvcnNfXyA9IFtdO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICBpbmRleCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBDdG9yLl9fZGVjb3JhdG9yc19fLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KG9wdGlvbnMsIGtleSwgaW5kZXgpO1xuICAgIH0pO1xuICB9O1xufVxuZnVuY3Rpb24gbWl4aW5zKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgQ3RvcnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgQ3RvcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gVnVlLmV4dGVuZCh7XG4gICAgbWl4aW5zOiBDdG9yc1xuICB9KTtcbn1cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gX3R5cGVvZih2YWx1ZSk7XG5cbiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgdHlwZSAhPT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHdhcm4obWVzc2FnZSkge1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS53YXJuKCdbdnVlLWNsYXNzLWNvbXBvbmVudF0gJyArIG1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3REYXRhRnJvbUNvbnN0cnVjdG9yKHZtLCBDb21wb25lbnQpIHtcbiAgLy8gb3ZlcnJpZGUgX2luaXQgdG8gcHJldmVudCB0byBpbml0IGFzIFZ1ZSBpbnN0YW5jZVxuICB2YXIgb3JpZ2luYWxJbml0ID0gQ29tcG9uZW50LnByb3RvdHlwZS5faW5pdDtcblxuICBDb21wb25lbnQucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBwcm94eSB0byBhY3R1YWwgdm1cbiAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZtKTsgLy8gMi4yLjAgY29tcGF0IChwcm9wcyBhcmUgbm8gbG9uZ2VyIGV4cG9zZWQgYXMgc2VsZiBwcm9wZXJ0aWVzKVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgaWYgKCF2bS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICdfJykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXMsIGtleSwge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHZtW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgICAgdm1ba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9OyAvLyBzaG91bGQgYmUgYWNxdWlyZWQgY2xhc3MgcHJvcGVydHkgdmFsdWVzXG5cblxuICB2YXIgZGF0YSA9IG5ldyBDb21wb25lbnQoKTsgLy8gcmVzdG9yZSBvcmlnaW5hbCBfaW5pdCB0byBhdm9pZCBtZW1vcnkgbGVhayAoIzIwOSlcblxuICBDb21wb25lbnQucHJvdG90eXBlLl9pbml0ID0gb3JpZ2luYWxJbml0OyAvLyBjcmVhdGUgcGxhaW4gZGF0YSBvYmplY3RcblxuICB2YXIgcGxhaW5EYXRhID0ge307XG4gIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGxhaW5EYXRhW2tleV0gPSBkYXRhW2tleV07XG4gICAgfVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghKENvbXBvbmVudC5wcm90b3R5cGUgaW5zdGFuY2VvZiBWdWUpICYmIE9iamVjdC5rZXlzKHBsYWluRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgd2FybignQ29tcG9uZW50IGNsYXNzIG11c3QgaW5oZXJpdCBWdWUgb3IgaXRzIGRlc2NlbmRhbnQgY2xhc3MgJyArICd3aGVuIGNsYXNzIHByb3BlcnR5IGlzIHVzZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBsYWluRGF0YTtcbn1cblxudmFyICRpbnRlcm5hbEhvb2tzID0gWydkYXRhJywgJ2JlZm9yZUNyZWF0ZScsICdjcmVhdGVkJywgJ2JlZm9yZU1vdW50JywgJ21vdW50ZWQnLCAnYmVmb3JlRGVzdHJveScsICdkZXN0cm95ZWQnLCAnYmVmb3JlVXBkYXRlJywgJ3VwZGF0ZWQnLCAnYWN0aXZhdGVkJywgJ2RlYWN0aXZhdGVkJywgJ3JlbmRlcicsICdlcnJvckNhcHR1cmVkJywgJ3NlcnZlclByZWZldGNoJyAvLyAyLjZcbl07XG5mdW5jdGlvbiBjb21wb25lbnRGYWN0b3J5KENvbXBvbmVudCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIG9wdGlvbnMubmFtZSA9IG9wdGlvbnMubmFtZSB8fCBDb21wb25lbnQuX2NvbXBvbmVudFRhZyB8fCBDb21wb25lbnQubmFtZTsgLy8gcHJvdG90eXBlIHByb3BzLlxuXG4gIHZhciBwcm90byA9IENvbXBvbmVudC5wcm90b3R5cGU7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5ID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBob29rc1xuXG5cbiAgICBpZiAoJGludGVybmFsSG9va3MuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgIG9wdGlvbnNba2V5XSA9IHByb3RvW2tleV07XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBrZXkpO1xuXG4gICAgaWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgLy8gbWV0aG9kc1xuICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIChvcHRpb25zLm1ldGhvZHMgfHwgKG9wdGlvbnMubWV0aG9kcyA9IHt9KSlba2V5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0eXBlc2NyaXB0IGRlY29yYXRlZCBkYXRhXG4gICAgICAgIChvcHRpb25zLm1peGlucyB8fCAob3B0aW9ucy5taXhpbnMgPSBbXSkpLnB1c2goe1xuICAgICAgICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIGRlc2NyaXB0b3IudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yLmdldCB8fCBkZXNjcmlwdG9yLnNldCkge1xuICAgICAgLy8gY29tcHV0ZWQgcHJvcGVydGllc1xuICAgICAgKG9wdGlvbnMuY29tcHV0ZWQgfHwgKG9wdGlvbnMuY29tcHV0ZWQgPSB7fSkpW2tleV0gPSB7XG4gICAgICAgIGdldDogZGVzY3JpcHRvci5nZXQsXG4gICAgICAgIHNldDogZGVzY3JpcHRvci5zZXRcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgKG9wdGlvbnMubWl4aW5zIHx8IChvcHRpb25zLm1peGlucyA9IFtdKSkucHVzaCh7XG4gICAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0RGF0YUZyb21Db25zdHJ1Y3Rvcih0aGlzLCBDb21wb25lbnQpO1xuICAgIH1cbiAgfSk7IC8vIGRlY29yYXRlIG9wdGlvbnNcblxuICB2YXIgZGVjb3JhdG9ycyA9IENvbXBvbmVudC5fX2RlY29yYXRvcnNfXztcblxuICBpZiAoZGVjb3JhdG9ycykge1xuICAgIGRlY29yYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgIHJldHVybiBmbihvcHRpb25zKTtcbiAgICB9KTtcbiAgICBkZWxldGUgQ29tcG9uZW50Ll9fZGVjb3JhdG9yc19fO1xuICB9IC8vIGZpbmQgc3VwZXJcblxuXG4gIHZhciBzdXBlclByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbXBvbmVudC5wcm90b3R5cGUpO1xuICB2YXIgU3VwZXIgPSBzdXBlclByb3RvIGluc3RhbmNlb2YgVnVlID8gc3VwZXJQcm90by5jb25zdHJ1Y3RvciA6IFZ1ZTtcbiAgdmFyIEV4dGVuZGVkID0gU3VwZXIuZXh0ZW5kKG9wdGlvbnMpO1xuICBmb3J3YXJkU3RhdGljTWVtYmVycyhFeHRlbmRlZCwgQ29tcG9uZW50LCBTdXBlcik7XG5cbiAgaWYgKHJlZmxlY3Rpb25Jc1N1cHBvcnRlZCgpKSB7XG4gICAgY29weVJlZmxlY3Rpb25NZXRhZGF0YShFeHRlbmRlZCwgQ29tcG9uZW50KTtcbiAgfVxuXG4gIHJldHVybiBFeHRlbmRlZDtcbn1cbnZhciByZXNlcnZlZFByb3BlcnR5TmFtZXMgPSBbLy8gVW5pcXVlIGlkXG4nY2lkJywgLy8gU3VwZXIgVnVlIGNvbnN0cnVjdG9yXG4nc3VwZXInLCAvLyBDb21wb25lbnQgb3B0aW9ucyB0aGF0IHdpbGwgYmUgdXNlZCBieSB0aGUgY29tcG9uZW50XG4nb3B0aW9ucycsICdzdXBlck9wdGlvbnMnLCAnZXh0ZW5kT3B0aW9ucycsICdzZWFsZWRPcHRpb25zJywgLy8gUHJpdmF0ZSBhc3NldHNcbidjb21wb25lbnQnLCAnZGlyZWN0aXZlJywgJ2ZpbHRlciddO1xudmFyIHNob3VsZElnbm9yZSA9IHtcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBmb3J3YXJkU3RhdGljTWVtYmVycyhFeHRlbmRlZCwgT3JpZ2luYWwsIFN1cGVyKSB7XG4gIC8vIFdlIGhhdmUgdG8gdXNlIGdldE93blByb3BlcnR5TmFtZXMgc2luY2UgQmFiZWwgcmVnaXN0ZXJzIG1ldGhvZHMgYXMgbm9uLWVudW1lcmFibGVcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT3JpZ2luYWwpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIC8vIFNraXAgdGhlIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgbm90IGJlIG92ZXJ3cml0dGVuXG4gICAgaWYgKHNob3VsZElnbm9yZVtrZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTb21lIGJyb3dzZXJzIGRvZXMgbm90IGFsbG93IHJlY29uZmlndXJlIGJ1aWx0LWluIHByb3BlcnRpZXNcblxuXG4gICAgdmFyIGV4dGVuZGVkRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXh0ZW5kZWQsIGtleSk7XG5cbiAgICBpZiAoZXh0ZW5kZWREZXNjcmlwdG9yICYmICFleHRlbmRlZERlc2NyaXB0b3IuY29uZmlndXJhYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9yaWdpbmFsLCBrZXkpOyAvLyBJZiB0aGUgdXNlciBhZ2VudCBkb2VzIG5vdCBzdXBwb3J0IGBfX3Byb3RvX19gIG9yIGl0cyBmYW1pbHkgKElFIDw9IDEwKSxcbiAgICAvLyB0aGUgc3ViIGNsYXNzIHByb3BlcnRpZXMgbWF5IGJlIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGZyb20gdGhlIHN1cGVyIGNsYXNzIGluIFR5cGVTY3JpcHQuXG4gICAgLy8gV2UgbmVlZCB0byBleGNsdWRlIHN1Y2ggcHJvcGVydGllcyB0byBwcmV2ZW50IHRvIG92ZXJ3cml0ZVxuICAgIC8vIHRoZSBjb21wb25lbnQgb3B0aW9ucyBvYmplY3Qgd2hpY2ggc3RvcmVkIG9uIHRoZSBleHRlbmRlZCBjb25zdHJ1Y3RvciAoU2VlICMxOTIpLlxuICAgIC8vIElmIHRoZSB2YWx1ZSBpcyBhIHJlZmVyZW5jZWQgdmFsdWUgKG9iamVjdCBvciBmdW5jdGlvbiksXG4gICAgLy8gd2UgY2FuIGNoZWNrIGVxdWFsaXR5IG9mIHRoZW0gYW5kIGV4Y2x1ZGUgaXQgaWYgdGhleSBoYXZlIHRoZSBzYW1lIHJlZmVyZW5jZS5cbiAgICAvLyBJZiBpdCBpcyBhIHByaW1pdGl2ZSB2YWx1ZSwgaXQgd2lsbCBiZSBmb3J3YXJkZWQgZm9yIHNhZmV0eS5cblxuICAgIGlmICghaGFzUHJvdG8pIHtcbiAgICAgIC8vIE9ubHkgYGNpZGAgaXMgZXhwbGljaXRseSBleGx1ZGVkIGZyb20gcHJvcGVydHkgZm9yd2FyZGluZ1xuICAgICAgLy8gYmVjYXVzZSB3ZSBjYW5ub3QgZGV0ZWN0IHdoZXRoZXIgaXQgaXMgYSBpbmhlcml0ZWQgcHJvcGVydHkgb3Igbm90XG4gICAgICAvLyBvbiB0aGUgbm8gYF9fcHJvdG9fX2AgZW52aXJvbm1lbnQgZXZlbiB0aG91Z2ggdGhlIHByb3BlcnR5IGlzIHJlc2VydmVkLlxuICAgICAgaWYgKGtleSA9PT0gJ2NpZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3VwZXJEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdXBlciwga2V5KTtcblxuICAgICAgaWYgKCFpc1ByaW1pdGl2ZShkZXNjcmlwdG9yLnZhbHVlKSAmJiBzdXBlckRlc2NyaXB0b3IgJiYgc3VwZXJEZXNjcmlwdG9yLnZhbHVlID09PSBkZXNjcmlwdG9yLnZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IC8vIFdhcm4gaWYgdGhlIHVzZXJzIG1hbnVhbGx5IGRlY2xhcmUgcmVzZXJ2ZWQgcHJvcGVydGllc1xuXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiByZXNlcnZlZFByb3BlcnR5TmFtZXMuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgIHdhcm4oXCJTdGF0aWMgcHJvcGVydHkgbmFtZSAnXCIuY29uY2F0KGtleSwgXCInIGRlY2xhcmVkIG9uIGNsYXNzICdcIikuY29uY2F0KE9yaWdpbmFsLm5hbWUsIFwiJyBcIikgKyAnY29uZmxpY3RzIHdpdGggcmVzZXJ2ZWQgcHJvcGVydHkgbmFtZSBvZiBWdWUgaW50ZXJuYWwuICcgKyAnSXQgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3Igb2YgdGhlIGNvbXBvbmVudC4gQ29uc2lkZXIgcmVuYW1pbmcgdGhlIHByb3BlcnR5LicpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeHRlbmRlZCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIENvbXBvbmVudChvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjb21wb25lbnRGYWN0b3J5KG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICByZXR1cm4gY29tcG9uZW50RmFjdG9yeShDb21wb25lbnQsIG9wdGlvbnMpO1xuICB9O1xufVxuXG5Db21wb25lbnQucmVnaXN0ZXJIb29rcyA9IGZ1bmN0aW9uIHJlZ2lzdGVySG9va3Moa2V5cykge1xuICAkaW50ZXJuYWxIb29rcy5wdXNoLmFwcGx5KCRpbnRlcm5hbEhvb2tzLCBfdG9Db25zdW1hYmxlQXJyYXkoa2V5cykpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuZXhwb3J0IHsgY3JlYXRlRGVjb3JhdG9yLCBtaXhpbnMgfTtcbiIsIi8qKiB2dWUtcHJvcGVydHktZGVjb3JhdG9yIHZlcnNvbiA4LjQuMSBNSVQgTElDRU5TRSBjb3B5cmlnaHQgMjAxOSBrYW9ydW4zNDMgKi9cbi8vLyA8cmVmZXJlbmNlIHR5cGVzPSdyZWZsZWN0LW1ldGFkYXRhJy8+XG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5pbXBvcnQgQ29tcG9uZW50LCB7IGNyZWF0ZURlY29yYXRvciwgbWl4aW5zIH0gZnJvbSAndnVlLWNsYXNzLWNvbXBvbmVudCc7XG5leHBvcnQgeyBDb21wb25lbnQsIFZ1ZSwgbWl4aW5zIGFzIE1peGlucyB9O1xuLyoqIFVzZWQgZm9yIGtleWluZyByZWFjdGl2ZSBwcm92aWRlL2luamVjdCBwcm9wZXJ0aWVzICovXG52YXIgcmVhY3RpdmVJbmplY3RLZXkgPSAnX19yZWFjdGl2ZUluamVjdF9fJztcbi8qKlxuICogZGVjb3JhdG9yIG9mIGFuIGluamVjdFxuICogQHBhcmFtIGZyb20ga2V5XG4gKiBAcmV0dXJuIFByb3BlcnR5RGVjb3JhdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBJbmplY3Qob3B0aW9ucykge1xuICAgIHJldHVybiBjcmVhdGVEZWNvcmF0b3IoZnVuY3Rpb24gKGNvbXBvbmVudE9wdGlvbnMsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGNvbXBvbmVudE9wdGlvbnMuaW5qZWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29tcG9uZW50T3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29tcG9uZW50T3B0aW9ucy5pbmplY3QpKSB7XG4gICAgICAgICAgICBjb21wb25lbnRPcHRpb25zLmluamVjdFtrZXldID0gb3B0aW9ucyB8fCBrZXk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogZGVjb3JhdG9yIG9mIGEgcmVhY3RpdmUgaW5qZWN0XG4gKiBAcGFyYW0gZnJvbSBrZXlcbiAqIEByZXR1cm4gUHJvcGVydHlEZWNvcmF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEluamVjdFJlYWN0aXZlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVjb3JhdG9yKGZ1bmN0aW9uIChjb21wb25lbnRPcHRpb25zLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRPcHRpb25zLmluamVjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudE9wdGlvbnMuaW5qZWN0ID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbXBvbmVudE9wdGlvbnMuaW5qZWN0KSkge1xuICAgICAgICAgICAgdmFyIGZyb21LZXlfMSA9ICEhb3B0aW9ucyA/IG9wdGlvbnMuZnJvbSB8fCBvcHRpb25zIDoga2V5O1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWxfMSA9ICghIW9wdGlvbnMgJiYgb3B0aW9ucy5kZWZhdWx0KSB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoIWNvbXBvbmVudE9wdGlvbnMuY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgY29tcG9uZW50T3B0aW9ucy5jb21wdXRlZCA9IHt9O1xuICAgICAgICAgICAgY29tcG9uZW50T3B0aW9ucy5jb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBvYmogPSB0aGlzW3JlYWN0aXZlSW5qZWN0S2V5XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqID8gb2JqW2Zyb21LZXlfMV0gOiBkZWZhdWx0VmFsXzE7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29tcG9uZW50T3B0aW9ucy5pbmplY3RbcmVhY3RpdmVJbmplY3RLZXldID0gcmVhY3RpdmVJbmplY3RLZXk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHByb2R1Y2VQcm92aWRlKG9yaWdpbmFsKSB7XG4gICAgdmFyIHByb3ZpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBydiA9IHR5cGVvZiBvcmlnaW5hbCA9PT0gJ2Z1bmN0aW9uJyA/IG9yaWdpbmFsLmNhbGwodGhpcykgOiBvcmlnaW5hbDtcbiAgICAgICAgcnYgPSBPYmplY3QuY3JlYXRlKHJ2IHx8IG51bGwpO1xuICAgICAgICAvLyBzZXQgcmVhY3RpdmUgc2VydmljZXMgKHByb3BhZ2F0ZXMgcHJldmlvdXMgc2VydmljZXMgaWYgbmVjZXNzYXJ5KVxuICAgICAgICBydltyZWFjdGl2ZUluamVjdEtleV0gPSB0aGlzW3JlYWN0aXZlSW5qZWN0S2V5XSB8fCB7fTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBwcm92aWRlLm1hbmFnZWQpIHtcbiAgICAgICAgICAgIHJ2W3Byb3ZpZGUubWFuYWdlZFtpXV0gPSB0aGlzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJ2W3Byb3ZpZGUubWFuYWdlZFJlYWN0aXZlW2ldXSA9IHRoaXNfMVtpXTsgLy8gRHVwbGljYXRlcyB0aGUgYmVoYXZpb3Igb2YgYEBQcm92aWRlYFxuICAgICAgICAgICAgaWYgKCFydltyZWFjdGl2ZUluamVjdEtleV0uaGFzT3duUHJvcGVydHkocHJvdmlkZS5tYW5hZ2VkUmVhY3RpdmVbaV0pKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJ2W3JlYWN0aXZlSW5qZWN0S2V5XSwgcHJvdmlkZS5tYW5hZ2VkUmVhY3RpdmVbaV0sIHtcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpc1tpXTsgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRoaXNfMSA9IHRoaXM7XG4gICAgICAgIGZvciAodmFyIGkgaW4gcHJvdmlkZS5tYW5hZ2VkUmVhY3RpdmUpIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgIH07XG4gICAgcHJvdmlkZS5tYW5hZ2VkID0ge307XG4gICAgcHJvdmlkZS5tYW5hZ2VkUmVhY3RpdmUgPSB7fTtcbiAgICByZXR1cm4gcHJvdmlkZTtcbn1cbmZ1bmN0aW9uIG5lZWRUb1Byb2R1Y2VQcm92aWRlKG9yaWdpbmFsKSB7XG4gICAgcmV0dXJuICh0eXBlb2Ygb3JpZ2luYWwgIT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgKCFvcmlnaW5hbC5tYW5hZ2VkICYmICFvcmlnaW5hbC5tYW5hZ2VkUmVhY3RpdmUpKTtcbn1cbi8qKlxuICogZGVjb3JhdG9yIG9mIGEgcHJvdmlkZVxuICogQHBhcmFtIGtleSBrZXlcbiAqIEByZXR1cm4gUHJvcGVydHlEZWNvcmF0b3IgfCB2b2lkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm92aWRlKGtleSkge1xuICAgIHJldHVybiBjcmVhdGVEZWNvcmF0b3IoZnVuY3Rpb24gKGNvbXBvbmVudE9wdGlvbnMsIGspIHtcbiAgICAgICAgdmFyIHByb3ZpZGUgPSBjb21wb25lbnRPcHRpb25zLnByb3ZpZGU7XG4gICAgICAgIGlmIChuZWVkVG9Qcm9kdWNlUHJvdmlkZShwcm92aWRlKSkge1xuICAgICAgICAgICAgcHJvdmlkZSA9IGNvbXBvbmVudE9wdGlvbnMucHJvdmlkZSA9IHByb2R1Y2VQcm92aWRlKHByb3ZpZGUpO1xuICAgICAgICB9XG4gICAgICAgIHByb3ZpZGUubWFuYWdlZFtrXSA9IGtleSB8fCBrO1xuICAgIH0pO1xufVxuLyoqXG4gKiBkZWNvcmF0b3Igb2YgYSByZWFjdGl2ZSBwcm92aWRlXG4gKiBAcGFyYW0ga2V5IGtleVxuICogQHJldHVybiBQcm9wZXJ0eURlY29yYXRvciB8IHZvaWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFByb3ZpZGVSZWFjdGl2ZShrZXkpIHtcbiAgICByZXR1cm4gY3JlYXRlRGVjb3JhdG9yKGZ1bmN0aW9uIChjb21wb25lbnRPcHRpb25zLCBrKSB7XG4gICAgICAgIHZhciBwcm92aWRlID0gY29tcG9uZW50T3B0aW9ucy5wcm92aWRlO1xuICAgICAgICAvLyBpbmplY3QgcGFyZW50IHJlYWN0aXZlIHNlcnZpY2VzIChpZiBhbnkpXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjb21wb25lbnRPcHRpb25zLmluamVjdCkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudE9wdGlvbnMuaW5qZWN0ID0gY29tcG9uZW50T3B0aW9ucy5pbmplY3QgfHwge307XG4gICAgICAgICAgICBjb21wb25lbnRPcHRpb25zLmluamVjdFtyZWFjdGl2ZUluamVjdEtleV0gPSB7XG4gICAgICAgICAgICAgICAgZnJvbTogcmVhY3RpdmVJbmplY3RLZXksXG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge30sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWVkVG9Qcm9kdWNlUHJvdmlkZShwcm92aWRlKSkge1xuICAgICAgICAgICAgcHJvdmlkZSA9IGNvbXBvbmVudE9wdGlvbnMucHJvdmlkZSA9IHByb2R1Y2VQcm92aWRlKHByb3ZpZGUpO1xuICAgICAgICB9XG4gICAgICAgIHByb3ZpZGUubWFuYWdlZFJlYWN0aXZlW2tdID0ga2V5IHx8IGs7XG4gICAgfSk7XG59XG4vKiogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGFzcy1jb21wb25lbnQvYmxvYi9tYXN0ZXIvc3JjL3JlZmxlY3QudHN9ICovXG52YXIgcmVmbGVjdE1ldGFkYXRhSXNTdXBwb3J0ZWQgPSB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFJlZmxlY3QuZ2V0TWV0YWRhdGEgIT09ICd1bmRlZmluZWQnO1xuZnVuY3Rpb24gYXBwbHlNZXRhZGF0YShvcHRpb25zLCB0YXJnZXQsIGtleSkge1xuICAgIGlmIChyZWZsZWN0TWV0YWRhdGFJc1N1cHBvcnRlZCkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucykgJiZcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucy50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBSZWZsZWN0LmdldE1ldGFkYXRhKCdkZXNpZ246dHlwZScsIHRhcmdldCwga2V5KTtcbiAgICAgICAgICAgIGlmICh0eXBlICE9PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBkZWNvcmF0b3Igb2YgbW9kZWxcbiAqIEBwYXJhbSAgZXZlbnQgZXZlbnQgbmFtZVxuICogQHBhcmFtIG9wdGlvbnMgb3B0aW9uc1xuICogQHJldHVybiBQcm9wZXJ0eURlY29yYXRvclxuICovXG5leHBvcnQgZnVuY3Rpb24gTW9kZWwoZXZlbnQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgYXBwbHlNZXRhZGF0YShvcHRpb25zLCB0YXJnZXQsIGtleSk7XG4gICAgICAgIGNyZWF0ZURlY29yYXRvcihmdW5jdGlvbiAoY29tcG9uZW50T3B0aW9ucywgaykge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgKGNvbXBvbmVudE9wdGlvbnMucHJvcHMgfHwgKGNvbXBvbmVudE9wdGlvbnMucHJvcHMgPSB7fSkpW2tdID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbXBvbmVudE9wdGlvbnMubW9kZWwgPSB7IHByb3A6IGssIGV2ZW50OiBldmVudCB8fCBrIH07XG4gICAgICAgIH0pKHRhcmdldCwga2V5KTtcbiAgICB9O1xufVxuLyoqXG4gKiBkZWNvcmF0b3Igb2YgYSBwcm9wXG4gKiBAcGFyYW0gIG9wdGlvbnMgdGhlIG9wdGlvbnMgZm9yIHRoZSBwcm9wXG4gKiBAcmV0dXJuIFByb3BlcnR5RGVjb3JhdG9yIHwgdm9pZFxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJvcChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgICAgIGFwcGx5TWV0YWRhdGEob3B0aW9ucywgdGFyZ2V0LCBrZXkpO1xuICAgICAgICBjcmVhdGVEZWNvcmF0b3IoZnVuY3Rpb24gKGNvbXBvbmVudE9wdGlvbnMsIGspIHtcbiAgICAgICAgICAgIDtcbiAgICAgICAgICAgIChjb21wb25lbnRPcHRpb25zLnByb3BzIHx8IChjb21wb25lbnRPcHRpb25zLnByb3BzID0ge30pKVtrXSA9IG9wdGlvbnM7XG4gICAgICAgIH0pKHRhcmdldCwga2V5KTtcbiAgICB9O1xufVxuLyoqXG4gKiBkZWNvcmF0b3Igb2YgYSBzeW5jZWQgcHJvcFxuICogQHBhcmFtIHByb3BOYW1lIHRoZSBuYW1lIHRvIGludGVyZmFjZSB3aXRoIGZyb20gb3V0c2lkZSwgbXVzdCBiZSBkaWZmZXJlbnQgZnJvbSBkZWNvcmF0ZWQgcHJvcGVydHlcbiAqIEBwYXJhbSBvcHRpb25zIHRoZSBvcHRpb25zIGZvciB0aGUgc3luY2VkIHByb3BcbiAqIEByZXR1cm4gUHJvcGVydHlEZWNvcmF0b3IgfCB2b2lkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm9wU3luYyhwcm9wTmFtZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgYXBwbHlNZXRhZGF0YShvcHRpb25zLCB0YXJnZXQsIGtleSk7XG4gICAgICAgIGNyZWF0ZURlY29yYXRvcihmdW5jdGlvbiAoY29tcG9uZW50T3B0aW9ucywgaykge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgKGNvbXBvbmVudE9wdGlvbnMucHJvcHMgfHwgKGNvbXBvbmVudE9wdGlvbnMucHJvcHMgPSB7fSkpW3Byb3BOYW1lXSA9IG9wdGlvbnM7XG4gICAgICAgICAgICAoY29tcG9uZW50T3B0aW9ucy5jb21wdXRlZCB8fCAoY29tcG9uZW50T3B0aW9ucy5jb21wdXRlZCA9IHt9KSlba10gPSB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdChcInVwZGF0ZTpcIiArIHByb3BOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKHRhcmdldCwga2V5KTtcbiAgICB9O1xufVxuLyoqXG4gKiBkZWNvcmF0b3Igb2YgYSB3YXRjaCBmdW5jdGlvblxuICogQHBhcmFtICBwYXRoIHRoZSBwYXRoIG9yIHRoZSBleHByZXNzaW9uIHRvIG9ic2VydmVcbiAqIEBwYXJhbSAgV2F0Y2hPcHRpb25cbiAqIEByZXR1cm4gTWV0aG9kRGVjb3JhdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBXYXRjaChwYXRoLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgX2EgPSBvcHRpb25zLmRlZXAsIGRlZXAgPSBfYSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYSwgX2IgPSBvcHRpb25zLmltbWVkaWF0ZSwgaW1tZWRpYXRlID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2I7XG4gICAgcmV0dXJuIGNyZWF0ZURlY29yYXRvcihmdW5jdGlvbiAoY29tcG9uZW50T3B0aW9ucywgaGFuZGxlcikge1xuICAgICAgICBpZiAodHlwZW9mIGNvbXBvbmVudE9wdGlvbnMud2F0Y2ggIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb21wb25lbnRPcHRpb25zLndhdGNoID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2F0Y2ggPSBjb21wb25lbnRPcHRpb25zLndhdGNoO1xuICAgICAgICBpZiAodHlwZW9mIHdhdGNoW3BhdGhdID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh3YXRjaFtwYXRoXSkpIHtcbiAgICAgICAgICAgIHdhdGNoW3BhdGhdID0gW3dhdGNoW3BhdGhdXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygd2F0Y2hbcGF0aF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB3YXRjaFtwYXRoXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHdhdGNoW3BhdGhdLnB1c2goeyBoYW5kbGVyOiBoYW5kbGVyLCBkZWVwOiBkZWVwLCBpbW1lZGlhdGU6IGltbWVkaWF0ZSB9KTtcbiAgICB9KTtcbn1cbi8vIENvZGUgY29waWVkIGZyb20gVnVlL3NyYy9zaGFyZWQvdXRpbC5qc1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCk7IH07XG4vKipcbiAqIGRlY29yYXRvciBvZiBhbiBldmVudC1lbWl0dGVyIGZ1bmN0aW9uXG4gKiBAcGFyYW0gIGV2ZW50IFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICogQHJldHVybiBNZXRob2REZWNvcmF0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEVtaXQoZXZlbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKF90YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIHZhciBrZXkgPSBoeXBoZW5hdGUocHJvcGVydHlLZXkpO1xuICAgICAgICB2YXIgb3JpZ2luYWwgPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gZW1pdHRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW1pdCA9IGZ1bmN0aW9uIChyZXR1cm5WYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbWl0TmFtZSA9IGV2ZW50IHx8IGtleTtcbiAgICAgICAgICAgICAgICBpZiAocmV0dXJuVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRlbWl0KGVtaXROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGVtaXQoZW1pdE5hbWUsIGFyZ3NbMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGVtaXQoZW1pdE5hbWUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZW1pdChlbWl0TmFtZSwgcmV0dXJuVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIGlmIChpc1Byb21pc2UocmV0dXJuVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUudGhlbihmdW5jdGlvbiAocmV0dXJuVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZW1pdChyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbWl0KHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuLyoqXG4gKiBkZWNvcmF0b3Igb2YgYSByZWYgcHJvcFxuICogQHBhcmFtIHJlZktleSB0aGUgcmVmIGtleSBkZWZpbmVkIGluIHRlbXBsYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSZWYocmVmS2V5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZURlY29yYXRvcihmdW5jdGlvbiAob3B0aW9ucywga2V5KSB7XG4gICAgICAgIG9wdGlvbnMuY29tcHV0ZWQgPSBvcHRpb25zLmNvbXB1dGVkIHx8IHt9O1xuICAgICAgICBvcHRpb25zLmNvbXB1dGVkW2tleV0gPSB7XG4gICAgICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kcmVmc1tyZWZLZXkgfHwga2V5XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIFByb21pc2UgfHwgKG9iaiAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbicpO1xufVxuIiwiLyoqXG4gKiB2aXJ0dWFsIGxpc3QgY29yZSBjYWxjdWxhdGluZyBjZW50ZXIuXG4gKi9cblxuY29uc3QgRElSRUNUSU9OX1RZUEUgPSB7XG4gIEZST05UOiAnRlJPTlQnLCAvLyBzY3JvbGwgdXAgb3IgbGVmdC5cbiAgQkVISU5EOiAnQkVISU5EJyAvLyBzY3JvbGwgZG93biBvciByaWdodC5cbn1cbmNvbnN0IENBTENfVFlQRSA9IHtcbiAgSU5JVDogJ0lOSVQnLFxuICBGSVhFRDogJ0ZJWEVEJyxcbiAgRFlOQU1JQzogJ0RZTkFNSUMnXG59XG5jb25zdCBMRUFESU5HX0JVRkZFUiA9IDJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlydHVhbCB7XG4gIGNvbnN0cnVjdG9yIChwYXJhbSwgdXBkYXRlSG9vaykge1xuICAgIHRoaXMuaW5pdChwYXJhbSwgdXBkYXRlSG9vaylcbiAgfVxuXG4gIGluaXQgKHBhcmFtLCB1cGRhdGVIb29rKSB7XG4gICAgLy8gcGFyYW0gZGF0YS5cbiAgICB0aGlzLnBhcmFtID0gcGFyYW1cbiAgICB0aGlzLnVwZGF0ZUhvb2sgPSB1cGRhdGVIb29rXG5cbiAgICAvLyBzaXplIGRhdGEuXG4gICAgdGhpcy5zaXplcyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuZmlyc3RSYW5nZVRvdGFsU2l6ZSA9IDBcbiAgICB0aGlzLmZpcnN0UmFuZ2VBdmVyYWdlU2l6ZSA9IDBcbiAgICB0aGlzLmxhc3RDYWxjSW5kZXggPSAwXG4gICAgdGhpcy5maXhlZFNpemVWYWx1ZSA9IDBcbiAgICB0aGlzLmNhbGNUeXBlID0gQ0FMQ19UWVBFLklOSVRcblxuICAgIC8vIHNjcm9sbCBkYXRhLlxuICAgIHRoaXMub2Zmc2V0ID0gMFxuICAgIHRoaXMuZGlyZWN0aW9uID0gJydcblxuICAgIC8vIHJhbmdlIGRhdGEuXG4gICAgdGhpcy5yYW5nZSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICBpZiAodGhpcy5wYXJhbSkge1xuICAgICAgdGhpcy5jaGVja1JhbmdlKDAsIHBhcmFtLmtlZXBzIC0gMSlcbiAgICB9XG5cbiAgICAvLyBiZW5jaG1hcmsgdGVzdCBkYXRhLlxuICAgIC8vIHRoaXMuX19ic2VhcmNoQ2FsbHMgPSAwXG4gICAgLy8gdGhpcy5fX2dldEluZGV4T2Zmc2V0Q2FsbHMgPSAwXG4gIH1cblxuICBkZXN0cm95ICgpIHtcbiAgICB0aGlzLmluaXQobnVsbCwgbnVsbClcbiAgfVxuXG4gIC8vIHJldHVybiBhY3R1YWxseSByZW5kZXIgcmFuZ2UuXG4gIGdldFJhbmdlICgpIHtcbiAgICBjb25zdCByYW5nZSA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICByYW5nZS5zdGFydCA9IHRoaXMucmFuZ2Uuc3RhcnRcbiAgICByYW5nZS5lbmQgPSB0aGlzLnJhbmdlLmVuZFxuICAgIHJhbmdlLnBhZEZyb250ID0gdGhpcy5yYW5nZS5wYWRGcm9udFxuICAgIHJhbmdlLnBhZEJlaGluZCA9IHRoaXMucmFuZ2UucGFkQmVoaW5kXG4gICAgcmV0dXJuIHJhbmdlXG4gIH1cblxuICBpc0JlaGluZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uID09PSBESVJFQ1RJT05fVFlQRS5CRUhJTkRcbiAgfVxuXG4gIGlzRnJvbnQgKCkge1xuICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX1RZUEUuRlJPTlRcbiAgfVxuXG4gIC8vIHJldHVybiBzdGFydCBpbmRleCBvZmZzZXQuXG4gIGdldE9mZnNldCAoc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRJbmRleE9mZnNldChzdGFydClcbiAgfVxuXG4gIHVwZGF0ZVBhcmFtIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKHRoaXMucGFyYW0gJiYgKGtleSBpbiB0aGlzLnBhcmFtKSkge1xuICAgICAgdGhpcy5wYXJhbVtrZXldID0gdmFsdWVcbiAgICB9XG4gIH1cblxuICAvLyBzYXZlIGVhY2ggc2l6ZSBtYXAgYnkgaWQuXG4gIHNhdmVTaXplIChpZCwgc2l6ZSkge1xuICAgIHRoaXMuc2l6ZXMuc2V0KGlkLCBzaXplKVxuXG4gICAgLy8gd2UgYXNzdW1lIHNpemUgdHlwZSBpcyBmaXhlZCBhdCB0aGUgYmVnaW5uaW5nIGFuZCByZW1lbWJlciBmaXJzdCBzaXplIHZhbHVlXG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gc2l6ZSB2YWx1ZSBkaWZmZXJlbnQgZnJvbSB0aGlzIGF0IG5leHQgY29tbWluZyBzYXZpbmdcbiAgICAvLyB3ZSB0aGluayBpdCdzIGEgZml4ZWQgc2l6ZSBsaXN0LCBvdGhlcndpc2UgaXMgZHluYW1pYyBzaXplIGxpc3QuXG4gICAgaWYgKHRoaXMuY2FsY1R5cGUgPT09IENBTENfVFlQRS5JTklUKSB7XG4gICAgICB0aGlzLmZpeGVkU2l6ZVZhbHVlID0gc2l6ZVxuICAgICAgdGhpcy5jYWxjVHlwZSA9IENBTENfVFlQRS5GSVhFRFxuICAgIH0gZWxzZSBpZiAodGhpcy5jYWxjVHlwZSA9PT0gQ0FMQ19UWVBFLkZJWEVEICYmIHRoaXMuZml4ZWRTaXplVmFsdWUgIT09IHNpemUpIHtcbiAgICAgIHRoaXMuY2FsY1R5cGUgPSBDQUxDX1RZUEUuRFlOQU1JQ1xuICAgICAgLy8gaXQncyBubyB1c2UgYXQgYWxsLlxuICAgICAgZGVsZXRlIHRoaXMuZml4ZWRTaXplVmFsdWVcbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgdGhlIGF2ZXJhZ2Ugc2l6ZSBvbmx5IGluIHRoZSBmaXJzdCByYW5nZS5cbiAgICBpZiAodGhpcy5zaXplcy5zaXplIDw9IHRoaXMucGFyYW0ua2VlcHMpIHtcbiAgICAgIHRoaXMuZmlyc3RSYW5nZVRvdGFsU2l6ZSA9IHRoaXMuZmlyc3RSYW5nZVRvdGFsU2l6ZSArIHNpemVcbiAgICAgIHRoaXMuZmlyc3RSYW5nZUF2ZXJhZ2VTaXplID0gTWF0aC5yb3VuZCh0aGlzLmZpcnN0UmFuZ2VUb3RhbFNpemUgLyB0aGlzLnNpemVzLnNpemUpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGl0J3MgZG9uZSB1c2luZy5cbiAgICAgIGRlbGV0ZSB0aGlzLmZpcnN0UmFuZ2VUb3RhbFNpemVcbiAgICB9XG4gIH1cblxuICAvLyBpbiBzb21lIHNwZWNpYWwgc2l0dWF0aW9uIChlLmcuIGxlbmd0aCBjaGFuZ2UpIHdlIG5lZWQgdG8gdXBkYXRlIGluIGEgcm93XG4gIC8vIHRyeSBnb2lvbmcgdG8gcmVuZGVyIG5leHQgcmFuZ2UgYnkgYSBsZWFkaW5nIGJ1ZmZlciBhY2NvcmRpbmcgdG8gY3VycmVudCBkaXJlY3Rpb24uXG4gIGhhbmRsZURhdGFTb3VyY2VzQ2hhbmdlICgpIHtcbiAgICBsZXQgc3RhcnQgPSB0aGlzLnJhbmdlLnN0YXJ0XG5cbiAgICBpZiAodGhpcy5pc0Zyb250KCkpIHtcbiAgICAgIHN0YXJ0ID0gc3RhcnQgLSBMRUFESU5HX0JVRkZFUlxuICAgIH0gZWxzZSBpZiAodGhpcy5pc0JlaGluZCgpKSB7XG4gICAgICBzdGFydCA9IHN0YXJ0ICsgTEVBRElOR19CVUZGRVJcbiAgICB9XG5cbiAgICBzdGFydCA9IE1hdGgubWF4KHN0YXJ0LCAwKVxuXG4gICAgdGhpcy51cGRhdGVSYW5nZSh0aGlzLnJhbmdlLnN0YXJ0LCB0aGlzLmdldEVuZEJ5U3RhcnQoc3RhcnQpKVxuICB9XG5cbiAgLy8gd2hlbiBzbG90IHNpemUgY2hhbmdlLCB3ZSBhbHNvIG5lZWQgZm9yY2UgdXBkYXRlLlxuICBoYW5kbGVTbG90U2l6ZUNoYW5nZSAoKSB7XG4gICAgdGhpcy5oYW5kbGVEYXRhU291cmNlc0NoYW5nZSgpXG4gIH1cblxuICAvLyBjYWxjdWxhdGluZyByYW5nZSBvbiBzY3JvbGwuXG4gIGhhbmRsZVNjcm9sbCAob2Zmc2V0KSB7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBvZmZzZXQgPCB0aGlzLm9mZnNldCA/IERJUkVDVElPTl9UWVBFLkZST05UIDogRElSRUNUSU9OX1RZUEUuQkVISU5EXG4gICAgdGhpcy5vZmZzZXQgPSBvZmZzZXRcblxuICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX1RZUEUuRlJPTlQpIHtcbiAgICAgIHRoaXMuaGFuZGxlRnJvbnQoKVxuICAgIH0gZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gPT09IERJUkVDVElPTl9UWVBFLkJFSElORCkge1xuICAgICAgdGhpcy5oYW5kbGVCZWhpbmQoKVxuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tIHB1YmxpYyBtZXRob2QgZW5kLiAtLS0tLS0tLS0tLVxuXG4gIGhhbmRsZUZyb250ICgpIHtcbiAgICBjb25zdCBvdmVycyA9IHRoaXMuZ2V0U2Nyb2xsT3ZlcnMoKVxuICAgIC8vIHNob3VsZCBub3QgY2hhbmdlIHJhbmdlIGlmIHN0YXJ0IGRvZXNuJ3QgZXhjZWVkIG92ZXJzLlxuICAgIGlmIChvdmVycyA+IHRoaXMucmFuZ2Uuc3RhcnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIG1vdmUgdXAgc3RhcnQgYnkgYSBidWZmZXIgbGVuZ3RoLCBhbmQgbWFrZSBzdXJlIGl0cyBzYWZldHkuXG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1heChvdmVycyAtIHRoaXMucGFyYW0uYnVmZmVyLCAwKVxuICAgIHRoaXMuY2hlY2tSYW5nZShzdGFydCwgdGhpcy5nZXRFbmRCeVN0YXJ0KHN0YXJ0KSlcbiAgfVxuXG4gIGhhbmRsZUJlaGluZCAoKSB7XG4gICAgY29uc3Qgb3ZlcnMgPSB0aGlzLmdldFNjcm9sbE92ZXJzKClcbiAgICAvLyByYW5nZSBzaG91bGQgbm90IGNoYW5nZSBpZiBzY3JvbGwgb3ZlcnMgd2l0aGluIGJ1ZmZlci5cbiAgICBpZiAob3ZlcnMgPCB0aGlzLnJhbmdlLnN0YXJ0ICsgdGhpcy5wYXJhbS5idWZmZXIpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHRoaXMuY2hlY2tSYW5nZShvdmVycywgdGhpcy5nZXRFbmRCeVN0YXJ0KG92ZXJzKSlcbiAgfVxuXG4gIC8vIHJldHVybiB0aGUgcGFzcyBvdmVyIG51bWJlcnMgYXQgY3VycmVudCBzY3JvbGwgb2Zmc2V0LlxuICBnZXRTY3JvbGxPdmVycyAoKSB7XG4gICAgLy8gaWYgc2xvdCBoZWFkZXIgZXhpc3QsIHdlIG5lZWQgc3VidHJhY3QgaXRzIHNpemUuXG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vZmZzZXQgLSB0aGlzLnBhcmFtLnNsb3RIZWFkZXJTaXplXG4gICAgaWYgKG9mZnNldCA8PSAwKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIC8vIGlmIHRoaXMgbGlzdCBpcyBmaXhlZCBzaXplLCB0aGF0IGNhbiBiZSBlYXNpbHkuXG4gICAgaWYgKHRoaXMuaXNGaXhlZFR5cGUoKSkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3Iob2Zmc2V0IC8gdGhpcy5maXhlZFNpemVWYWx1ZSlcbiAgICB9XG5cbiAgICBsZXQgbG93ID0gMFxuICAgIGxldCBtaWRkbGUgPSAwXG4gICAgbGV0IG1pZGRsZU9mZnNldCA9IDBcbiAgICBsZXQgaGlnaCA9IHRoaXMucGFyYW0udW5pcXVlSWRzLmxlbmd0aFxuXG4gICAgd2hpbGUgKGxvdyA8PSBoaWdoKSB7XG4gICAgICAvLyB0aGlzLl9fYnNlYXJjaENhbGxzKytcbiAgICAgIG1pZGRsZSA9IGxvdyArIE1hdGguZmxvb3IoKGhpZ2ggLSBsb3cpIC8gMilcbiAgICAgIG1pZGRsZU9mZnNldCA9IHRoaXMuZ2V0SW5kZXhPZmZzZXQobWlkZGxlKVxuXG4gICAgICBpZiAobWlkZGxlT2Zmc2V0ID09PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZVxuICAgICAgfSBlbHNlIGlmIChtaWRkbGVPZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgICAgbG93ID0gbWlkZGxlICsgMVxuICAgICAgfSBlbHNlIGlmIChtaWRkbGVPZmZzZXQgPiBvZmZzZXQpIHtcbiAgICAgICAgaGlnaCA9IG1pZGRsZSAtIDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbG93ID4gMCA/IC0tbG93IDogMFxuICB9XG5cbiAgLy8gcmV0dXJuIGEgc2Nyb2xsIG9mZnNldCBmcm9tIGdpdmVuIGluZGV4LCBjYW4gZWZmaWNpZW5jeSBiZSBpbXByb3ZlZCBtb3JlIGhlcmU/XG4gIC8vIGFsdGhvdWdoIHRoZSBjYWxsIGZyZXF1ZW5jeSBpcyB2ZXJ5IGhpZ2gsIGl0cyBvbmx5IGEgc3VwZXJwb3NpdGlvbiBvZiBudW1iZXJzLlxuICBnZXRJbmRleE9mZnNldCAoZ2l2ZW5JbmRleCkge1xuICAgIC8vIHdlIGtub3cgdGhpcy5cbiAgICBpZiAoIWdpdmVuSW5kZXgpIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBsZXQgaW5kZXhTaXplID0gMFxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBnaXZlbkluZGV4OyBpbmRleCsrKSB7XG4gICAgICAvLyB0aGlzLl9fZ2V0SW5kZXhPZmZzZXRDYWxscysrXG4gICAgICBpbmRleFNpemUgPSB0aGlzLnNpemVzLmdldCh0aGlzLnBhcmFtLnVuaXF1ZUlkc1tpbmRleF0pXG4gICAgICBvZmZzZXQgPSBvZmZzZXQgKyAoaW5kZXhTaXplIHx8IHRoaXMuZ2V0RXN0aW1hdGVTaXplKCkpXG4gICAgfVxuXG4gICAgLy8gcmVtZW1iZXIgbGFzdCBjYWxjdWxhdGUgaW5kZXguXG4gICAgdGhpcy5sYXN0Q2FsY0luZGV4ID0gTWF0aC5tYXgodGhpcy5sYXN0Q2FsY0luZGV4LCBnaXZlbkluZGV4IC0gMSlcbiAgICB0aGlzLmxhc3RDYWxjSW5kZXggPSBNYXRoLm1pbih0aGlzLmxhc3RDYWxjSW5kZXgsIHRoaXMuZ2V0TGFzdEluZGV4KCkpXG5cbiAgICByZXR1cm4gb2Zmc2V0XG4gIH1cblxuICBpc0ZpeGVkVHlwZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsY1R5cGUgPT09IENBTENfVFlQRS5GSVhFRFxuICB9XG5cbiAgLy8gcmV0dXJuIHRoZSByZWFsIGxhc3QgaW5kZXguXG4gIGdldExhc3RJbmRleCAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW0udW5pcXVlSWRzLmxlbmd0aCAtIDFcbiAgfVxuXG4gIC8vIGluIHNvbWUgY29uZGl0aW9ucyByYW5nZSB3aWxsIGJyZWFrLCB3ZSBuZWVkIGNoZWNrIGFuZCBjb3JyZWN0IGl0XG4gIC8vIGFuZCB0aGVuIGRlY2lkZSB3aGV0aGVyIG5lZWQgdXBkYXRlIHRvIG5leHQgcmFuZ2UuXG4gIGNoZWNrUmFuZ2UgKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBrZWVwcyA9IHRoaXMucGFyYW0ua2VlcHNcbiAgICBjb25zdCB0b3RhbCA9IHRoaXMucGFyYW0udW5pcXVlSWRzLmxlbmd0aFxuXG4gICAgLy8gZGF0YXMgbGVzcyB0aGFuIGtlZXBzLCByZW5kZXIgYWxsLlxuICAgIGlmICh0b3RhbCA8PSBrZWVwcykge1xuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmdldExhc3RJbmRleCgpXG4gICAgfSBlbHNlIGlmIChlbmQgLSBzdGFydCA8IGtlZXBzIC0gMSkge1xuICAgICAgLy8gaWYgcmFuZ2UgbGVuZ3RoIGlzIGxlc3MgdGhhbiBrZWVwcywgY29ycmVudCBpdCBiYXNlIG9uIGVuZC5cbiAgICAgIHN0YXJ0ID0gZW5kIC0ga2VlcHMgKyAxXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmFuZ2Uuc3RhcnQgIT09IHN0YXJ0KSB7XG4gICAgICB0aGlzLnVwZGF0ZVJhbmdlKHN0YXJ0LCBlbmQpXG4gICAgfVxuICB9XG5cbiAgLy8gY2FsbCB1cGRhdGluZyB0byBhIG5ldyByYW5nZSBhbmQgcmVyZW5kZXIuXG4gIHVwZGF0ZVJhbmdlIChzdGFydCwgZW5kKSB7XG4gICAgdGhpcy5yYW5nZS5zdGFydCA9IHN0YXJ0XG4gICAgdGhpcy5yYW5nZS5lbmQgPSBlbmRcbiAgICB0aGlzLnJhbmdlLnBhZEZyb250ID0gdGhpcy5nZXRQYWRGcm9udCgpXG4gICAgdGhpcy5yYW5nZS5wYWRCZWhpbmQgPSB0aGlzLmdldFBhZEJlaGluZCgpXG5cbiAgICB0aGlzLnVwZGF0ZUhvb2sodGhpcy5nZXRSYW5nZSgpKVxuICB9XG5cbiAgLy8gcmV0dXJuIGVuZCBiYXNlIG9uIHN0YXJ0IHdoZW4gZ29pbmcgdG8gYSBuZXcgcmFuZ2UuXG4gIGdldEVuZEJ5U3RhcnQgKHN0YXJ0KSB7XG4gICAgY29uc3QgdGhlb3J5RW5kID0gc3RhcnQgKyB0aGlzLnBhcmFtLmtlZXBzIC0gMVxuICAgIGNvbnN0IHRydWVseUVuZCA9IE1hdGgubWluKHRoZW9yeUVuZCwgdGhpcy5nZXRMYXN0SW5kZXgoKSlcbiAgICByZXR1cm4gdHJ1ZWx5RW5kXG4gIH1cblxuICAvLyByZXR1cm4gdG90YWwgZnJvbnQgb2Zmc2V0LlxuICBnZXRQYWRGcm9udCAoKSB7XG4gICAgaWYgKHRoaXMuaXNGaXhlZFR5cGUoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZml4ZWRTaXplVmFsdWUgKiB0aGlzLnJhbmdlLnN0YXJ0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEluZGV4T2Zmc2V0KHRoaXMucmFuZ2Uuc3RhcnQpXG4gICAgfVxuICB9XG5cbiAgLy8gcmV0dXJuIHRvdGFsIGJlaGluZCBvZmZzZXQuXG4gIC8vIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UsIHVzZSBlc3RpbWF0ZWQgdmFsdWUgaWYgYSBub3QgY2FsY3VsYXRlZC5cbiAgZ2V0UGFkQmVoaW5kICgpIHtcbiAgICBjb25zdCBlbmQgPSB0aGlzLnJhbmdlLmVuZFxuICAgIGNvbnN0IGxhc3RJbmRleCA9IHRoaXMuZ2V0TGFzdEluZGV4KClcblxuICAgIGlmICh0aGlzLmlzRml4ZWRUeXBlKCkpIHtcbiAgICAgIHJldHVybiAobGFzdEluZGV4IC0gZW5kKSAqIHRoaXMuZml4ZWRTaXplVmFsdWVcbiAgICB9XG5cbiAgICAvLyBpZiBjYWxjdWxhdGVkIGFsbCBhbHJlYWR5LCByZXR1cm4gdGhlIGV4YWN0bHkgb2Zmc2V0LlxuICAgIGlmICh0aGlzLmxhc3RDYWxjSW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5kZXhPZmZzZXQobGFzdEluZGV4KSAtIHRoaXMuZ2V0SW5kZXhPZmZzZXQoZW5kKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBub3QsIHJldHVybiBhIGVzdGltYXRlIG9mZnNldC5cbiAgICAgIHJldHVybiAobGFzdEluZGV4IC0gZW5kKSAqIHRoaXMuZ2V0RXN0aW1hdGVTaXplKClcbiAgICB9XG4gIH1cblxuICAvLyBnZXQgZXN0aW1hdGUgc2l6ZSBmb3Igb25lIGl0ZW0sIGdldCBmcm9tIHBhcmFtLnNpemUgYXQgZmlyc3QgcmFuZ2UuXG4gIGdldEVzdGltYXRlU2l6ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlyc3RSYW5nZUF2ZXJhZ2VTaXplIHx8IHRoaXMucGFyYW0uc2l6ZVxuICB9XG59XG4iLCIvKipcbiAqIHByb3BzIGRlY2xhcmF0aW9uIGZvciBkZWZhdWx0LCBpdGVtIGFuZCBzbG90IGNvbXBvbmVudC5cbiAqL1xuXG5leHBvcnQgY29uc3QgVmlydHVhbFByb3BzID0ge1xuICBzaXplOiB7XG4gICAgdHlwZTogTnVtYmVyXG4gIH0sXG4gIGtlZXBzOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIHJlcXVpcmU6IHRydWVcbiAgfSxcblxuICBkYXRhS2V5OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmU6IHRydWVcbiAgfSxcbiAgZGF0YVNvdXJjZXM6IHtcbiAgICB0eXBlOiBBcnJheSxcbiAgICByZXF1aXJlOiB0cnVlXG4gIH0sXG4gIGRhdGFDb21wb25lbnQ6IHtcbiAgICB0eXBlOiBPYmplY3QsXG4gICAgcmVxdWlyZTogdHJ1ZVxuICB9LFxuICBleHRyYVByb3BzOiB7XG4gICAgdHlwZTogT2JqZWN0XG4gIH0sXG5cbiAgcm9vdFRhZzoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnZGl2J1xuICB9LFxuICB3cmFwVGFnOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdkaXYnXG4gIH0sXG4gIHdyYXBDbGFzczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJ1xuICB9LFxuXG4gIGRpcmVjdGlvbjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAndmVydGljYWwnIC8vIHRoZSBvdGhlciB2YWx1ZSBpcyBob3Jpem9udGFsLlxuICB9LFxuICB1cHBlclRocmVzaG9sZDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAwXG4gIH0sXG4gIGxvd2VyVGhyZXNob2xkOiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDBcbiAgfSxcbiAgc3RhcnQ6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMFxuICB9LFxuICBvZmZzZXQ6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMFxuICB9LFxuXG4gIGl0ZW1UYWc6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogJ2RpdidcbiAgfSxcbiAgaXRlbUNsYXNzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICcnXG4gIH0sXG5cbiAgaGVhZGVyVGFnOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICdkaXYnXG4gIH0sXG4gIGhlYWRlckNsYXNzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6ICcnXG4gIH0sXG4gIGZvb3RlclRhZzoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnZGl2J1xuICB9LFxuICBmb290ZXJDbGFzczoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiAnJ1xuICB9LFxuXG4gIGRpc2FibGVkOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBJdGVtUHJvcHMgPSB7XG4gIGV2ZW50OiB7XG4gICAgdHlwZTogU3RyaW5nXG4gIH0sXG4gIHRhZzoge1xuICAgIHR5cGU6IFN0cmluZ1xuICB9LFxuICBob3Jpem9udGFsOiB7XG4gICAgdHlwZTogQm9vbGVhblxuICB9LFxuICBzb3VyY2U6IHtcbiAgICB0eXBlOiBPYmplY3RcbiAgfSxcbiAgY29tcG9uZW50OiB7XG4gICAgdHlwZTogT2JqZWN0XG4gIH0sXG4gIHVuaXF1ZUtleToge1xuICAgIHR5cGU6IFN0cmluZ1xuICB9LFxuICBleHRyYVByb3BzOiB7XG4gICAgdHlwZTogT2JqZWN0XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFNsb3RQcm9wcyA9IHtcbiAgZXZlbnQ6IHtcbiAgICB0eXBlOiBTdHJpbmdcbiAgfSxcbiAgdW5pcXVlS2V5OiB7XG4gICAgdHlwZTogU3RyaW5nXG4gIH0sXG4gIHRhZzoge1xuICAgIHR5cGU6IFN0cmluZ1xuICB9LFxuICBob3Jpem9udGFsOiB7XG4gICAgdHlwZTogQm9vbGVhblxuICB9XG59XG4iLCIvKipcbiAqIGl0ZW0gYW5kIHNsb3QgY29tcG9uZW50IGJvdGggdXNlIHNpbWlsYXIgd3JhcHBlclxuICogd2UgbmVlZCB0byBrbm93IHRoZWlyIHNpemUgY2hhbmdlIGF0IGFueSB0aW1lLlxuICovXG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IHsgSXRlbVByb3BzLCBTbG90UHJvcHMgfSBmcm9tICcuL3Byb3BzJ1xuXG5jb25zdCBXcmFwcGVyID0ge1xuICBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmhhc0luaXRpYWwgPSBmYWxzZVxuICAgIHRoaXMuc2hhcGVLZXkgPSB0aGlzLmhvcml6b250YWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICAvLyBkaXNwYXRjaCBvbmNlIGF0IGluaXRpYWwuXG4gICAgdGhpcy5kaXNwYXRjaFNpemVDaGFuZ2UoKVxuXG4gICAgaWYgKHR5cGVvZiBSZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKCkgPT4ge1xuICAgICAgICAvLyBkaXNwYXRjaCB3aGVuIHNpemUgY2hhbmdlZC5cbiAgICAgICAgaWYgKHRoaXMuaGFzSW5pdGlhbCkge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTaXplQ2hhbmdlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhhc0luaXRpYWwgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLm9ic2VydmUodGhpcy4kZWwpXG4gICAgfVxuICB9LFxuXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLnJlc2l6ZU9ic2VydmVyKSB7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGdldEN1cnJlbnRTaXplICgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbCA/IHRoaXMuJGVsW3RoaXMuc2hhcGVLZXldIDogMFxuICAgIH0sXG5cbiAgICAvLyB0ZWxsIHBhcmVudCBjdXJyZW50IHNpemUgaWRlbnRpZnkgYnkgdW5xaXVlIGtleS5cbiAgICBkaXNwYXRjaFNpemVDaGFuZ2UgKCkge1xuICAgICAgdGhpcy4kcGFyZW50LiRlbWl0KHRoaXMuZXZlbnQsIHRoaXMudW5pcXVlS2V5LCB0aGlzLmdldEN1cnJlbnRTaXplKCksIHRoaXMuaGFzSW5pdGlhbClcbiAgICB9XG4gIH1cbn1cblxuLy8gd3JhcHBpbmcgZm9yIGl0ZW0uXG5leHBvcnQgY29uc3QgSXRlbSA9IFZ1ZS5jb21wb25lbnQoJ3ZpcnR1YWwtbGlzdC1pdGVtJywge1xuICBtaXhpbnM6IFtXcmFwcGVyXSxcblxuICBwcm9wczogSXRlbVByb3BzLFxuXG4gIHJlbmRlciAoaCkge1xuICAgIHJldHVybiBoKHRoaXMudGFnLCB7XG4gICAgICByb2xlOiAnaXRlbSdcbiAgICB9LCBbaCh0aGlzLmNvbXBvbmVudCwge1xuICAgICAgcHJvcHM6IHtcbiAgICAgICAgLi4udGhpcy5leHRyYVByb3BzLFxuICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICB9XG4gICAgfSldKVxuICB9XG59KVxuXG4vLyB3cmFwcGluZyBmb3Igc2xvdC5cbmV4cG9ydCBjb25zdCBTbG90ID0gVnVlLmNvbXBvbmVudCgndmlydHVhbC1saXN0LXNsb3QnLCB7XG4gIG1peGluczogW1dyYXBwZXJdLFxuXG4gIHByb3BzOiBTbG90UHJvcHMsXG5cbiAgcmVuZGVyIChoKSB7XG4gICAgcmV0dXJuIGgodGhpcy50YWcsIHtcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIHJvbGU6IHRoaXMudW5pcXVlS2V5XG4gICAgICB9XG4gICAgfSwgdGhpcy4kc2xvdHMuZGVmYXVsdClcbiAgfVxufSlcbiIsIi8qKlxuICogdmlydHVhbCBsaXN0IGRlZmF1bHQgY29tcG9uZW50LlxuICovXG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IFZpcnR1YWwgZnJvbSAnLi92aXJ0dWFsJ1xuaW1wb3J0IHsgSXRlbSwgU2xvdCB9IGZyb20gJy4vaXRlbSdcbmltcG9ydCB7IFZpcnR1YWxQcm9wcyB9IGZyb20gJy4vcHJvcHMnXG5cbmNvbnN0IEVWRU5UX1RZUEUgPSB7XG4gIElURU06ICdpdGVtX3Jlc2l6ZScsXG4gIFNMT1Q6ICdzbG90X3Jlc2l6ZSdcbn1cbmNvbnN0IFNMT1RfVFlQRSA9IHtcbiAgSEVBREVSOiAnaGVhZGVyJywgLy8gc3RyaW5nIHZhbHVlIGFsc28gdXNlIGZvciBhcmlhIHJvbGUgYXR0cmlidXRlLlxuICBGT09URVI6ICdmb290ZXInXG59XG5cbmNvbnN0IE5BTUUgPSAndmlydHVhbC1saXN0J1xuXG5jb25zdCBWaXJ0dWFsTGlzdCA9IFZ1ZS5jb21wb25lbnQoTkFNRSwge1xuICBwcm9wczogVmlydHVhbFByb3BzLFxuXG4gIGRhdGEgKCkge1xuICAgIHJldHVybiB7XG4gICAgICByYW5nZTogbnVsbFxuICAgIH1cbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGRhdGFTb3VyY2VzIChuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgIGlmIChuZXdWYWx1ZS5sZW5ndGggIT09IG9sZFZhbHVlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnZpcnR1YWwudXBkYXRlUGFyYW0oJ3VuaXF1ZUlkcycsIHRoaXMuZ2V0VW5pcXVlSWRGcm9tRGF0YVNvdXJjZXMoKSlcbiAgICAgICAgdGhpcy52aXJ0dWFsLmhhbmRsZURhdGFTb3VyY2VzQ2hhbmdlKClcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5pc0hvcml6b250YWwgPSB0aGlzLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnXG4gICAgdGhpcy5kaXJlY3Rpb25LZXkgPSB0aGlzLmlzSG9yaXpvbnRhbCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXG5cbiAgICB0aGlzLnZpcnR1YWwgPSBuZXcgVmlydHVhbCh7XG4gICAgICBzaXplOiB0aGlzLnNpemUsIC8vIGFsc28gY291bGQgYmUgYSBlc3RpbWF0ZSB2YWx1ZS5cbiAgICAgIHNsb3RIZWFkZXJTaXplOiAwLFxuICAgICAgc2xvdEZvb3RlclNpemU6IDAsXG4gICAgICBrZWVwczogdGhpcy5rZWVwcyxcbiAgICAgIGJ1ZmZlcjogTWF0aC5yb3VuZCh0aGlzLmtlZXBzIC8gMyksIC8vIHJlY29tbWVuZCBmb3IgYSB0aGlyZCBvZiBrZWVwcy5cbiAgICAgIHVuaXF1ZUlkczogdGhpcy5nZXRVbmlxdWVJZEZyb21EYXRhU291cmNlcygpXG4gICAgfSwgdGhpcy5vblJhbmdlQ2hhbmdlZClcblxuICAgIC8vIGp1c3QgZm9yIGRlYnVnXG4gICAgLy8gd2luZG93LnZpcnR1YWwgPSB0aGlzLnZpcnR1YWxcblxuICAgIC8vIGFsc28gbmVlZCBzeW5jIGluaXRpYWwgcmFuZ2UgZmlyc3QuXG4gICAgdGhpcy5yYW5nZSA9IHRoaXMudmlydHVhbC5nZXRSYW5nZSgpXG5cbiAgICAvLyBsaXN0ZW4gaXRlbSBzaXplIGNoYW5naW5nLlxuICAgIHRoaXMuJG9uKEVWRU5UX1RZUEUuSVRFTSwgdGhpcy5vbkl0ZW1SZXNpemVkKVxuXG4gICAgLy8gbGlzdGVuIHNsb3Qgc2l6ZSBjaGFuZ2luZy5cbiAgICBpZiAodGhpcy4kc2xvdHMuaGVhZGVyIHx8IHRoaXMuJHNsb3RzLmZvb3Rlcikge1xuICAgICAgdGhpcy4kb24oRVZFTlRfVFlQRS5TTE9ULCB0aGlzLm9uU2xvdFJlc2l6ZWQpXG4gICAgfVxuICB9LFxuXG4gIGJlZm9yZURlc3Ryb3kgKCkge1xuICAgIHRoaXMudmlydHVhbC5kZXN0cm95KClcbiAgfSxcblxuICBtb3VudGVkICgpIHtcbiAgICAvLyBzZXQgcG9zaXRpb24uXG4gICAgaWYgKHRoaXMuc3RhcnQpIHtcbiAgICAgIHRoaXMuc2V0U2Nyb2xsT2Zmc2V0KHRoaXMudmlydHVhbC5nZXRPZmZzZXQodGhpcy5zdGFydCkpXG4gICAgfSBlbHNlIGlmICh0aGlzLm9mZnNldCkge1xuICAgICAgdGhpcy5zZXRTY3JvbGxPZmZzZXQodGhpcy5vZmZzZXQpXG4gICAgfVxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICAvLyBldmVudCBjYWxsZWQgd2hlbiBldmVyeSBpdGVtIG1vdW50ZWQgb3Igc2l6ZSBjaGFuZ2VkLlxuICAgIG9uSXRlbVJlc2l6ZWQgKGlkLCBzaXplKSB7XG4gICAgICB0aGlzLnZpcnR1YWwuc2F2ZVNpemUoaWQsIHNpemUpXG4gICAgfSxcblxuICAgIC8vIGV2ZW50IGNhbGxlZCB3aGVuIHNsb3QgbW91bnRlZCBvciBzaXplIGNoYW5nZWQuXG4gICAgb25TbG90UmVzaXplZCAodHlwZSwgc2l6ZSwgaGFzSW5pdCkge1xuICAgICAgaWYgKHR5cGUgPT09IFNMT1RfVFlQRS5IRUFERVIpIHtcbiAgICAgICAgdGhpcy52aXJ0dWFsLnVwZGF0ZVBhcmFtKCdzbG90SGVhZGVyU2l6ZScsIHNpemUpXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNMT1RfVFlQRS5GT09URVIpIHtcbiAgICAgICAgdGhpcy52aXJ0dWFsLnVwZGF0ZVBhcmFtKCdzbG90Rm9vdGVyU2l6ZScsIHNpemUpXG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNJbml0KSB7XG4gICAgICAgIHRoaXMudmlydHVhbC5oYW5kbGVTbG90U2l6ZUNoYW5nZSgpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIGhlcmUgaXMgdGhlIHJlcmVuZGVyaW5nIGVudHJ5LlxuICAgIG9uUmFuZ2VDaGFuZ2VkIChyYW5nZSkge1xuICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlXG4gICAgfSxcblxuICAgIG9uU2Nyb2xsIChldnQpIHtcbiAgICAgIGNvbnN0IHsgcm9vdCB9ID0gdGhpcy4kcmVmc1xuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBjb25zdCBvZmZzZXQgPSByb290W3RoaXMuZGlyZWN0aW9uS2V5XVxuICAgICAgdGhpcy52aXJ0dWFsLmhhbmRsZVNjcm9sbChvZmZzZXQpXG4gICAgICB0aGlzLmVtaXRFdmVudChvZmZzZXQsIGV2dClcbiAgICB9LFxuXG4gICAgZ2V0VW5pcXVlSWRGcm9tRGF0YVNvdXJjZXMgKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YVNvdXJjZXMubWFwKChkYXRhU291cmNlKSA9PiBkYXRhU291cmNlW3RoaXMuZGF0YUtleV0pXG4gICAgfSxcblxuICAgIC8vIHNldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiB0byBhIGV4cGVjdGFudCBvZmZzZXQuXG4gICAgc2V0U2Nyb2xsT2Zmc2V0IChvZmZzZXQpIHtcbiAgICAgIGNvbnN0IHsgcm9vdCB9ID0gdGhpcy4kcmVmc1xuICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgcm9vdFt0aGlzLmRpcmVjdGlvbktleV0gPSBvZmZzZXQgfHwgMFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBlbWl0IGV2ZW50IGluIHNwZWNpYWwgcG9zaXRpb24uXG4gICAgZW1pdEV2ZW50IChvZmZzZXQsIGV2dCkge1xuICAgICAgLy8gcmVmIGVsZW1lbnQgaXMgZGVmaW5pdGVseSBhdmFpbGFibGUgaGVyZS5cbiAgICAgIGNvbnN0IHsgcm9vdCB9ID0gdGhpcy4kcmVmc1xuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLnZpcnR1YWwuZ2V0UmFuZ2UoKVxuICAgICAgY29uc3QgaXNGcm9udCA9IHRoaXMudmlydHVhbC5pc0Zyb250KClcbiAgICAgIGNvbnN0IGlzQmVoaW5kID0gdGhpcy52aXJ0dWFsLmlzQmVoaW5kKClcbiAgICAgIGNvbnN0IG9mZnNldFNoYXBlID0gcm9vdFt0aGlzLmlzSG9yaXpvbnRhbCA/ICdjbGllbnRXaWR0aCcgOiAnY2xpZW50SGVpZ2h0J11cbiAgICAgIGNvbnN0IHNjcm9sbFNoYXBlID0gcm9vdFt0aGlzLmlzSG9yaXpvbnRhbCA/ICdzY3JvbGxXaWR0aCcgOiAnc2Nyb2xsSGVpZ2h0J11cblxuICAgICAgaWYgKGlzRnJvbnQgJiYgISF0aGlzLmRhdGFTb3VyY2VzLmxlbmd0aCAmJiBvZmZzZXQgLSB0aGlzLnVwcGVyVGhyZXNob2xkIDw9IDApIHtcbiAgICAgICAgdGhpcy4kZW1pdCgndG90b3AnLCBldnQsIHJhbmdlKVxuICAgICAgfSBlbHNlIGlmIChpc0JlaGluZCAmJiBvZmZzZXQgKyBvZmZzZXRTaGFwZSArIHRoaXMubG93ZXJUaHJlc2hvbGQgPj0gc2Nyb2xsU2hhcGUpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgndG9ib3R0b20nLCBldnQsIHJhbmdlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnc2Nyb2xsJywgZXZ0LCByYW5nZSlcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gZ2V0IHRoZSByZWFsIHJlbmRlciBzbG90cyBiYXNlZCBvbiByYW5nZSBkYXRhLlxuICAgIGdldFJlbmRlclNsb3RzIChoKSB7XG4gICAgICBjb25zdCBzbG90cyA9IFtdXG4gICAgICBjb25zdCBzdGFydCA9IHRoaXMuZGlzYWJsZWQgPyAwIDogdGhpcy5yYW5nZS5zdGFydFxuICAgICAgY29uc3QgZW5kID0gdGhpcy5kaXNhYmxlZCA/IHRoaXMuZGF0YVNvdXJjZXMubGVuZ3RoIC0gMSA6IHRoaXMucmFuZ2UuZW5kXG4gICAgICBmb3IgKGxldCBpbmRleCA9IHN0YXJ0OyBpbmRleCA8PSBlbmQ7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IHRoaXMuZGF0YVNvdXJjZXNbaW5kZXhdXG4gICAgICAgIGlmIChkYXRhU291cmNlKSB7XG4gICAgICAgICAgc2xvdHMucHVzaChoKEl0ZW0sIHtcbiAgICAgICAgICAgIGNsYXNzOiB0aGlzLml0ZW1DbGFzcyxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgIHRhZzogdGhpcy5pdGVtVGFnLFxuICAgICAgICAgICAgICBldmVudDogRVZFTlRfVFlQRS5JVEVNLFxuICAgICAgICAgICAgICBob3Jpem9udGFsOiB0aGlzLmlzSG9yaXpvbnRhbCxcbiAgICAgICAgICAgICAgdW5pcXVlS2V5OiBkYXRhU291cmNlW3RoaXMuZGF0YUtleV0sXG4gICAgICAgICAgICAgIHNvdXJjZTogZGF0YVNvdXJjZSxcbiAgICAgICAgICAgICAgZXh0cmFQcm9wczogdGhpcy5leHRyYVByb3BzLFxuICAgICAgICAgICAgICBjb21wb25lbnQ6IHRoaXMuZGF0YUNvbXBvbmVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgWyR7TkFNRX1dOiBjYW5ub3QgZ2V0IHRoZSBpbmRleCAke2luZGV4fSBmcm9tIGRhdGEtc291cmNlcy5gKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2xvdHNcbiAgICB9XG4gIH0sXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uLCBhIGNsb3Nlci10by10aGUtY29tcGlsZXIgYWx0ZXJuYXRpdmUgdG8gdGVtcGxhdGVzLlxuICAvLyBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZW5kZXItZnVuY3Rpb24uaHRtbCNUaGUtRGF0YS1PYmplY3QtSW4tRGVwdGhcbiAgcmVuZGVyIChoKSB7XG4gICAgY29uc3QgeyBoZWFkZXIsIGZvb3RlciB9ID0gdGhpcy4kc2xvdHNcbiAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5kaXNhYmxlZCA/IDAgOiB0aGlzLmlzSG9yaXpvbnRhbFxuICAgICAgPyBgMHB4ICR7dGhpcy5yYW5nZS5wYWRCZWhpbmR9cHggMHB4ICR7dGhpcy5yYW5nZS5wYWRGcm9udH1weGBcbiAgICAgIDogYCR7dGhpcy5yYW5nZS5wYWRGcm9udH1weCAwcHggJHt0aGlzLnJhbmdlLnBhZEJlaGluZH1weGBcblxuICAgIHJldHVybiBoKHRoaXMucm9vdFRhZywge1xuICAgICAgcmVmOiAncm9vdCcsXG4gICAgICBvbjoge1xuICAgICAgICAnJnNjcm9sbCc6IHRoaXMub25TY3JvbGxcbiAgICAgIH1cbiAgICB9LCBbXG4gICAgICAvLyBoZWFkZXIgc2xvdC5cbiAgICAgIGhlYWRlciA/IGgoU2xvdCwge1xuICAgICAgICBjbGFzczogdGhpcy5oZWFkZXJDbGFzcyxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICB0YWc6IHRoaXMuaGVhZGVyVGFnLFxuICAgICAgICAgIGV2ZW50OiBFVkVOVF9UWVBFLlNMT1QsXG4gICAgICAgICAgdW5pcXVlS2V5OiBTTE9UX1RZUEUuSEVBREVSXG4gICAgICAgIH1cbiAgICAgIH0sIGhlYWRlcikgOiBudWxsLFxuXG4gICAgICAvLyBtYWluIGxpc3QuXG4gICAgICBoKHRoaXMud3JhcFRhZywge1xuICAgICAgICBjbGFzczogdGhpcy53cmFwQ2xhc3MsXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgcm9sZTogJ2dyb3VwJ1xuICAgICAgICB9LFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5nZXRSZW5kZXJTbG90cyhoKSksXG5cbiAgICAgIC8vIGZvb3RlciBzbG90LlxuICAgICAgZm9vdGVyID8gaChTbG90LCB7XG4gICAgICAgIGNsYXNzOiB0aGlzLmZvb3RlckNsYXNzLFxuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHRhZzogdGhpcy5mb290ZXJUYWcsXG4gICAgICAgICAgZXZlbnQ6IEVWRU5UX1RZUEUuU0xPVCxcbiAgICAgICAgICB1bmlxdWVLZXk6IFNMT1RfVFlQRS5GT09URVJcbiAgICAgICAgfVxuICAgICAgfSwgZm9vdGVyKSA6IG51bGxcbiAgICBdKVxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBWaXJ0dWFsTGlzdFxuIiwiaW1wb3J0IHsgQ3JlYXRlRWxlbWVudCwgVk5vZGUsIFZ1ZUNvbnN0cnVjdG9yIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IFZ1ZSwgQ29tcG9uZW50LCBQcm9wIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcidcbmltcG9ydCBEcmFnZ2FibGUgZnJvbSAndnVlZHJhZ2dhYmxlJ1xuaW1wb3J0IFZpcnR1YWxMaXN0IGZyb20gJ3Z1ZS12aXJ0dWFsLXNjcm9sbC1saXN0L3NyYy9pbmRleCdcblxuaW50ZXJmYWNlIElWaXJ0dWFsTGlzdCBleHRlbmRzIFZ1ZUNvbnN0cnVjdG9yIHtcbiAgb3B0aW9uczoge1xuICAgIG1ldGhvZHM6IHtcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdGFuZ2JjL3Z1ZS12aXJ0dWFsLXNjcm9sbC1saXN0L2Jsb2IvdjIuMC4zL3NyYy9pbmRleC5qcyNMOTlcbiAgICAgIGdldFJlbmRlclNsb3RzKGg6IENyZWF0ZUVsZW1lbnQpOiBBcnJheTxWTm9kZT47XG4gICAgfVxuICB9O1xuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3RhbmdiYy92dWUtdmlydHVhbC1zY3JvbGwtbGlzdC9ibG9iL3YyLjAuMy9zcmMvdmlydHVhbC5qcyNMMTZcbiAgcmFuZ2U6IHtcbiAgICBzdGFydDogbnVtYmVyO1xuICB9XG59XG5cbmludGVyZmFjZSBJRHJhZ2dhYmxlIGV4dGVuZHMgVnVlQ29uc3RydWN0b3Ige1xuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1NvcnRhYmxlSlMvVnVlLkRyYWdnYWJsZS9ibG9iL3YyLjIzLjIvc3JjL3Z1ZWRyYWdnYWJsZS5qcyNMNDI3XG4gICRlbWl0KGV2ZW50TmFtZTogJ2NoYW5nZScsIGV2ZW50OiBEcmFnZ2FibGVNb3ZlRXZlbnQpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgRHJhZ2dhYmxlTW92ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICBtb3ZlZDoge1xuICAgIG9sZEluZGV4OiBudW1iZXI7XG4gICAgbmV3SW5kZXg6IG51bWJlcjtcbiAgfVxufVxuXG4vLyBTb3J0YWJsZUpTL1Z1ZS5EcmFnZ2FibGUgKyB0YW5nYmMvdnVlLXZpcnR1YWwtc2Nyb2xsLWxpc3QuXG5AQ29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEcmFnZ2FibGVWaXJ0dWFsTGlzdDxUPiBleHRlbmRzIFZ1ZSB7XG4gIEBQcm9wKHsgZGVmYXVsdDogKCkgPT4gRHJhZ2dhYmxlIH0pIGRyYWdnYWJsZUN0b3IhOiBJRHJhZ2dhYmxlXG5cbiAgQFByb3AoeyBkZWZhdWx0OiAoKSA9PiBWaXJ0dWFsTGlzdCB9KSB2aXJ0dWFsTGlzdEN0b3IhOiBJVmlydHVhbExpc3RcblxuICBAUHJvcCgpIGtlZXBzITogbnVtYmVyXG4gIEBQcm9wKCkgZGF0YUtleSE6IHN0cmluZ1xuICBAUHJvcCgpIGRhdGFTb3VyY2VzITogQXJyYXk8VD5cbiAgQFByb3AoKSBkYXRhQ29tcG9uZW50ITogVnVlQ29uc3RydWN0b3JcbiAgQFByb3AoKSBzaXplOiBudW1iZXJcblxuICBAUHJvcCgpIHZhbHVlITogQXJyYXk8VD47XG5cbiAgcHVibGljIGNyZWF0ZWQoKSB7XG4gICAgLy8g44GT44Gu44OR44OD44OB44KS44GC44Gm44KL44Go44CBVmlydHVhbExpc3TjgYxEcmFnZ2FibGXjgpLlrZDjganjgoLjgavmjIHjgaTjgojjgYbjgavjgarjgotcbiAgICBwYXRjaFZpcnR1YWxMaXN0R2V0UmVuZGVyU2xvdHMoXG4gICAgICB0aGlzLnZpcnR1YWxMaXN0Q3RvciwgdGhpcy5kcmFnZ2FibGVDdG9yLCB0aGlzKVxuICB9XG5cbiAgcHVibGljIHJlbmRlcihoOiBDcmVhdGVFbGVtZW50KSB7XG4gICAgY29uc3QgeyBrZWVwcywgZGF0YUtleSwgZGF0YVNvdXJjZXMsIGRhdGFDb21wb25lbnQsIHNpemUgfSA9IHRoaXNcblxuICAgIHJldHVybiBoKHRoaXMudmlydHVhbExpc3RDdG9yLCB7XG4gICAgICBwcm9wczoge1xuICAgICAgICBrZWVwcyxcbiAgICAgICAgZGF0YUtleSxcbiAgICAgICAgZGF0YVNvdXJjZXMsXG4gICAgICAgIGRhdGFDb21wb25lbnQsXG4gICAgICAgIHNpemUsXG4gICAgICB9LFxuICAgICAgb246IHtcbiAgICAgICAgLy8gRHJhZ2dhYmxl44GuaW5wdXTjgqTjg5njg7Pjg4jjgpLjg5fjg63jg5HjgrLjg7zjg4jjgZnjgotcbiAgICAgICAgaW5wdXQ6IHRoaXMuJGVtaXQuYmluZCh0aGlzLCAnaW5wdXQnKSxcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbi8qIEZVQ0tJTkcgVUdMWSBOQUlWRSBNT05LRVktUEFUQ0hJTkdzICovXG5cbi8vIE1vbmtleS1wYXRjaCBWaXJ0dWFsTGlzdC5wcm90b3R5cGUuZ2V0UmVuZGVyU2xvdHMgdG8gaW5jbHVkZSBEcmFnZ2FibGUuXG5mdW5jdGlvbiBwYXRjaFZpcnR1YWxMaXN0R2V0UmVuZGVyU2xvdHM8VD4oXG4gIFZpcnR1YWxMaXN0OiBJVmlydHVhbExpc3QsXG4gIERyYWdnYWJsZTogSURyYWdnYWJsZSxcbiAgY29udGV4dDogRHJhZ2dhYmxlVmlydHVhbExpc3Q8VD4pIHtcbiAgY29uc3QgeyBnZXRSZW5kZXJTbG90czogb3JpZ2luYWwgfSA9IFZpcnR1YWxMaXN0Lm9wdGlvbnMubWV0aG9kc1xuXG4gIGZ1bmN0aW9uIHBhdGNoZWQoaDogQ3JlYXRlRWxlbWVudCkge1xuICAgIGNvbnN0IHZpcnR1YWxMaXN0ID0gdGhpc1xuICAgIGNvbnN0IHNsb3RzID0gb3JpZ2luYWwuY2FsbCh2aXJ0dWFsTGlzdCwgaClcblxuICAgIHJldHVybiBbXG4gICAgICBoKERyYWdnYWJsZSwge1xuICAgICAgICBwcm9wczoge1xuICAgICAgICAgIHZhbHVlOiBjb250ZXh0LnZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGNoYW5nZTogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoISgnbW92ZWQnIGluIGUpKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25Nb3ZlZC5jYWxsKHRoaXMsIGUsIHZpcnR1YWxMaXN0KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgc2xvdHMpXG4gICAgXVxuICB9XG5cbiAgLy8gRHJhZ2dhYmxl44GuY2hhbmdlOm1vdmVk44Kk44OZ44Oz44OI44KSaW5wdXTjgqTjg5njg7Pjg4jjgavlpInmj5vjgZnjgotcbiAgLy8gVmlydHVhbExpc3TjgpLliqDlkbPjgZfjgZ/mt7vlrZfjgpLlhYPjgavkvZzmiJDjgZfjgZ/jg6rjgrnjg4jjgpJpbnB1dOOCpOODmeODs+ODiOOBruaDheWgseOBqOOBl+OBpmVtaXTjgZnjgotcbiAgZnVuY3Rpb24gb25Nb3ZlZChldnQ6IERyYWdnYWJsZU1vdmVFdmVudCwgdmlydHVhbExpc3Q6IElWaXJ0dWFsTGlzdCkge1xuICAgIGNvbnN0IHsgc3RhcnQgfSA9IHZpcnR1YWxMaXN0LnJhbmdlXG4gICAgY29uc3QgeyBvbGRJbmRleCwgbmV3SW5kZXggfSA9IGV2dC5tb3ZlZFxuICAgIGNvbnN0IG5ld0xpc3QgPSBbLi4uY29udGV4dC52YWx1ZV07XG5cbiAgICBuZXdMaXN0LnNwbGljZShcbiAgICAgIHN0YXJ0ICsgbmV3SW5kZXgsXG4gICAgICAwLFxuICAgICAgbmV3TGlzdC5zcGxpY2Uoc3RhcnQgKyBvbGRJbmRleCwgMSlbMF0pO1xuXG4gICAgdGhpcy4kZW1pdCgnaW5wdXQnLCBuZXdMaXN0KTtcbiAgfVxuXG4gIFZpcnR1YWxMaXN0Lm9wdGlvbnMubWV0aG9kcy5nZXRSZW5kZXJTbG90cyA9IHBhdGNoZWRcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=